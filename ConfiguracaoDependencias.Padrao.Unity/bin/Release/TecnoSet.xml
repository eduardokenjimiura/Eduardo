<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TecnoSet</name>
    </assembly>
    <members>
        <member name="M:TecnoSet.Caching.IResourceCache`1.Load(`0@)">
            <summary>
            Carrega o recurso no CachedValue e preênche a variável resource
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="P:TecnoSet.Caching.IResourceCache`1.CacheSources">
            <summary>
            Controla as fontes utilizadas para armazenar este cache.
            Ao definir uma fonte juntamente com a flag | CacheSources.SingleSource, as outras fontes serão limpas.
            Ao definir CacheSources.SingleSource | CacheSources.WeakReference, a memória e o disco serão limpos
            </summary>
        </member>
        <member name="T:TecnoSet.DataAnnotations.RequiredGreaterThanZeroAttribute">
            <summary>
            Valida se um valor foi informado e se o valor informado é maior que zero
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:TecnoSet.InitializeOnLoadAttribute" -->
        <member name="M:TecnoSet.InitializeOnLoadAttribute.RunConstructorForAttributes(System.Reflection.Assembly)">
            <summary>
            Maniputador padrão do evento AppDomain.CurrentDomain.AssemblyLoad
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.IndexOfFirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            performs an action on an ienumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="action">action on the selected item and its index</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimal element of the given sequence, based on
            the given projection.
            </summary>
            <remarks>
            If more than one element has the minimal projected value, the first
            one encountered will be returned. This overload uses the default comparer
            for the projected type. This operator uses immediate execution, but
            only buffers a single result (the current minimal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The minimal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty</exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the minimal element of the given sequence, based on
            the given projection and the specified comparer for projected values.
            </summary>
            <remarks>
            If more than one element has the minimal projected value, the first
            one encountered will be returned. This overload uses the default comparer
            for the projected type. This operator uses immediate execution, but
            only buffers a single result (the current minimal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The minimal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>, <paramref name="selector"/> 
            or <paramref name="comparer"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty</exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximal element of the given sequence, based on
            the given projection.
            </summary>
            <remarks>
            If more than one element has the maximal projected value, the first
            one encountered will be returned. This overload uses the default comparer
            for the projected type. This operator uses immediate execution, but
            only buffers a single result (the current maximal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty</exception>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the maximal element of the given sequence, based on
            the given projection and the specified comparer for projected values. 
            </summary>
            <remarks>
            If more than one element has the maximal projected value, the first
            one encountered will be returned. This overload uses the default comparer
            for the projected type. This operator uses immediate execution, but
            only buffers a single result (the current maximal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>, <paramref name="selector"/> 
            or <paramref name="comparer"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> is empty</exception>
        </member>
        <member name="M:System.Collections.Generic.IterationEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            performs an action on an ienumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="action">action on the selected item and its index</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.ObjectModel.ExceptionHelper.CollectionSyncronizationException``2(System.String,System.Exception,``0,``1)">
            <summary>
            creates a collection sync conversion exception
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResultItem"></typeparam>
            <param name="ex"></param>
            <param name="sourceCollection"></param>
            <param name="destinationCollection"></param>
            <param name="isNormalDirection"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.ObjectModel.ExceptionHelper.CollectionSyncronizationConvertException``2(System.Exception,``0,``1,System.Boolean)">
            <summary>
            creates a collection sync conversion exception
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="ex"></param>
            <param name="sourceCollection"></param>
            <param name="destinationCollection"></param>
            <param name="isNormalDirection"></param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.ObjectModel.MemberName">
            <summary>
            a helper class to retrieve the name of a property from an expression tree
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Collections.ObjectModel.MemberName.For``1(``0)" -->
        <member name="M:System.Collections.ObjectModel.MemberName.Prop``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary> 
            gets the property name for a member access 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="propertyExpression"></param> 
            <returns></returns> 
        </member>
        <member name="M:System.Collections.ObjectModel.MemberName.Param``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            gets the parameter name for the expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.ObjectModel.MemberName`1">
            <summary> 
            a typed helper class to retrieve the name of a property from an expression 
            </summary> 
            <typeparam name="TClass"></typeparam> 
        </member>
        <member name="M:System.Collections.ObjectModel.MemberName`1.Prop``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary> 
            retrieves the name of the propery based on an expression tree 
            </summary> 
            <param name="propertyExpression"></param> 
            <returns></returns> 
        </member>
        <member name="M:System.Collections.ObjectModel.MemberName`1.IsEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            compares the equality of the property name with the expression and also checks if the raised property might be an explicit interface implementation property raised
            </summary>
            <typeparam name="V"></typeparam>
            <param name="propertyExpression"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.ObjectModel.MemberNameFor`1">
            <summary> 
            a typed helper class to retrieve the name of a property from an expression 
            </summary> 
            <typeparam name="TClass"></typeparam> 
        </member>
        <member name="M:System.Collections.ObjectModel.MemberNameFor`1.Prop``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary> 
            retrieves the name of the propery based on an expression tree 
            </summary> 
            <param name="propertyExpression"></param> 
            <returns></returns> 
        </member>
        <member name="M:System.Collections.ObjectModel.MemberNameFor`1.IsEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            compares the equality of the property name with the expression and also checks if the raised property might be an explicit interface implementation property raised
            </summary>
            <typeparam name="V"></typeparam>
            <param name="propertyExpression"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:System.Collections.ObjectModel.OneWayCollectionSynchronizationToken`4.IsSyncing">
            <summary>
            whether the syncronization is turned on
            </summary>
        </member>
        <member name="F:System.Collections.ObjectModel.OneWayCollectionSynchronizationToken`4.isActive">
            <summary>
            this field turns the effective syncronization off, so that the handlers do not start calling each other in an unlimited way
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.OneWayCollectionSynchronizationToken`4.StopSync">
            <summary>
            stops the syncronization
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.OneWayCollectionSynchronizationToken`4.RestartSync">
            <summary>
            starts again the syncronization
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.OneWayCollectionSynchronizationToken`4.HandleCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.String,System.String,`0,`2,System.Func{`1,`3})">
            <summary>
            handles the collection changed event
            </summary>
            <typeparam name="TItemSource"></typeparam>
            <typeparam name="TItemDest"></typeparam>
            <param name="sourceCollectionName"></param>
            <param name="destinationCollectionName"></param>
            <param name="sourceCollection"></param>
            <param name="destinationCollection"></param>
        </member>
        <member name="M:System.Collections.ObjectModel.OneWayCollectionSynchronizationToken`4.InitDestinationCollectionValues">
            <summary>
            sets the correct values on the destination collection to begin a syncronized state
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.OneWayCollectionSynchronizationToken`4.AddHandlers">
            <summary>
            adds the collection change handlers to the collections
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.OneWayCollectionSynchronizationToken`4.RemoveHandlers">
            <summary>
            removes the handlers
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.ObservableCollectionExtensions.SyncTo``4(``0,``1,System.Func{``2,``3})">
            <summary>
            creates a syncronization token from the specified collection
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TSourceItem"></typeparam>
            <typeparam name="TDestinationItem"></typeparam>
            <param name="destinationCollection"></param>
            <param name="sourecCollection"></param>
            <param name="converter">the converter function</param>
            <param name="convertBack">optionally the convert back function</param>
            <returns></returns>
        </member>
        <member name="T:System.IO.IFileStorage">
            <summary>
            Abstrai e envelopa o acesso aos diretórios e arquivos de forma que seja possível fazer testes sem nenhum arquivo, 
            utilizar de forma transparente IsolatedStorageFile, FTP, arquivos do windows
            </summary>
        </member>
        <member name="M:System.IO.StreamByteOrderMarkEncodingDetector.GetEncoding(System.IO.Stream)">
            <summary>
            Determines a text file's encoding by analyzing its byte order mark (BOM).
            Defaults to ASCII when detection of the text file's endianness fails.
            </summary>
            <param name="filename">The text file to analyze.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:System.Reflection.AssemblyBindingRedirectHelper.RedirectAssembly(System.String,System.Version,System.String)">
            <summary>Adds an AssemblyResolve handler to redirect all attempts to load a specific assembly name to the specified version.</summary>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Obtém o valor de uma propriedade ou de uma propriedade aninhada.
            
            Caso encontre algum null no meio do caminho retorna a referência do nulo e não da erro
            </summary>
            <param name="instance"></param>
            <param name="propertyOrPath">O nome da propriedade("CodigoEmpresaCliente") ou o caminho a procurar("Cliente.Empresa.Codigo") o item</param>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.GetPropertyInfo(System.Type,System.String)">
            <param name="propertyOrPath">O nome da propriedade("CodigoEmpresaCliente") ou o caminho a procurar("Cliente.Empresa.Codigo") o item</param>
        </member>
        <member name="M:System.StringExtensions.Substring(System.String,System.String,System.String,System.Int32)">
            <summary>
            Retrieves a string betwen the specified separators
            </summary>
            <param name="str"></param>
            <param name="firstSeparator"></param>
            <param name="lastSeparator"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
    </members>
</doc>
