<?xml version="1.0"?>
<doc>
<assembly>
<name>
GdPicture.NET
</name>
</assembly>
<members>
<member name="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Creates an Anchor Template from a GdPicture image.
 
 Anchoring mechanism (or template recognition) can help to align area to be processed by filters, OMR,
 OCR or barcode recognition. For example, if several documents are scanned of the same form, and the
 scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
 specify the orientation of each document and the translation made to each document from the one where
 the user selected their Areas (surrounding rectangles).
 
 Note: To maximize detection speed and accuracy, the Anchor region must contain less than 50%
 of white pixels and must have as less white margins as possible.
 </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="PosLeft">The left position, in pixel (0-based), of the rectangle surrounding the
                       template.</param>
	<param name="PosTop">The top position, in pixel (0-based), of the rectangle surrounding the
                      template.</param>
	<param name="Width">The width, in pixel, of the rectangle surrounding the template.</param>
	<param name="Height">The height, in pixel, of the rectangle surrounding the template.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.FindAnchor(System.Int32,System.IntPtr,GdPicture.OMRMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.DeleteAnchorTemplate(System.IntPtr)"/>
	<returns>
 An Anchor Template Identifier to be used with the FindAnchor and the DeleteAnchorTemplate method.
 </returns>
	<example>
 Creating an Anchor Template
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Template As IntPtr
 
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
     Template = oGdPictureImaging.CreateAnchorTemplate(ImageID, 20, 25, 35, 50)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DeleteAnchorTemplate(System.IntPtr)">
	<summary>
 Releases from the memory an Anchor Template previously created by the CreateAnchorTemplate
 function.
 </summary>
	<param name="AnchorTemplateID">The Anchor template identifier.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FindAnchor(System.Int32,System.IntPtr,GdPicture.OMRMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)"/>
	<example>
 Creating and deleting an Anchor Template
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Template As IntPtr
 
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
     Template = oGdPictureImaging.CreateAnchorTemplate(ImageID, 20, 25, 35, 50)
     oGdPictureImaging.DeleteAnchorTemplate(Template)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FindAnchor(System.Int32,System.IntPtr,GdPicture.OMRMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
	<summary>
  Tries to determine the position of a specific template on a region of interest of a GdPicture image.
  
  The sample application "OMR - Anchor" demonstrates clearly the usage of the Anchor Mechanism.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="AnchorTemplateID">An Anchor Template Identifier returned by the CreateAnchorTemplate
                                 function.</param>
	<param name="Mode">A member of the OMRMode enumeration. FavorSpeed is suggested since
                     there is almost no accuracy difference between FavorSpeed and
                     FavorQuality.</param>
	<param name="SearchLeft">The left position, in pixel (0-based), of the area to search the
                           anchor template.</param>
	<param name="SearchTop">The top position, in pixel (0-based), of the area to search the
                          anchor template.</param>
	<param name="SearchWidth">The width, in pixel, of the area to search the anchor template.</param>
	<param name="SearchHeight">The height, in pixel, of the area to search the anchor template.</param>
	<param name="PosLeft">Output parameter. Returns the left position, in pixel (0-based), of
                        the detected anchor template.</param>
	<param name="PosTop">Output parameter. Returns the top position, in pixel (0-based), of
                       the detected anchor template.</param>
	<param name="PosWidth">Output parameter. Returns the width, in pixel, of the detected
                         anchor template.</param>
	<param name="PosHeight">Output parameter. Returns the height, in pixel, of the detected
                          anchor template.</param>
	<param name="Accuracy">Output parameter. Accuracy in percentage [0 - 100].</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Finding anchor in a document
  
  <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim MainForm As Integer
      Dim ImageID As Integer
      Dim Template As IntPtr
      Dim NewLeft As Integer
      Dim NewTop As Integer
      Dim NewWidth As Integer
      Dim NewHeight As Integer
      Dim Accuracy As Double
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      MainForm = oGdPictureImaging.CreateGdPictureImageFromFile("")
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
  
      Template = oGdPictureImaging.CreateAnchorTemplate(MainForm, 20, 25, 35, 50)
      oGdPictureImaging.FindAnchor(ImageID, Template, OMRMode.FavorSpeed, 10, 15, 70, 100, NewLeft, NewTop, NewWidth, NewHeight, Accuracy)
      oGdPictureImaging.DeleteAnchorTemplate(Template)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OMRDetectMarks(System.Int32,System.Drawing.Rectangle[],System.Int32)">
	<summary>
  Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not. This function is
  mainly used for Square and Perfectly Circular Fields. An OMR field can be a checkbox, a fill-in-area
  checkbox, areas on a multiple choice examination form, or any area where highlighting is required to
  indicate a certain choice.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
                      of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
                      rectangle surrounding a single OMR field. For example, if 10 Rectangles
                      exist in Areas, there will be 10 OMR Fields to be investigated whether they
                      were checked (filled) or not.</param>
	<param name="AreasCount">Number of Rectangles sent to the function. Basically, the length of
                           Areas().</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  The function returns an Array of integers.
  
  If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
  the field was filled.
  
  The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
  Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
  rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
  array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
  </returns>
	<remarks>
  All Rectangles sent to the function via array Areas can be of any size or location, as long as they:
  
  1. Surround the OMR Field completely.
  
  2. Do not intersect with borders of OMR field.
  
  3. Do not intersect with other objects in the document.
  
  Closer, more accurate selection of those rectangles will yield faster and more accurate results.
  
  
  
  If many documents are scanned of the same form, and the scanning orientation or quality is not
  guaranteed, the GdPicture Anchoring System can be used to specify the orientation of each document
  and the translation made to each document from the one where the user selected their Areas
  (surrounding rectangles). Then you can manually change the rectangle arrays to each document via the
  data provided.
  To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
  </remarks>
	<example>
  Applying OMR with sensitivity and obtaining results of two OMR fields and then displays the results
  in consecutive MessageBox
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Result(2) As Integer
      Dim Rec(2) As Rectangle
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      Rec(0) = New Rectangle(997, 242, 38, 33)
      Rec(1) = New Rectangle(762, 271, 53, 42)
  
  
      Result = oGdPictureImaging.OMRDetectMarks(ImageID, Rec, 2, true)
  
      MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OMRDetectMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Boolean)">
	<summary>
  Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not. This function is
  mainly used for Square and Perfectly Circular Fields. An OMR field can be a checkbox, a fill-in-area
  checkbox, areas on a multiple choice examination form, or any area where highlighting is required to
  indicate a certain choice.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
                      of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
                      rectangle surrounding a single OMR field. For example, if 10 Rectangles
                      exist in Areas, there will be 10 OMR Fields to be investigated whether they
                      were checked (filled) or not.</param>
	<param name="AreasCount">Number of Rectangles sent to the function. Basically, the length of
                           Areas().</param>
	<param name="HasCharacter">Whether the OMR field contains a character inside it or not.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  The function returns an Array of integers.
  
  If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
  the field was filled.
  
  The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
  Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
  rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
  array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
  </returns>
	<remarks>
  All Rectangles sent to the function via array Areas can be of any size or location, as long as they:
  
  1. Surround the OMR Field completely.
  
  2. Do not intersect with borders of OMR field.
  
  3. Do not intersect with other objects in the document.
  
  Closer, more accurate selection of those rectangles will yield faster and more accurate results.
  
  
  
  If many documents are scanned of the same form, and the scanning orientation or quality is not
  guaranteed, the GdPicture Anchoring System can be used to specify the orientation of each document
  and the translation made to each document from the one where the user selected their Areas
  (surrounding rectangles). Then you can manually change the rectangle arrays to each document via the
  data provided.
  To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
  </remarks>
	<example>
  Applying OMR with sensitivity and obtaining results of two OMR fields and then displays the results
  in consecutive MessageBox
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Result(2) As Integer
      Dim Rec(2) As Rectangle
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      Rec(0) = New Rectangle(997, 242, 38, 33)
      Rec(1) = New Rectangle(762, 271, 53, 42)
  
  
      Result = oGdPictureImaging.OMRDetectMarks(ImageID, Rec, 2, true)
  
      MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OMRDetectMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Double,System.Int32[]@)">
	<summary>
  Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not, with Sensitivity
  Control and Confidence Level returned. This function is mainly used for Square and Perfectly Circular
  Fields. An OMR field can be a checkbox, a fill-in-area checkbox, areas on a multiple choice
  examination form, or any area where highlighting is required to indicate a certain choice.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
                      of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
                      rectangle surrounding a single OMR field. For example, if 10 Rectangles
                      exist in Areas, there will be 10 OMR Fields to be investigated whether
                      they were checked (filled) or not.</param>
	<param name="AreasCount">Number of Rectangles sent to the function. Basically, the length of
                           Areas().</param>
	<param name="Sensitivity">How sensitive the function is to degree of filling of the OMR field in
                            respect to the size of the field itself. Higher values will result in more
                            tolerant results where semi filling of the field would yield positive
                            results. Lower values will result in less tolerant results where maximum
                            filling of the field only would yield positive results Sensitivity greatly
                            affects the confidence value returned. Range from 0.0 to 1.0. If different
                            values are entered, they will automatically be limited to this range.
                            Default Value is 0.5</param>
	<param name="Confidence">Reference to a 1-Dimensional array of Integers. Must be initialized and
                           sent to function. After the function is called, the array elements would
                           correspond to the confidence of the result returned by the function. For
                           Examples, if Confidence[0] = 40, then the first OMR field result returned
                           is 40% accurate. It is important to mark that Confidence is greatly
                           affected by "Sensitivity". Confidence value is a mixture of how much the
                           sensitivity standard was accomplished, how much was it exceeded or unmet.
                           It also details the respect of the filling to the size of the border and
                           the regularity of the border.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  The function returns an Array of integers.
  
  If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
  the field was filled.
  
  The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
  Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
  rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
  array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
  </returns>
	<remarks>
  All Rectangles sent to the function via array Areas can be of any size or location, as long as they:
  
  1. Surround the OMR Field completely.
  
  2. Do not intersect with borders of OMR field.
  
  3. Do not intersect with other objects in the document.
  
  Closer, more accurate selection of those rectangles will yield faster and more accurate results.
  
  "Sensitivity" affects the "Confidence" returned. Low Sensitivity would return high results of
  Confidence for empty fields, but low Confidence results for semi filled fields. High Sensitivity
  would return low results of Confidence for empty fields, but High Confidence results for semi filled
  fields. It is important to note that "Confidence" is the degree of confidence that sensitivity rules
  are met, and not the actual filling or not filling of the field. If sensitivity values do not
  correspond properly to the filling, the confidence would spell to the sensitivity value more than the
  actual filling or not filling of the field. If many documents are scanned of the same form, and the
  scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
  specify the orientation of each document and the translation made to each document from the one where
  the user selected their Areas (surrounding rectangles). Then you can manually change the rectangle
  arrays to each document via the data provided.
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
  </remarks>
	<example>
  Applying OMR with sensitivity and obtaining results of two OMR fields and their confidence and then
  displays the results and their confidence in consecutive MessageBox
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Result(2) As Integer
      Dim Confidence(2) As Integer
      Dim Rec(2) As Rectangle
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      Rec(0) = New Rectangle(997, 242, 38, 33)
      Rec(1) = New Rectangle(762, 271, 53, 42)
  
  
      Result = oGdPictureImaging.OMRDetectMarks(ImageID, Rec, 2, 0.5, Confidence, true)
  
      MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Confidence(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Confidence(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OMRDetectMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Double,System.Int32[]@,System.Boolean)">
	<summary>
  Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not, with Sensitivity
  Control and Confidence Level returned. This function is mainly used for Square and Perfectly Circular
  Fields. An OMR field can be a checkbox, a fill-in-area checkbox, areas on a multiple choice
  examination form, or any area where highlighting is required to indicate a certain choice.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
                      of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
                      rectangle surrounding a single OMR field. For example, if 10 Rectangles
                      exist in Areas, there will be 10 OMR Fields to be investigated whether
                      they were checked (filled) or not.</param>
	<param name="AreasCount">Number of Rectangles sent to the function. Basically, the length of
                           Areas().</param>
	<param name="Sensitivity">How sensitive the function is to degree of filling of the OMR field in
                            respect to the size of the field itself. Higher values will result in more
                            tolerant results where semi filling of the field would yield positive
                            results. Lower values will result in less tolerant results where maximum
                            filling of the field only would yield positive results Sensitivity greatly
                            affects the confidence value returned. Range from 0.0 to 1.0. If different
                            values are entered, they will automatically be limited to this range.
                            Default Value is 0.5</param>
	<param name="Confidence">Reference to a 1-Dimensional array of Integers. Must be initialized and
                           sent to function. After the function is called, the array elements would
                           correspond to the confidence of the result returned by the function. For
                           Examples, if Confidence[0] = 40, then the first OMR field result returned
                           is 40% accurate. It is important to mark that Confidence is greatly
                           affected by "Sensitivity". Confidence value is a mixture of how much the
                           sensitivity standard was accomplished, how much was it exceeded or unmet.
                           It also details the respect of the filling to the size of the border and
                           the regularity of the border.</param>
	<param name="HasCharacter">Whether the OMR field contains a character inside it or not.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  The function returns an Array of integers.
  
  If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
  the field was filled.
  
  The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
  Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
  rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
  array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
  </returns>
	<remarks>
  All Rectangles sent to the function via array Areas can be of any size or location, as long as they:
  
  1. Surround the OMR Field completely.
  
  2. Do not intersect with borders of OMR field.
  
  3. Do not intersect with other objects in the document.
  
  Closer, more accurate selection of those rectangles will yield faster and more accurate results.
  
  "Sensitivity" affects the "Confidence" returned. Low Sensitivity would return high results of
  Confidence for empty fields, but low Confidence results for semi filled fields. High Sensitivity
  would return low results of Confidence for empty fields, but High Confidence results for semi filled
  fields. It is important to note that "Confidence" is the degree of confidence that sensitivity rules
  are met, and not the actual filling or not filling of the field. If sensitivity values do not
  correspond properly to the filling, the confidence would spell to the sensitivity value more than the
  actual filling or not filling of the field. If many documents are scanned of the same form, and the
  scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
  specify the orientation of each document and the translation made to each document from the one where
  the user selected their Areas (surrounding rectangles). Then you can manually change the rectangle
  arrays to each document via the data provided.
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
  </remarks>
	<example>
  Applying OMR with sensitivity and obtaining results of two OMR fields and their confidence and then
  displays the results and their confidence in consecutive MessageBox
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Result(2) As Integer
      Dim Confidence(2) As Integer
      Dim Rec(2) As Rectangle
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      Rec(0) = New Rectangle(997, 242, 38, 33)
      Rec(1) = New Rectangle(762, 271, 53, 42)
  
  
      Result = oGdPictureImaging.OMRDetectMarks(ImageID, Rec, 2, 0.5, Confidence, true)
  
      MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Confidence(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Confidence(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OMRDetectOvalMarks(System.Int32,System.Drawing.Rectangle[],System.Int32)">
	<summary>
  Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not. This function is
  mainly used for Oval shaped Fields. An OMR field can be a checkbox, a fill-in-area checkbox, areas on
  a multiple choice examination form, or any area where highlighting is required to indicate a certain
  choice.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
                      of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
                      rectangle surrounding a single OMR field. For example, if 10 Rectangles
                      exist in Areas, there will be 10 OMR Fields to be investigated whether they
                      were checked (filled) or not.</param>
	<param name="AreasCount">Number of Rectangles sent to the function. Basically, the length of
                           Areas().</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  The function returns an Array of integers.
  
  If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
  the field was filled.
  
  The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
  Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
  rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
  array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
  </returns>
	<remarks>
  All Rectangles sent to the function via array Areas can be of any size or location, as long as they:
  
  1. Surround the OMR Field completely.
  
  2. Do not intersect with borders of OMR field.
  
  3. Do not intersect with other objects in the document.
  
  Closer, more accurate selection of those rectangles will yield faster and more accurate results.
  
  
  
  If many documents are scanned of the same form, and the scanning orientation or quality is not
  guaranteed, the GdPicture Anchoring System can be used to specify the orientation of each document
  and the translation made to each document from the one where the user selected their Areas
  (surrounding rectangles). Then you can manually change the rectangle arrays to each document via the
  data provided.
 
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
  </remarks>
	<example>
  Applying OMR with sensitivity and obtaining results of two Oval OMR fields and then displays the
  results in consecutive MessageBox
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Result(2) As Integer
      Dim Rec(2) As Rectangle
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      Rec(0) = New Rectangle(997, 242, 38, 33)
      Rec(1) = New Rectangle(762, 271, 53, 42)
  
  
      Result = oGdPictureImaging.OMRDetectOvalMarks(ImageID, Rec, 2, true)
  
      MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OMRDetectOvalMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Boolean)">
	<summary>
  Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not. This function is
  mainly used for Oval shaped Fields. An OMR field can be a checkbox, a fill-in-area checkbox, areas on
  a multiple choice examination form, or any area where highlighting is required to indicate a certain
  choice.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
                      of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
                      rectangle surrounding a single OMR field. For example, if 10 Rectangles
                      exist in Areas, there will be 10 OMR Fields to be investigated whether they
                      were checked (filled) or not.</param>
	<param name="AreasCount">Number of Rectangles sent to the function. Basically, the length of
                           Areas().</param>
	<param name="HasCharacter">Whether the OMR field contains a character inside it or not.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  The function returns an Array of integers.
  
  If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
  the field was filled.
  
  The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
  Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
  rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
  array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
  </returns>
	<remarks>
  All Rectangles sent to the function via array Areas can be of any size or location, as long as they:
  
  1. Surround the OMR Field completely.
  
  2. Do not intersect with borders of OMR field.
  
  3. Do not intersect with other objects in the document.
  
  Closer, more accurate selection of those rectangles will yield faster and more accurate results.
  
  
  
  If many documents are scanned of the same form, and the scanning orientation or quality is not
  guaranteed, the GdPicture Anchoring System can be used to specify the orientation of each document
  and the translation made to each document from the one where the user selected their Areas
  (surrounding rectangles). Then you can manually change the rectangle arrays to each document via the
  data provided.
 
 To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
  </remarks>
	<example>
  Applying OMR with sensitivity and obtaining results of two Oval OMR fields and then displays the
  results in consecutive MessageBox
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Result(2) As Integer
      Dim Rec(2) As Rectangle
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      Rec(0) = New Rectangle(997, 242, 38, 33)
      Rec(1) = New Rectangle(762, 271, 53, 42)
  
  
      Result = oGdPictureImaging.OMRDetectOvalMarks(ImageID, Rec, 2, true)
  
      MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OMRDetectOvalMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Double,System.Int32[]@)">
	<summary>
  Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not, with Sensitivity
  Control and Confidence Level returned. This function is mainly used for Oval shaped Fields. An OMR
  field can be a checkbox, a fill-in-area checkbox, areas on a multiple choice examination form, or any
  area where highlighting is required to indicate a certain choice.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
                      of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
                      rectangle surrounding a single OMR field. For example, if 10 Rectangles
                      exist in Areas, there will be 10 OMR Fields to be investigated whether
                      they were checked (filled) or not.</param>
	<param name="AreasCount">Number of Rectangles sent to the function. Basically, the length of
                           Areas().</param>
	<param name="Sensitivity">How sensitive the function is to degree of filling of the OMR field in
                            respect to the size of the field itself. Higher values will result in more
                            tolerant results where semi filling of the field would yield positive
                            results. Lower values will result in less tolerant results where maximum
                            filling of the field only would yield positive results Sensitivity greatly
                            affects the confidence value returned. Range from 0.0 to 1.0. If different
                            values are entered, they will automatically be limited to this range.
                            Default Value is 0.5</param>
	<param name="Confidence">Reference to a 1-Dimensional array of Integers. Must be initialized and
                           sent to function. After the function is called, the array elements would
                           correspond to the confidence of the result returned by the function. For
                           Examples, if Confidence[0] = 40, then the first OMR field result returned
                           is 40% accurate. It is important to mark that Confidence is greatly
                           affected by "Sensitivity". Confidence value is a mixture of how much the
                           sensitivity standard was accomplished, how much was it exceeded or unmet.
                           It also details the respect of the filling to the size of the border and
                           the regularity of the border.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  The function returns an Array of integers.
  
  If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
  the field was filled.
  
  The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
  Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
  rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
  array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
  </returns>
	<remarks>
  All Rectangles sent to the function via array Areas can be of any size or location, as long as they:
  
  1. Surround the OMR Field completely.
  
  2. Do not intersect with borders of OMR field.
  
  3. Do not intersect with other objects in the document.
  
  Closer, more accurate selection of those rectangles will yield faster and more accurate results.
  
  "Sensitivity" affects the "Confidence" returned. Low Sensitivity would return high results of
  Confidence for empty fields, but low Confidence results for semi filled fields. High Sensitivity
  would return low results of Confidence for empty fields, but High Confidence results for semi filled
  fields. It is important to note that "Confidence" is the degree of confidence that sensitivity rules
  are met, and not the actual filling or not filling of the field. If sensitivity values do not
  correspond properly to the filling, the confidence would spell to the sensitivity value more than the
  actual filling or not filling of the field. If many documents are scanned of the same form, and the
  scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
  specify the orientation of each document and the translation made to each document from the one where
  the user selected their Areas (surrounding rectangles). Then you can manually change the rectangle
  arrays to each document via the data provided.
  To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
  </remarks>
	<example>
  Applying OMR with sensitivity and obtaining results of two Oval OMR fields and their confidence and
  then displays the results and their confidence in consecutive MessageBox
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Result(2) As Integer
      Dim Confidence(2) As Integer
      Dim Rec(2) As Rectangle
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      Rec(0) = New Rectangle(997, 242, 38, 33)
      Rec(1) = New Rectangle(762, 271, 53, 42)
  
  
      Result = oGdPictureImaging.OMRDetectOvalMarks(ImageID, Rec, 2, 0.5, Confidence, true)
  
      MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Confidence(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Confidence(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OMRDetectOvalMarks(System.Int32,System.Drawing.Rectangle[],System.Int32,System.Double,System.Int32[]@,System.Boolean)">
	<summary>
  Returns whether a selected OMR (Optical Mark Recognition) field/s is filled or not, with Sensitivity
  Control and Confidence Level returned. This function is mainly used for Oval shaped Fields. An OMR
  field can be a checkbox, a fill-in-area checkbox, areas on a multiple choice examination form, or any
  area where highlighting is required to indicate a certain choice.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="Areas">Array of Rectangle. This parameter is used as a reference to the location
                      of the OMR Fields. Where each Rectangle in the Areas, corresponds to a
                      rectangle surrounding a single OMR field. For example, if 10 Rectangles
                      exist in Areas, there will be 10 OMR Fields to be investigated whether
                      they were checked (filled) or not.</param>
	<param name="AreasCount">Number of Rectangles sent to the function. Basically, the length of
                           Areas().</param>
	<param name="Sensitivity">How sensitive the function is to degree of filling of the OMR field in
                            respect to the size of the field itself. Higher values will result in more
                            tolerant results where semi filling of the field would yield positive
                            results. Lower values will result in less tolerant results where maximum
                            filling of the field only would yield positive results Sensitivity greatly
                            affects the confidence value returned. Range from 0.0 to 1.0. If different
                            values are entered, they will automatically be limited to this range.
                            Default Value is 0.5</param>
	<param name="Confidence">Reference to a 1-Dimensional array of Integers. Must be initialized and
                           sent to function. After the function is called, the array elements would
                           correspond to the confidence of the result returned by the function. For
                           Examples, if Confidence[0] = 40, then the first OMR field result returned
                           is 40% accurate. It is important to mark that Confidence is greatly
                           affected by "Sensitivity". Confidence value is a mixture of how much the
                           sensitivity standard was accomplished, how much was it exceeded or unmet.
                           It also details the respect of the filling to the size of the border and
                           the regularity of the border.</param>
	<param name="HasCharacter">Whether the OMR field contains a character inside it or not.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateAnchorTemplate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  The function returns an Array of integers.
  
  If the value of an element is 0, then the field was not filled. If the value of an element is 1, then
  the field was filled.
  
  The Elements of the returned array will correspond to the Elements of the Rectangles Array Areas().
  Where if the first element of the returned array[0] is 0, then the OMR field surrounded by the
  rectangle in the element of Areas[0] was not filled. Similarly, if the first element of the returned
  array[5] is 1, then the OMR field surrounded by the rectangle in the element of Areas[5] was filled.
  </returns>
	<remarks>
  All Rectangles sent to the function via array Areas can be of any size or location, as long as they:
  
  1. Surround the OMR Field completely.
  
  2. Do not intersect with borders of OMR field.
  
  3. Do not intersect with other objects in the document.
  
  Closer, more accurate selection of those rectangles will yield faster and more accurate results.
  
  "Sensitivity" affects the "Confidence" returned. Low Sensitivity would return high results of
  Confidence for empty fields, but low Confidence results for semi filled fields. High Sensitivity
  would return low results of Confidence for empty fields, but High Confidence results for semi filled
  fields. It is important to note that "Confidence" is the degree of confidence that sensitivity rules
  are met, and not the actual filling or not filling of the field. If sensitivity values do not
  correspond properly to the filling, the confidence would spell to the sensitivity value more than the
  actual filling or not filling of the field. If many documents are scanned of the same form, and the
  scanning orientation or quality is not guaranteed, the GdPicture Anchoring System can be used to
  specify the orientation of each document and the translation made to each document from the one where
  the user selected their Areas (surrounding rectangles). Then you can manually change the rectangle
  arrays to each document via the data provided.
  To obtain best and most accurate results, images have to be of good quality, at least 200 dpi is recommended.
  </remarks>
	<example>
  Applying OMR with sensitivity and obtaining results of two Oval OMR fields and their confidence and
  then displays the results and their confidence in consecutive MessageBox
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Result(2) As Integer
      Dim Confidence(2) As Integer
      Dim Rec(2) As Rectangle
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      Rec(0) = New Rectangle(997, 242, 38, 33)
      Rec(1) = New Rectangle(762, 271, 53, 42)
  
  
      Result = oGdPictureImaging.OMRDetectOvalMarks(ImageID, Rec, 2, 0.5, Confidence, true)
  
      MessageBox.Show(Result(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Confidence(0).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Result(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      MessageBox.Show(Confidence(1).ToString(), "", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetAlphaChannel(System.Int32,System.Byte[]@,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Stores into a byte array the Alpha channel values of a GdPicture image or a portion of it.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Alpha">Output parameter. The Alpha channel data. </param>
	<param name="SrcLeft">The left source pixel of the area. </param>
	<param name="SrcTop">The top source pixel of the area. </param>
	<param name="Width">The width of the area in pixel. </param>
	<param name="Height">The height of the area in pixel. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.SetAlphaChannel(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Using GetAlphaChannel to obtain the alphachannel on a rectangle with width of 20 pixels and height of
 20 pixels located at the left top side of the image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim arPixels(400) As Byte
     Dim AreaWidth As Integer
     Dim AreaHeight As Integer
 
     AreaHeight = 20
     AreaWidth = 20
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.GetAlphaChannel(ImageID, arPixels, 0, 0, AreaWidth, AreaHeight)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetAlphaChannel(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Sets the Alpha channel of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Alpha">The Alpha channel data. </param>
	<param name="SrcLeft">The left source pixel of the area. </param>
	<param name="SrcTop">The top source pixel of the area. </param>
	<param name="Width">The width of the area in pixel. </param>
	<param name="Height">The height of the area in pixel. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.GetAlphaChannel(System.Int32,System.Byte[]@,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Applying a vertical transparent gradient to an image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim Alpha() As Byte
      Dim PixelCount As Integer
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ImageHeight As Integer
      Dim ImageWidth As Integer
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      ImageHeight = oGdPictureImaging.GetHeight(ImageID)
      ImageWidth = oGdPictureImaging.GetWidth(ImageID)
      PixelCount = ImageHeight * ImageWidth
  
      ReDim Alpha(PixelCount)
  
      For i As Integer = 0 To PixelCount - 1
          Alpha(i) = CByte(255 / PixelCount * (i + 1))
      Next
      oGdPictureImaging.SetAlphaChannel(ImageID, Alpha, 0, 0, ImageWidth, ImageHeight)
  
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetTransparencyColor(System.Int32,System.Drawing.Color)">
	<summary>
 Sets a color as transparent in a GdPicture image or in an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TransparentColor">A Color Object. You can build a Color Object using the ARGB()
                                function. Color to set as transparent. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Making a color in the image as transparent using SetTransparencyColor.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SetTransparency(ImageID,  oGdPictureImaging.ARGB(255, 0, 255, 0))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetTransparencyColor(System.Int32,System.Drawing.Color,System.Single)">
	<summary>
 Sets a color as transparent in a GdPicture image or in area of a GdPicture image defined by SetROI()
 function.
 
 This function takes a percentage threshold parameter regarding the color to set as transparent.
 
 Ie: A threshold value of 90 means that all the color value which are within 90% of the color value
 parameter will be considered.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TransparentColor">A Color Object. You can build a Color Object using the ARGB()
                                function. Color to set as transparent. </param>
	<param name="Threshold">percentage threshold between 0 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Making all the colors within 90% of the color green in the image as transparent using SetTransparencyColor.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SetTransparency(ImageID,  oGdPictureImaging.ARGB(255, 0, 255, 0), 90.0)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetTransparency(System.Int32,System.Int32)">
	<summary>
 Adds transparency to a GdPicture image or into an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TransparencyValue">Value between -255 and 255. 255 means full opacity and -255 means
                                 full transparency. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Changing the transparency of the image using SetTransparency.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim TransparencyValue As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     TransparencyValue = -25
 
     oGdPictureImaging.SetTransparency(ImageID, TransparencyValue)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetBCSG(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Adjust in one shot, the Brightness, Contrast, Saturation &amp; Gamma in a
 GdPicture image or in an area of a GdPicture image defined by SetROI() function.
 
 This function is faster than successive calls to any of SetBrightness, SetContrast, SetSaturation
 &amp; SetGammaCorrection functions.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Brightness">Brightness adjustment between -100 and 100. </param>
	<param name="Contrast">Contrast adjustment between -100 and 100. </param>
	<param name="Saturation">Saturation adjustment between -100 and 100. </param>
	<param name="Gamma">Gamma adjustment between -100 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetBrightness(System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetContrast(System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetSaturation(System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetGammaCorrection(System.Int32,System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.SetBrightness(System.Int32,System.Int32)">
	<summary>
 Adjust the Brightness in a GdPicture image or in an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Brightness">Brightness adjustment between -100 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetBCSG(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<example>
 Increase &amp; Decrease brightness
 <code lang="vb.net">
 'To increase brightness of 10%
 m_Stat = oGdPictureImaging.SetBrigtness(ImageID, 10)
 'To decrease brightness of 10%
 m_Stat = oGdPictureImaging.SetBrigtness(ImageID, -10)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetContrast(System.Int32,System.Int32)">
	<summary>
 Adjust the Contrast in a GdPicture image or in the area defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Contrast">Contrast adjustment between -100 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Increase &amp; Decrease contrast
 <code lang="vb.net">
 'To increase contrast of 10%
 m_Stat = oGdPictureImaging.SetContrast(ImageID, 10)
 'To decrease contrast of 10%
 m_Stat = oGdPictureImaging.SetContrast(ImageID, -10)
 </code>
	</example>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetBCSG(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.SetGammaCorrection(System.Int32,System.Int32)">
	<summary>
 Performs Gamma Correction in a GdPicture image or in an area of a GdPicture image
 defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Gamma">Gamma adjustment between -100 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetBCSG(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<example>
 Increase &amp; Decrease gamma
 <code lang="vb.net">
 'To increase gamma of 10%
 m_Stat = oGdPictureImaging.SetGammaCorrection(ImageID, 10)
 'To decrease gamma of 10%
 m_Stat = oGdPictureImaging.SetGammaCorrection(ImageID, -10)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetSaturation(System.Int32,System.Int32)">
	<summary>
 Adjust the Saturation in a GdPicture image or in an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Saturation">Saturation adjustment between -100 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetBCSG(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<example>
 Increase &amp; Decrease saturation
 <code lang="vb.net">
 'To increase saturation of 10%
 m_Stat = oGdPictureImaging.SetSaturation(ImageID, 10)
 'To decrease saturation of 10%
 m_Stat = oGdPictureImaging.SetSaturation(ImageID, -10)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CopyRegionToClipboard(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Copies a region of a GdPicture image into the Clipboard.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="SrcLeft">The left source pixel. </param>
	<param name="SrcTop">The top source pixel. </param>
	<param name="Width">Width of the region in pixel. </param>
	<param name="Height">Height of the region in pixel. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Copying a region of the image to the Clipboard
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CopyRegionToClipboard(ImageID, 0, 0, 200, 250)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CopyToClipboard(System.Int32)">
	<summary>
 Copies a GdPicture image into the Clipboard.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Copying an image to the Clipboard
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CopyToClipboard(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DeleteClipboardData">
	<summary>
 Clears the Clipboard.
 </summary>
	<example>
 Copying an image to the Clipboard and then deleting the data in the clipboard
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CopyToClipboard(ImageID)
     oGdPictureImaging.DeleteClipboardData()
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AdjustRGB(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Increase or decrease the color components of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="RedAdjust">Value to add to the red component [-255 ; 255]. </param>
	<param name="GreenAdjust">Value to add to the green component [-255 ; 255]. </param>
	<param name="BlueAdjust">Value to add to the blue component [-255 ; 255]. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Change the values of the R,G,B color componants of the image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.AdjustRGB(ImageID, 25, 100, 76)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SwapColor(System.Int32,System.Drawing.Color,System.Drawing.Color)">
	<summary>
  Replaces one color by another on a GdPicture image or into an area of a GdPicture image defined by
  SetROI() function.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ColorSrc">A Color Object. You can build a Color Object using the ARGB() function. Color
                         to replace. </param>
	<param name="ColorDst">A Color Object. You can build a Color Object using the ARGB() function. Color
                         of replacement. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Swaping Red with Green
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGB(255,255,0,0),oGdPictureImaging.ARGB(255,0,255,0))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.tiff")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SwapColor(System.Int32,System.Int32,System.Int32,System.Single)">
	<summary>
 Replaces one color by another on a GdPicture image or into an area of a GdPicture image defined by
 SetROI() function.
 
 This function takes a percentage threshold parameter regarding the color to replace.
 
 Ie: A threshold value of 90 means that all the color values which are within 90% of the color value
 to replace will be considered.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ColorSrc">Color value. You can obtain a suitable value by using the ARGBI() function.
                        Color to replace. </param>
	<param name="ColorDst">Color value. You can obtain a suitable value by using the ARGBI() function.
                        Color of replacement. </param>
	<param name="Threshold">percentage threshold between 0 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Swaping a color with anbother and all the colors that are within 90% of the specified color to change
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGBI(255,255,0,0),oGdPictureImaging.ARGBI(255,0,255,0), 90.0)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.tiff")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SwapColor(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Single)">
	<summary>
 Replaces one color by another on a GdPicture image or into an area of a GdPicture image defined by
 SetROI() function.
 
 This function takes a percentage threshold parameter regarding the color to replace.
 
 Ie: A threshold value of 90 means that all the color values which are within 90% of the color value
 to replace will be considered.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ColorSrc">A Color Object. You can build a Color Object using the ARGB() function.
                        Color to replace. </param>
	<param name="ColorDst">A Color Object. You can build a Color Object using the ARGB() function.
                        Color of replacement. </param>
	<param name="Threshold">percentage threshold between 0 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Swaping a color with anbother and all the colors that are within 90% of the specified color to change
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGB(255,255,0,0),oGdPictureImaging.ARGB(255,0,255,0), 90.0)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.tiff")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.KeepRedComponent(System.Int32)">
	<summary>
 Keeps only the RED color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using KeepRedComponent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.KeepRedComponent(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.KeepGreenComponent(System.Int32)">
	<summary>
 Keeps only the GREEN color component of a GdPicture image or of an area of a GdPicture image defined
 by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using KeepGreenComponent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.KeepGreenComponent(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.KeepBlueComponent(System.Int32)">
	<summary>
 Keeps only the BLUE color component of a GdPicture image or of an area of a GdPicture image defined
 by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using KeepBlueComponent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.KeepBlueComponent(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.RemoveRedComponent(System.Int32)">
	<summary>
 Removes the RED color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using RemoveRedComponent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.RemoveRedComponent(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.RemoveGreenComponent(System.Int32)">
	<summary>
 Removes the GREEN color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using RemoveGreenComponent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.RemoveGreenComponent(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.RemoveBlueComponent(System.Int32)">
	<summary>
 Removes the BLUE color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using RemoveBlueComponent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.RemoveBlueComponent(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ScaleBlueComponent(System.Int32,System.Single)">
	<summary>
 Scales the BLUE color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Factor">Scale factor. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using ScaleBlueComponent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ScaleBlueComponent(ImageID, 0.11)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ScaleGreenComponent(System.Int32,System.Single)">
	<summary>
 Scales the GREEN color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Factor">Scale factor. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using ScaleGreenComponent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ScaleGreenComponent(ImageID, 0.59)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ScaleRedComponent(System.Int32,System.Single)">
	<summary>
 Scales the BLUE color component of a GdPicture image or of an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Factor">Scale factor. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using ScaleRedComponent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ScaleRedComponent(ImageID, 0.3)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SwapColorsRGBtoBRG(System.Int32)">
	<summary>
 Swaps the color components (RGB - &gt; BRG) of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using SwapColorsRGBtoBRG
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColorsRGBtoBRG(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SwapColorsRGBtoGBR(System.Int32)">
	<summary>
 Swaps the color components (RGB - &gt; GBR) of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using SwapColorsRGBtoGBR
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColorsRGBtoGBR(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SwapColorsRGBtoRBG(System.Int32)">
	<summary>
 Swaps the color components (RGB - &gt; RBG) of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using SwapColorsRGBtoRBG
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColorsRGBtoRBG(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SwapColorsRGBtoBGR(System.Int32)">
	<summary>
 Swaps the color components (RGB - &gt; BGR) of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using SwapColorsRGBtoBGR
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColorsRGBtoBGR(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SwapColorsRGBtoGRB(System.Int32)">
	<summary>
 Swaps the color components (RGB - &gt; GRB) of a GdPicture image or of an area of a GdPicture image
 defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Using SwapColorsRGBtoGRB
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColorsRGBtoGRB(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PaletteConvertToHalftone(System.Int32)">
	<summary>
  Converts the color palette of a GdPicture image to Halftone palette.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting the image's palette to halftone
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.PaletteConvertToHalftone(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.tiff")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PaletteSetTransparentColor(System.Int32,System.Drawing.Color)">
	<summary>
  Sets a color of a palette as transparent.
  
  If the specified color is not present into the palette this will be added if the number of entries
  are lower than 256.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TransparentColor">A Color Object. You can build a Color Object using the ARGB()
                                 function. Color to set as transparent. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Setting a color in the palette as transparent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim TransparentColor As Color
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     TransparentColor =  oGdPictureImaging.ARGB(255,255,0,0)
 
     oGdPictureImaging.PaletteSetTransparentColor(ImageID, TransparentColor)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PaletteGetTransparentColor(System.Int32)">
	<summary>
  Gets the transparency color for a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  Color. A Color Object. You can build a Color Object using the ARGB() function. The transparent color
  of the palette.
  </returns>
	<example>
 Retrieving the image's palette's transperncy color
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Transparency As Color
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Transparency = oGdPictureImaging.PaletteGetTransparentColor(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PaletteHasTransparentColor(System.Int32)">
	<summary>
  Asks if a GdPicture image has a color defined as transparent.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  True is a GdPicture image has a color defined as transparent else false.
  </returns>
	<example>
 Finding out whether an image's palette has a transparent color
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim HasTransparent As Boolean
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     HasTransparent = oGdPictureImaging.PaletteHasTransparentColor(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PaletteGet(System.Int32,System.Drawing.Color[]@,System.Int32@)">
	<summary>
 Gets into a 1D array the complete color palette of a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ColorEntries">Output parameter. Array of Color Objects. Color array which will contain
                            the complete color palette. </param>
	<param name="EntriesCount">Output parameter. Contains the number of colors contained in the
                            ColorEntries() array. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
 Retrieving the image's palette
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ColorEntries() As Color
     Dim EntriesCount As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.PaletteGet(ImageID, ColorEntries, EntriesCount)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PaletteGetType(System.Int32)">
	<summary>
  Gets the type of color palette used by a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  Type of palette. A member of the PaletteType enumeration.
  </returns>
	<example>
 Retrieving the image's palette's type
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Type As PaletteType
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Type = oGdPictureImaging.PaletteGetType(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PaletteGetColorsCount(System.Int32)">
	<summary>
  Returns the number of colors contained into the color palette of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  Number of Imaging.Colors.
  </returns>
	<example>
 Retrieving the image's palette's color count
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ColorCount As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     ColorCount = oGdPictureImaging.PaletteGet(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PaletteGetEntry(System.Int32,System.Int32)">
	<summary>
 Returns the color of a specific entry of the palette of a GdPicture image.
 </summary>
	<param name="Entry">Index of the color palette. Must be a value between 0 and
                     PaletteGetColorsCount() - 1 returned value. </param>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 Color Object. You can build a Color Object using the ARGB() function. Color of the selected entrie.
 </returns>
	<example>
 Retrieving the image's palette's fifth entry
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Entry As Color
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Entry = oGdPictureImaging.PaletteGetEntry(ImageID, 5)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PaletteSwapEntries(System.Int32,System.Int32,System.Int32)">
	<summary>
 Returns the color of a specific entry of the palette of a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Entrie1">Index of the color palette to swap with the second. Must be a value between 0
                       and PaletteGetColorsCount() - 1 returned value. </param>
	<param name="Entrie2">Index of the color palette to swap with the first. Must be a value between 0
                       and PaletteGetColorsCount() - 1 returned value. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
 Swaping entries 5 and 10 in the Color Palette of the image
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.PaletteSwapEntries(ImageID, 5, 10)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PaletteSet(System.Int32,System.Drawing.Color[])">
	<summary>
  Sets a new color palette to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ColorEntries">Output parameter. Array of Color Objects. Color entries of the
                             palette. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Setting the Palette of the Image
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Palette(15) As Color
     Dim i As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     For i = 0 To 14
     Palette(i) = Imaging1.ARGB(255, CByte((255) - i), 255, CByte(i))
     Next
     oGdPictureImaging.PaletteSet(ImageID, Palette)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ColorRGBtoCMY(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
  Converts RBG color from a set of red, green, and blue color components to CMY color into a set of
  Cyan, Magenta and Yellow components.
  </summary>
	<param name="Red">Input red component value [0 - 255]. </param>
	<param name="Green">Input green component value [0 - 255]. </param>
	<param name="Blue">Input blue component value [0 - 255]. </param>
	<param name="Cyan">Output parameter. Cyan component value [0 - 255]. </param>
	<param name="Magenta">Output parameter. Magenta component value [0 - 255]. </param>
	<param name="Yellow">Output parameter. Yellow component value [0 - 255].</param>
	<example>
  Using ColorRGBtoCMYK.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Cyan As Integer
      Dim Magenta As Integer
      Dim Yellow As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      oGdPictureImaging.ColorRGBtoCMY(255, 0, 128, 0, Cyan, Magenta, Yellow)
 
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ColorRGBtoCMYK(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
  Converts RBG color from a set of red, green, and blue color components to CMYK color into a set of
  Cyan, Magenta, Yellow and Black (Key) components.
  </summary>
	<param name="Red">Input red component value [0 - 255]. </param>
	<param name="Green">Input green component value [0 - 255]. </param>
	<param name="Blue">Input blue component value [0 - 255]. </param>
	<param name="Cyan">Output parameter. Cyan component value [0 - 255]. </param>
	<param name="Magenta">Output parameter. Magenta component value [0 - 255]. </param>
	<param name="Yellow">Output parameter. Yellow component value [0 - 255]. </param>
	<param name="Black">Output parameter. Black component (Key) value [0 - 255].</param>
	<example>
  Using ColorRGBtoCMYK.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Cyan As Integer
      Dim Magenta As Integer
      Dim Yellow As Integer
      Dim Black As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      oGdPictureImaging.ColorRGBtoCMYK(255, 0, 128, 0, Cyan, Magenta, Yellow, Black)
 
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ColorCMYKtoRGB(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
  Converts CMYK color from a set of Cyan, Magenta, Yellow and Black (Key) color components to RGB color
  into a set of red, green, and blue components.
  </summary>
	<param name="Cyan">Input Cyan component value [0 - 255]. </param>
	<param name="Magenta">Input Magenta component value [0 - 255]. </param>
	<param name="Yellow">Input Yellow component value [0 - 255]. </param>
	<param name="Black">Input Black component (Key) value [0 - 255]. </param>
	<param name="Red">Output parameter. Red component value [0 - 255]. </param>
	<param name="Green">Output parameter. Green component value [0 - 255]. </param>
	<param name="Blue">Output parameter. Blue component value [0 - 255].</param>
	<example>
  Using ColorCMYKtoRGB.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Red As Integer
      Dim Green As Integer
      Dim Blue As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.ColorCMYKtoRGB(255, 0, 128, 0, Red, Green, Blue)
      oGdPictureImaging.ClearImage(ImageID, oGdPictureImaging.ARGB(255, Red, Green, Blue))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ColorCMYtoRGB(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
  Converts CMY color from a set of Cyan, Magenta and Yellow color components to RGB color into a set of
  red, green, and blue components.
  </summary>
	<param name="Cyan">Input Cyan component value [0 - 255]. </param>
	<param name="Magenta">Input Magenta component value [0 - 255]. </param>
	<param name="Yellow">Input Yellow component value [0 - 255]. </param>
	<param name="Red">Output parameter. Red component value [0 - 255]. </param>
	<param name="Green">Output parameter. Green component value [0 - 255]. </param>
	<param name="Blue">Output parameter. Blue component value [0 - 255].</param>
	<example>
  Using ColorCMYtoRGB.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Red As Integer
      Dim Green As Integer
      Dim Blue As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.ColorCMYtoRGB(255, 0, 128, Red, Green, Blue)
      oGdPictureImaging.ClearImage(ImageID, oGdPictureImaging.ARGB(255, Red, Green, Blue))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ColorRGBtoHSL(System.Byte,System.Byte,System.Byte,System.Single@,System.Single@,System.Single@)">
	<summary>
  Converts RBG color from a set of red, green, and blue color components to HSL color into a set of
  hue, saturation and lightness components.
  </summary>
	<param name="Red">Input red component value [0 - 255]. </param>
	<param name="Green">Input green component value [0 - 255]. </param>
	<param name="Blue">Input blue component value [0 - 255]. </param>
	<param name="Hue">Output parameter. Hue component value [-1 ; 5]. </param>
	<param name="Saturation">Output parameter. Saturation component value [0 ; 1]. </param>
	<param name="Lightness">Output parameter. Lightness component value [0 ; 1].</param>
	<example>
  Using ColorRGBtoHSL.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Hue As Single
      Dim Saturation As Single
      Dim Lightness As Single
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
  
      oGdPictureImaging.ColorRGBtoHSL(255, 0, 128, Hue, Saturation, Lightness)
 
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ColorHSLtoRGB(System.Single,System.Single,System.Single,System.Byte@,System.Byte@,System.Byte@)">
	<summary>
  Converts HSL color from a set of hue, saturation and lightness components to RGB color into a set of
  red, green, and blue color components.
  </summary>
	<param name="Hue">Input hue component value [-1 ; 5]. </param>
	<param name="Saturation">Input saturation component value [0 ; 1]. </param>
	<param name="Lightness">Input lightness component value [0 ; 1]. </param>
	<param name="Red">Output parameter. Red component value [0 - 255]. </param>
	<param name="Green">Output parameter. Green component value [0 - 255]. </param>
	<param name="Blue">Output parameter. Blue component value [0 - 255].</param>
	<example>
  Using ColorHSLtoRGB.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Red As Byte
      Dim Green As Byte
      Dim Blue As Byte
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      oGdPictureImaging.ColorCMYtoRGB(2.5, 0.5, 0.5, Red, Green, Blue)
 
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>
  Returns a Color Object from a set of alpha, red, green, and blue color components.
  </summary>
	<param name="Alpha">The alpha component (also called transparency). Valid values are 0 (full
                      transparency) through 255 (full opacity). </param>
	<param name="Red">The red component. Valid values are 0 through 255. </param>
	<param name="Green">The green component. Valid values are 0 through 255. </param>
	<param name="Blue">The blue component. Valid values are 0 through 255. </param>
	<returns>
  A Color Object.
  </returns>
	<example>
 Swaping Red with Green using ARGB
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGB(255,255,0,0),oGdPictureImaging.ARGB(255,0,255,0))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.tiff")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte)">
	<summary>
  Returns a Color Object from a set of red, green, and blue color components.
  </summary>
	<param name="Red">The red component. Valid values are 0 through 255. </param>
	<param name="Green">The green component. Valid values are 0 through 255. </param>
	<param name="Blue">The blue component. Valid values are 0 through 255. </param>
	<returns>
  A Color Object.
  </returns>
	<example>
 Swaping Red with Green using ARGB
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGB(255,0,0),oGdPictureImaging.ARGB(0,255,0))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.tiff")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ARGB(System.Int32)">
	<summary>
  Returns a Color Object from a 32-bit ARGB value.
  </summary>
	<param name="iargb">A value specifying the 32-bit ARGB value. </param>
	<returns>
  A Color Object.
  </returns>
	<example>
 Swaping Red with Green using ARGB
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SwapColor(ImageID, oGdPictureImaging.ARGB(16711680),oGdPictureImaging.ARGB(65280))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.tiff")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>
 Returns a 32-bit Color value from a set of alpha, red, green, and blue color components.
 </summary>
	<param name="Alpha">The alpha component (also called transparency). Valid values are 0 (full
                     transparency) through 255 (full opacity). </param>
	<param name="Red">The red component. Valid values are 0 through 255. </param>
	<param name="Green">The green component. Valid values are 0 through 255. </param>
	<param name="Blue">The blue component. Valid values are 0 through 255. </param>
	<returns>
 A 32-bit Color value.
 </returns>
	<example>
  Getting ARGB Red color Using ARGBI.
 
 <code lang="vb.net">
 Integer RedColor = object.ARGBI(255, 255, 0, 0) ' A = 255; R = 255:  G = 0: B = 0
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AutoDeskew(System.Int32)">
	<summary>
  Tries to deskew a GdPicture image to about ± 15 degrees.
  
  Deskewing an image can help a lot to do OCR, OMR, barcode detection or just improve the readability
  of an image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)"/>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
 Using AutoDeskew on Image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.AutoDeskew(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AutoDeskew(System.Int32,System.Single)">
	<summary>
  Tries to deskew a GdPicture image to about ± specified degrees.
  
  Deskewing an image can help a lot to do OCR, OMR, barcode detection or just improve the readability
  of an image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
                                   about ±10 degrees. A value lower than 15 is suggested. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)"/>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
 Using AutoDeskew on Image with max angle of 10 is considered for investigation.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.AutoDeskew(ImageID, 10)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AutoDeskew(System.Int32,System.Single,System.Drawing.Color)">
	<summary>
  Tries to deskew a GdPicture image to about ± specified degrees. This function enables to specify the
  background color to use.
  
  Deskewing an image can help a lot to do OCR, OMR, barcode detection or just improve the readability
  of an image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
                                   about ±10 degrees. A value lower tha 15 is suggested. </param>
	<param name="BackColor">A Color Object. You can build a Color Object using the ARGB()
                          function. Color to use to fill background. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)"/>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
 Using AutoDeskew on Image with max angle of 10 is considered for investigation
  with green as a background color.
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.AutoDeskew(ImageID, 10, oGdPictureImaging.ARGB(0,255,0))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AutoDeskew(System.Int32,System.Single,System.Int32,System.Single,System.Boolean)">
	<summary>
  Tries to deskew a GdPicture image to about ± specified degrees. This function enables to specify the
  background color to use.
  
  Deskewing an image can help a lot to do OCR, OMR, barcode detection or just improve the readability
  of an image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
                                   about ±10 degrees. A value lower tha 15 is suggested. </param>
	<param name="BackColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color to use to fill background. </param>
	<param name="AngleStep">Determines the smallest angle of skew to detect. 0.25 is suggested. Higher value results in faster detection and vice-versa. </param>
	<param name="Optimistic">Determines if the engine must be otpimistic in the skew detection. For example, set true when you know the image has a skew and false otherwise. Default value is True.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
 Using AutoDeskew on Image with max angle of 10 is considered for investigation
  with green as a background color.
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.AutoDeskew(ImageID, 10, oGdPictureImaging.ARGBI(255, 0,255,0), 0.25, True)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AutoDeskew(System.Int32,System.Single,System.Drawing.Color,System.Single,System.Boolean)">
	<summary>
  Tries to deskew a GdPicture image to about ± specified degrees. This function enables to specify the
  background color to use.
  
  Deskewing an image can help a lot to do OCR, OMR, barcode detection or just improve the readability
  of an image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
                                   about ±10 degrees. A value lower tha 15 is suggested. </param>
	<param name="BackColor">A Color Object. You can build a Color Object using the ARGB()
                          function. Color to use to fill background. </param>
	<param name="AngleStep">Determines the smallest angle of skew to detect. 0.25 is suggested. Higher value results in faster detection and vice-versa. </param>
	<param name="Optimistic">Determines if the engine must be otpimistic in the skew detection. For example, set true when you know the image has a skew and false otherwise. Default value is True.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)"/>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
 Using AutoDeskew on Image with max angle of 10 is considered for investigation
  with green as a background color.
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.AutoDeskew(ImageID, 10, oGdPictureImaging.ARGB(0,255,0), 0.25, True)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetSkewAngle(System.Int32,System.Single)">
	<summary>
 Determines the skew angle of an image in degrees.
 
 It has a parameter for max angle of research.
 </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.AutoDeskew(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
                                  about ±10 degrees. A value lower than 15 is suggested. </param>
	<returns>
 Image skew in degrees.
 </returns>
	<remarks>
 Use the GetStat() function to determine if this function has succeeded.
 </remarks>
	<example>
 Obtaining Skew angle
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Angle As Single
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Angle = oGdPictureImaging.GetSkewAngle(ImageID, 15)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetSkewAngle(System.Int32,System.Single,System.Single,System.Boolean)">
	<summary>
 Determines the skew angle of an image in degrees.
 
 It has a parameter for max angle of research.
 </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.AutoDeskew(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="MaxAngleOfResearch">Maximum angle of research. IE: set 10 to perform a skew research
                                  about ±10 degrees. A value lower than 15 is suggested. </param>
	<param name="AngleStep">Determines the smallest angle of skew to detect. 0.25 is suggested. Higher value results in faster detection and vice-versa. </param>
	<param name="Optimistic">Determines if the engine must be otpimistic in the skew detection. For example, set true when you know the image has a skew and false otherwise.
 If you do not know which to choose, suggested value is True.</param>
	<returns>
 Image skew in degrees.
 </returns>
	<remarks>
 Use the GetStat() function to determine if this function has succeeded.
 </remarks>
	<example>
 Obtaining Skew angle
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Angle As Single
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Angle = oGdPictureImaging.GetSkewAngle(ImageID, 15, 0.25, True)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropWhiteBorders(System.Int32)">
	<summary>
  Detects &amp; removes margins consisting of white color around a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Cropping the borders of the Image 
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropWhiteBorders(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropWhiteBorders(System.Int32,System.Single)">
	<summary>
 Detects &amp; removes margins consisting of white color around a GdPicture image.
 
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Confidence threshold in percentage. Defaut value is 98.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
 Cropping the borders of the Image that have a detection confidence of more than 98%.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropWhiteBorders(ImageID, 98)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropWhiteBorders(System.Int32,System.Single,System.Int32)">
	<summary>
 Detects &amp; removes margins consisting of white color around a GdPicture image.
 
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 
 It also has a SkipLinesCount which is the number of lines surrounding the image to be skipped and not
 considered as borders and removed.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Confidence threshold in percentage. Defaut value is 98.</param>
	<param name="SkipLinesCount">Specifies the number of lines around the image which must be
                              ignored. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
 Cropping the borders of the Image that have a detection confidence of more than 98%.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropWhiteBorders(ImageID, 98)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBlackBorders(System.Int32)">
	<summary>
  Detects &amp; removes margins consisting of black color around a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.CropBlackBordersEx(System.Int32)"/>
	<example>
 Cropping the borders of the Image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropBlackBorders(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBlackBorders(System.Int32,System.Single)">
	<summary>
 Detects &amp; removes margins consisting of black color around a GdPicture image.
 
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Confidence threshold in percentage 0-100. Default value is 98.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.CropBlackBordersEx(System.Int32)"/>
	<example>
 Cropping the borders of the Image that have a detection confidence of more than 98%
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropBlackBorders(ImageID, 98)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBlackBorders(System.Int32,System.Single,System.Int32)">
	<summary>
 Detects &amp; removes margins consisting of black color around a GdPicture image.
 
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 It also has a SkipLinesCount which is the number of lines surrounding the image to be skipped and not
 considered as borders and removed.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Confidence threshold in percentage 0-100. Default value is 98.</param>
	<param name="SkipLinesCount">Specifies the number of lines around the image which must be
                              ignored. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.CropBlackBordersEx(System.Int32)"/>
	<example>
 Cropping the borders of the Image that have a detection confidence of more than 98%
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropBlackBorders(ImageID, 98)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBlackBordersEx(System.Int32)">
	<summary>
 Detects &amp; set to White, margins consisting of black color around a GdPicture image.
 
 This function does not have the same behavior as the CropBlackBorders() function: The black borders
 are not removed but set to blank. Therefore, the image dimensions are kept.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.CropBlackBorders(System.Int32)"/>
	<example>
 Cropping the borders of the Image by setting them to blank.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropBlackBordersEx(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBlackBordersEx(System.Int32,System.Single)">
	<summary>
 Detects &amp; set to White, margins consisting of black color around a GdPicture image.
 
 This function does not have the same behavior as the CropBlackBorders() function: The black borders
 are not removed but set to blank. Therefore, the image dimensions are kept.
 
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be set as blank, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Confidence threshold in percentage. Default value is 98.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.CropBlackBorders(System.Int32)"/>
	<example>
 Cropping the borders of the Image that have a detection confidence of more than 98%. Those borders will be set to blank and not removed.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropBlackBordersEx(ImageID, 98)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBlackBordersEx(System.Int32,System.Single,System.Int32)">
	<summary>
 Detects &amp; set to White, margins consisting of black color around a GdPicture image.
 
 This function does not have the same behavior as the CropBlackBorders() function: The black borders
 are not removed but set to blank. Therefore, the image dimensions are kept.
 
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be set as blank, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 
 It also has a SkipLinesCount which is the number of lines surrounding the image to be skipped and not
 considered as borders to be set as blanked.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Confidence threshold in percentage. Default value is 98.</param>
	<param name="SkipLinesCount">Specifies the number of lines around the image which must be
                              ignored.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.CropBlackBorders(System.Int32)"/>
	<example>
 Cropping the borders of the Image that have a detection confidence of more than 98%. Those borders will be set to blank and not removed.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropBlackBordersEx(ImageID, 98)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBorders(System.Int32,GdPicture.ImagingContext)">
	<summary>
  Detects &amp; removes margins consisting of constant color around a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Context">A member of the ImagingContext enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Using CropBorders
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropBorders(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBorders(System.Int32,System.Single,GdPicture.ImagingContext)">
	<summary>
 Detects &amp; removes margins consisting of constant color around a GdPicture image.
 
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Confidence threshold in percentage. Default value is 98 for documents and
                          92 for digital photo.</param>
	<param name="Context">A member of the ImagingContext enumeration. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Using CropBorders with confidence value of 98%
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropBorders(ImageID, 98)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBorders(System.Int32,System.Single,GdPicture.ReferencePoint,GdPicture.ImagingContext)">
	<summary>
 Detects &amp; removes margins consisting of constant color around a GdPicture image.
 
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value..
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Confidence threshold in percentage. Default value is 98 for documents
                          and 92 for digital photo.</param>
	<param name="PixelReference">A member of the ReferencePoint enumeration. Default value is
                              ReferencePoint.ReferencePointTopLeft. </param>
	<param name="Context">A member of the ImagingContext enumeration. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Using CropBorders with confidence value of 98% and a Reference Point of Top_Right
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropBorders(ImageID, 98, ReferencePoint.ReferencePointTopRight)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropDocumentBorders(System.Int32,System.Single,GdPicture.ReferencePoint,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Auto Crops Document Borders  and returns the amount of margins removed around the GdPicture image.
 
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value..
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Confidence threshold in percentage. Default value is 98 for documents
                          and 92 for digital photo.</param>
	<param name="PixelReference">A member of the ReferencePoint enumeration. Default value is
                              ReferencePoint.ReferencePointTopLeft. </param>
	<param name="Left">Returns the left coordinate, in pixel, of the area without margins. </param>
	<param name="Top">Returns the top coordinate, in pixel, of the area without margins. </param>
	<param name="Width">Returns the width, in pixel, of the area without margins. </param>
	<param name="Height">Returns the height, in pixel, of the area without margins. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Using CropDocumentBorders with confidence value of 98% and a Reference Point of Top_Right
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
     Dim Left As Integer
     Dim Top As Integer
     Dim Width As Integer
     Dim Height As Integer
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropDocumentBorders(ImageID, 98, ReferencePoint.ReferencePointTopRight, Left, Top, Width, Height)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBorders(System.Int32,System.Single,GdPicture.ReferencePoint,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Detects margins consisting of constant color around a GdPicture image.
 
 This function returns the coordinate of the cropping selection which can be used by the Crop
 function.
 
 It has a Confidence Parameter where if the lines and borders detection confidence exceeds this value
 they will be removed, and left as they are if the confidence in detecting them is less than the
 Confidence Parameter Value.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Confidence threshold in percentage. Default value is 98 for documents
                          and 92 for digital photo.</param>
	<param name="PixelReference">A member of the ReferencePoint enumeration. Default value is
                              ReferencePoint.ReferencePointTopLeft. </param>
	<param name="Left">Returns the left coordinate, in pixel, of the area without margins. </param>
	<param name="Top">Returns the top coordinate, in pixel, of the area without margins. </param>
	<param name="Width">Returns the width, in pixel, of the area without margins. </param>
	<param name="Height">Returns the height, in pixel, of the area without margins. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Detects &amp; crops borders around an image
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
    Dim Left As Integer
    Dim Top As Integer
    Dim Width As Integer
    Dim Height As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.CropBorders(ImageID, 98, ReferencePoint.ReferencePointTopRight, Left, Top, Width, Height)
 
     oGdPictureImaging.Crop(ImageID, Left, Top, Width, Height) 'Crop
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Crop(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Crops a custom area of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Left">Left source pixel. </param>
	<param name="Top">Top source pixel. </param>
	<param name="Width">Width in pixel. </param>
	<param name="Height">Height in pixel. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Cropping Image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.Crop(ImageID, 10, 20, 200, 100)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropTop(System.Int32,System.Int32)">
	<summary>
  Crops the top of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Lines">Height in pixel to remove from the top of a GdPicture image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Cropping Image Top side.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.CropTop(ImageID, 14)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropBottom(System.Int32,System.Int32)">
	<summary>
  Crops the bottom of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Lines">Height in pixel to remove from the bottom of a GdPicture image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Cropping Image Bottom side.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.CropBottom(ImageID, 28)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropLeft(System.Int32,System.Int32)">
	<summary>
  Crops the left of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Lines">Width in pixel to remove from the left of a GdPicture image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Cropping Image Left side.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.CropLeft(ImageID, 42)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CropRight(System.Int32,System.Int32)">
	<summary>
  Crops the right of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Lines">Width in pixel to remove from the right of a GdPicture image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Cropping Image Right side.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.CroRight(ImageID, 8)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageOnHDC(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a GdPicture image into a HDC (Handle to Device Context).
  </summary>
	<param name="ImageID">GdPicture Image Identifier. Image to draw. </param>
	<param name="hdc">Device Context destination. </param>
	<param name="DstLeft">Left pixel destination of the HDC. </param>
	<param name="DstTop">Top pixel destination of the HDC. </param>
	<param name="DstWidth">Width in pixel of the drawn image. </param>
	<param name="DstHeight">Height in pixel of the drawn image. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageOnGraphics(System.Int32,System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a GdPicture image into a graphics object.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. Image to draw. </param>
	<param name="g">Graphics destination. </param>
	<param name="DstLeft">Left pixel destination of the graphics. </param>
	<param name="DstTop">Top pixel destination of the graphics. </param>
	<param name="DstWidth">Width in pixel of the drawn image. </param>
	<param name="DstHeight">Height in pixel of the drawn image. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageOnHwnd(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a GdPicture image into a window defined by a Window Handle.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. Image to draw. </param>
	<param name="HANDLE">Window Handle destination. </param>
	<param name="DstLeft">Left pixel destination of the window. </param>
	<param name="DstTop">Top pixel destination of the window. </param>
	<param name="DstWidth">Width in pixel of the drawn image. </param>
	<param name="DstHeight">Height in pixel of the drawn image. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetDesktopHwnd"/>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageRectOnHDC(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a portion of a GdPicture image into a HDC (Handle to Device Context).
  </summary>
	<param name="ImageID">GdPicture Image Identifier. Image to draw. </param>
	<param name="hdc">Device Context destination. </param>
	<param name="DstLeft">Left pixel destination of the HDC. </param>
	<param name="DstTop">Top pixel destination of the HDC. </param>
	<param name="DstWidth">Width in pixel of the drawn image. </param>
	<param name="DstHeight">Height in pixel of the drawn image. </param>
	<param name="SrcLeft">Left pixel source of the image to draw. </param>
	<param name="SrcTop">Top pixel source of the image to draw. </param>
	<param name="SrcWidth">Width portion in pixel of the image to draw. </param>
	<param name="SrcHeight">Height portion in pixel of the image to draw. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageRectOnGraphics(System.Int32,System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a portion of a GdPicture image into a graphics object.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. Image to draw. </param>
	<param name="g">Graphics destination. </param>
	<param name="DstLeft">Left pixel destination of the graphics. </param>
	<param name="DstTop">Top pixel destination of the graphics. </param>
	<param name="DstWidth">Width in pixel of the drawn image. </param>
	<param name="DstHeight">Height in pixel of the drawn image. </param>
	<param name="SrcLeft">Left pixel source of the image to draw. </param>
	<param name="SrcTop">Top pixel source of the image to draw. </param>
	<param name="SrcWidth">Width portion in pixel of the image to draw. </param>
	<param name="SrcHeight">Height portion in pixel of the image to draw. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageRectOnHwnd(System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a portion of a GdPicture image into a window defined by a Window Handle.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. Image to draw. </param>
	<param name="HANDLE">Window Handle destination. </param>
	<param name="DstLeft">Left pixel destination of the window. </param>
	<param name="DstTop">Top pixel destination of the window. </param>
	<param name="DstWidth">Width in pixel of the drawn image. </param>
	<param name="DstHeight">Height in pixel of the drawn image. </param>
	<param name="SrcLeft">Left pixel source of the image to draw. </param>
	<param name="SrcTop">Top pixel source of the image to draw. </param>
	<param name="SrcWidth">Width portion in pixel of the image to draw. </param>
	<param name="SrcHeight">Height portion in pixel of the image to draw. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetDesktopHwnd"/>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DWrite(System.Int32,GdPicture.Barcode1DWriterType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
  Draws a 1D barcode on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
	<param name="Data">The data of the barcode to encode.</param>
	<param name="DstLeft">Left pixel destination of to top-left corner of bounding box the barcode.</param>
	<param name="DstTop">Top pixel destination of to top-left corner of bounding box of the
                       barcode.</param>
	<param name="DstWidth">Width of the bounding box of the barcode.</param>
	<param name="DstHeight">Height of the bounding box of the barcode.</param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function.
                          Color used to draw the barcode. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  To use this function, you have to add a reference to the GdPicture.NET.Barcode.1D.Writer.dll
  assembly:
  
    * Select Project / Add Reference...
    * Select the Browse tab and select the GdPicture.NET.Barcode.1D.Writer.dll library which can be
      found on c:\\Program Files\\GdPicture.NET\\Redist\\Framework X.X\\GdPicture.NET.Barcode.1D.Writer.dll
  </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Drawing a 1-D Barcode onto an image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Data As String = "978524"
     Dim DstLeft As Integer
     Dim DstTop As Integer
     Dim DstWidth As Integer
     Dim DstHeight As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     BarcodeType = Barcode1DWriterType.Barcode1DWriterCode11
     DstLeft = 50
     DstTop = 50
     DstWidth = 200
     DstHeight = 80
 
     oGdPictureImaging.Barcode1DWrite(ImageID, BarcodeType, Data, DstLeft, DstTop, DstWidth, DstHeight, Imaging1.ARGB(0, 0, 0))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DWrite(System.Int32,GdPicture.Barcode1DWriterType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,GdPicture.BarcodeAlign)">
	<summary>
  Draws a 1D barcode on a GdPicture image. This function accepts a parameter to specify the barcode
  alignment into the specified bounding box. The default alignment is centered.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
	<param name="Data">The data of the barcode to encode.</param>
	<param name="DstLeft">Left pixel destination of to top-left corner of bounding box the barcode.</param>
	<param name="DstTop">Top pixel destination of to top-left corner of bounding box of the
                       barcode.</param>
	<param name="DstWidth">Width of the bounding box of the barcode.</param>
	<param name="DstHeight">Height of the bounding box of the barcode.</param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function.
                          Color used to draw the barcode. </param>
	<param name="Alignment">A member of the BarcodeAlign enumeration.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  To use this function, you have to add a reference to the GdPicture.NET.Barcode.1D.Writer.dll
  assembly:
  
    * Select Project / Add Reference...
    * Select the Browse tab and select the GdPicture.NET.Barcode.1D.Writer.dll library which can be
      found on c:\\Program Files\\GdPicture.NET\\Redist\\Framework X.X\\GdPicture.NET.Barcode.1D.Writer.dll
  </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Writing a 1-D Barcode onto an image with Left alignment in the Surrounding Box.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Data As String = "978524"
     Dim DstLeft As Integer
     Dim DstTop As Integer
     Dim DstWidth As Integer
     Dim DstHeight As Integer
     Dim Alignment As BarcodeAlign
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     BarcodeType = Barcode1DWriterType.Barcode1DWriterCode11
     DstLeft = 50
     DstTop = 50
     DstWidth = 200
     DstHeight = 80
     Alignment = BarcodeAlign.BarcodeAlignLeft
 
     oGdPictureImaging.Barcode1DWrite(ImageID, BarcodeType, Data, DstLeft, DstTop, DstWidth, DstHeight, Imaging1.ARGB(0, 0, 0), Alignment)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DWrite(System.Int32,GdPicture.Barcode1DWriterType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.BarcodeAlign,System.Single)">
	<summary>
 Draws a 1D barcode on a GdPicture image. This function accepts a parameter to specify rotation and
 another to specify the barcode alignment with the specified bounding box. The default alignment is
 centered.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
	<param name="Data">The data of the barcode to encode.</param>
	<param name="DstLeft">Left pixel destination of to top-left corner of bounding box the
                       barcode.</param>
	<param name="DstTop">Top pixel destination of to top-left corner of bounding box of the
                      barcode.</param>
	<param name="DstWidth">Width of the bounding box of the barcode.</param>
	<param name="DstHeight">Height of the bounding box of the barcode.</param>
	<param name="FillColor">Color of the barcode. You can obtain a suitable Color value by using the ARGBI() function.</param>
	<param name="Alignment">A member of the BarcodeAlign enumeration.</param>
	<param name="Angle">The rotation of the barcode in degrees.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 To use this function, you have to add a reference to the GdPicture.NET.Barcode.1D.Writer.dll
 assembly:
 
   * Select Project / Add Reference...
   * Select the Browse tab and select the GdPicture.NET.Barcode.1D.Writer.dll library which can be
     found on c:\\Program Files\\GdPicture.NET\\Redist\\Framework X.X\\GdPicture.NET.Barcode.1D.Writer.dll
 </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Writing a 1-D Barcode onto an image with Left alignment in the Surrounding Box and a 45 degree angle skew inside of it.
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Data As String = "978524"
     Dim DstLeft As Integer
     Dim DstTop As Integer
     Dim DstWidth As Integer
     Dim DstHeight As Integer
     Dim Alignment As BarcodeAlign
     Dim Angle As Integer
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     BarcodeType = Barcode1DWriterType.Barcode1DWriterCode11
     DstLeft = 100
     DstTop = 100
     DstWidth = 200
     DstHeight = 80
     Alignment = BarcodeAlign.BarcodeAlignLeft
     Angle = 45
     oGdPictureImaging.Barcode1DWrite(ImageID, BarcodeType, Data, DstLeft, DstTop, DstWidth, DstHeight, Imaging1.ARGBI(255, 0, 0, 0), Alignment, Angle)
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DWrite(System.Int32,GdPicture.Barcode1DWriterType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,GdPicture.BarcodeAlign,System.Single)">
	<summary>
 Draws a 1D barcode on a GdPicture image. This function accepts a parameter to specify rotation and
 another to specify the barcode alignment with the specified bounding box. The default alignment is
 centered.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
	<param name="Data">The data of the barcode to encode.</param>
	<param name="DstLeft">Left pixel destination of to top-left corner of bounding box the
                       barcode.</param>
	<param name="DstTop">Top pixel destination of to top-left corner of bounding box of the
                      barcode.</param>
	<param name="DstWidth">Width of the bounding box of the barcode.</param>
	<param name="DstHeight">Height of the bounding box of the barcode.</param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function.
                         Color used to draw the barcode. </param>
	<param name="Alignment">A member of the BarcodeAlign enumeration.</param>
	<param name="Angle">The rotation of the barcode in degrees.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 To use this function, you have to add a reference to the GdPicture.NET.Barcode.1D.Writer.dll
 assembly:
 
   * Select Project / Add Reference...
   * Select the Browse tab and select the GdPicture.NET.Barcode.1D.Writer.dll library which can be
     found on c:\\Program Files\\GdPicture.NET\\Redist\\Framework X.X\\GdPicture.NET.Barcode.1D.Writer.dll
 </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Writing a 1-D Barcode onto an image with Left alignment in the Surrounding Box and a 45 degree angle skew inside of it.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Data As String = "978524"
     Dim DstLeft As Integer
     Dim DstTop As Integer
     Dim DstWidth As Integer
     Dim DstHeight As Integer
     Dim Alignment As BarcodeAlign
     Dim Angle As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     BarcodeType = Barcode1DWriterType.Barcode1DWriterCode11
     DstLeft = 100
     DstTop = 100
     DstWidth = 200
     DstHeight = 80
     Alignment = BarcodeAlign.BarcodeAlignLeft
     Angle = 45
 
     oGdPictureImaging.Barcode1DWrite(ImageID, BarcodeType, Data, DstLeft, DstTop, DstWidth, DstHeight, Imaging1.ARGB(0, 0, 0), Alignment, Angle)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DWriteGetMinWidth(GdPicture.Barcode1DWriterType,System.String)">
	<summary>
 Asks for the minimum width required to draw a specific barcode on a GdPicture image using one of the Barcode1DWrite
 methods.
 </summary>
	<param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
	<param name="Data">The data of the barcode to encode.</param>
	<returns>
 The minimum width required to draw the barcode. If 0, you can use the GetStat method to get the
 reason the method failed.
 </returns>
	<remarks>
 To use this function, you have to add a reference to the GdPicture.NET.Barcode.1D.Writer.dll
 assembly:
 
   * Select Project / Add Reference...
   * Select the Browse tab and select the GdPicture.NET.Barcode.1D.Writer.dll library which can be
     found on c:\\Program Files\\GdPicture.NET\\Redist\\Framework X.X\\GdPicture.NET.Barcode.1D.Writer.dll
 
 </remarks>
	<example>
 Writing a 1-D Barcode onto an image and making its width twice the size of the minimum width required for the barcode to be visible.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Data As String = "978524"
     Dim DstLeft As Integer
     Dim DstTop As Integer
     Dim DstWidth As Integer
     Dim DstHeight As Integer
     Dim Alignment As BarcodeAlign
     Dim Angle As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     BarcodeType = Barcode1DWriterType.Barcode1DWriterCode11
     DstLeft = 100
     DstTop = 100
     Alignment = BarcodeAlign.BarcodeAlignLeft
 
     DstWidth = oGdPictureImaging.Barcode1DWriteGetMinWidth(BarcodeType, Data)
     DstWidth = 2 * DstWidth
     DstHeight = CInt(DstWidth / 3)
 
     oGdPictureImaging.Barcode1DWrite(ImageID, BarcodeType, Data, DstLeft, DstTop, DstWidth, DstHeight, Imaging1.ARGB(0, 0, 0), Alignment)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderDoScan(System.Int32)">
	<summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Detecting all QR barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderDoScan(System.Int32,GdPicture.BarcodeQRReaderScanMode)">
	<summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() function.
 
 This function accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ScanMode">A member of the BarcodeQRReaderScanMode enumeration.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Detecting all QR barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin.
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeCount">
	<summary>
 Returns the number of barcode detected by the BarcodeQRReaderDoScan function.
 </summary>
	<returns>
 The number of barcode detected.
 </returns>
	<example>
 Detecting all QR barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin.
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeValue(System.Int32)">
	<summary>
 Returns the value of a barcode detected by the BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode data.
 </returns>
	<example>
 Detecting all QR barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin.
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeConfidence(System.Int32)">
	<summary>
 Returns the confidence of a barcode detected by the BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode confidence. In the range [(less trust) 0 - 100 (full trust)]
 </returns>
	<example>
 Detecting all QR barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetVersion(System.Int32)">
	<summary>
 Returns the version of a barcode detected by the BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The version of the barcode.
 </returns>
	<example>
 Detecting all QR barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin.
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeX1(System.Int32)">
	<summary>
 Returns the X position (in pixel) of the top-left corner of a barcode detected by the
 BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode X position of the top-left corner.
 </returns>
	<example>
 Detecting all QR barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeY1(System.Int32)">
	<summary>
 Returns the Y position (in pixel) of the top-left corner of a barcode detected by the
 BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode Y position of the top-left corner.
 </returns>
	<example>
 Detecting all QR barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin.
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeX2(System.Int32)">
	<summary>
 Returns the X position (in pixel) of the top-right corner of a barcode detected by the
 BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode X position of the top-right corner.
 </returns>
	<example>
 Detecting all QR barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeY2(System.Int32)">
	<summary>
 Returns the Y position (in pixel) of the top-right corner of a barcode detected by the
 BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode Y position of the top-right corner.
 </returns>
	<example>
 Detecting all QR barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeX3(System.Int32)">
	<summary>
 Returns the X position (in pixel) of the bottom-left corner of a barcode detected by the
 BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode X position of the bottom-left corner.
 </returns>
	<example>
 Detecting all QR barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeY3(System.Int32)">
	<summary>
 Returns the Y position (in pixel) of the bottom-left corner of a barcode detected by the
 BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode Y position of the bottom-left corner.
 </returns>
	<example>
 Detecting all QR barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeX4(System.Int32)">
	<summary>
 Returns the X position (in pixel) of the bottom-right corner of a barcode detected by the
 BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode X position of the bottom-right corner.
 </returns>
	<example>
 Detecting all QR barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin.
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderGetBarcodeY4(System.Int32)">
	<summary>
 Returns the Y position (in pixel) of the bottom-right corner of a barcode detected by the
 BarcodeQRReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeQRReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode Y position of the bottom-right corner.
 </returns>
	<example>
 Detecting all QR barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeQRReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeQRReaderClear">
	<summary>
 Releases from memory all information about latest QR barcode detection.
 </summary>
	<example>
 Detecting all QR barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeQRReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start QR barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeQRReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeQRReaderGetBarcodeValue(i))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeQRReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture QR Barcode Recognition Plugin.
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderDoScan(System.Int32)">
	<summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderDoScan(System.Int32,GdPicture.BarcodeDataMatrixReaderScanMode)">
	<summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() function.
 
 This function accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ScanMode">A member of the BarcodeDataMatrixReaderScanMode enumeration.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount">
	<summary>
 Returns the number of barcode detected by the BarcodeDataMatrixReaderDoScan function.
 </summary>
	<returns>
 The number of barcode detected.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(System.Int32)">
	<summary>
 Returns the value of a barcode detected by the BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode data.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(System.Int32)">
	<summary>
 Returns the number of rows of a barcode detected by the BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The number of rows of the barcode.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(System.Int32)">
	<summary>
 Returns the number of columns of a barcode detected by the BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The number of columns of the barcode.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(System.Int32)">
	<summary>
 Returns the X position (in pixel) of the top-left corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode X position of the top-left corner.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(System.Int32)">
	<summary>
 Returns the Y position (in pixel) of the top-left corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode Y position of the top-left corner.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(System.Int32)">
	<summary>
 Returns the X position (in pixel) of the top-right corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode X position of the top-right corner.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(System.Int32)">
	<summary>
 Returns the Y position (in pixel) of the top-right corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode Y position of the top-right corner.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(System.Int32)">
	<summary>
 Returns the X position (in pixel) of the bottom-left corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode X position of the bottom-left corner.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(System.Int32)">
	<summary>
 Returns the Y position (in pixel) of the bottom-left corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode Y position of the bottom-left corner.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(System.Int32)">
	<summary>
 Returns the X position (in pixel) of the bottom-right corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode X position of the bottom-right corner.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(System.Int32)">
	<summary>
 Returns the Y position (in pixel) of the bottom-right corner of a barcode detected by the
 BarcodeDataMatrixReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and BarcodeDataMatrixReaderGetBarcodeCount
                         returned value.</param>
	<returns>
 The barcode Y position of the bottom-right corner.
 </returns>
	<example>
 Detecting all DataMatrix barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
 
                    Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                      For i = 1 To oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
                         X1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX1(i) + LeftArea
                         X2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX2(i) + LeftArea
                         X3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX3(i) + LeftArea
                         X4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeX4(i) + LeftArea
 
                         Y1 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY1(i) + TopArea
                         Y2 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY2(i) + TopArea
                         Y3 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY3(i) + TopArea
                         Y4 = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeY4(i) + TopArea
 
                         oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                         oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                     Next

                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.BarcodeDataMatrixReaderClear">
	<summary>
 Releases from memory all information about latest DataMatrix barcode detection.
 </summary>
	<example>
 Detecting all DataMatrix barcode of an image
 
 <code lang="vb.net">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim oGdPictureImaging As New GdPicture.GdPictureImaging
        Dim ImageID As Integer
 
        ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
        If ImageID &lt;&gt; 0 Then
            If oGdPictureImaging.BarcodeDataMatrixReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start DataMatrix barcode scanning process
                Dim BarcodeCount As Integer = oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeCount
 
                If BarcodeCount &gt; 0 Then
                    For i As Integer = 1 To BarcodeCount
                        MsgBox("Barcode No: " &amp; Str(i))
                        MsgBox("Value: " &amp; oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeValue(i))
                        MsgBox("Rows: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeRows(i)))
                        MsgBox("Columns: " &amp; Str(oGdPictureImaging.BarcodeDataMatrixReaderGetBarcodeColumns(i)))
                    Next
                Else
                    MsgBox("No barcode detected !")
                End If
 
                oGdPictureImaging.BarcodeDataMatrixReaderClear() 'Release detection info from memory
            End If
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
        End If
    End Sub
 </code>
	</example>
	<remarks>
 This function requires the optional GdPicture DataMatrix Barcode Recognition Plugin. This Plugin must
 be unlocked with the SetLicenseNumberDataMatrixBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderDoScan(System.Int32)">
	<summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() function. This function uses best quality option.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
 unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
 </remarks>
	<example>
 Detecting all barcode of an image
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
    Dim oGdPictureImaging As New GdPicture.GdPictureImaging
    Dim ImageID As Integer
 
    ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
    If ImageID &lt;&gt; 0 Then
        If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
            Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
 
            If BarcodeCount &gt; 0 Then
                For i As Integer = 1 To BarcodeCount
                    MsgBox("Barcode No: " &amp; Str(i))
                    MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                    MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                    MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                Next
            Else
                MsgBox("No barcode detected !")
            End If
 
            oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
        End If
        oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    End If
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderDoScan(System.Int32,GdPicture.Barcode1DReaderScanMode)">
	<summary>
 Starts a barcode recognition process on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() function.
 
 This function accepts a parameter to specify the scanning mode (quality vs speed).
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ScanMode">A member of the Barcode1DReaderScanMode enumeration.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
 unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
 </remarks>
	<example>
 Detecting all barcode of an image
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
    Dim oGdPictureImaging As New GdPicture.GdPictureImaging
    Dim ImageID As Integer
 
    ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
    If ImageID &lt;&gt; 0 Then
        If oGdPictureImaging.Barcode1DReaderDoScan(ImageID, Barcode1DReaderScanMode.BestQuality) = GdPictureStatus.OK Then 'Start barcode scanning process
            Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
 
            If BarcodeCount &gt; 0 Then
                For i As Integer = 1 To BarcodeCount
                    MsgBox("Barcode No: " &amp; Str(i))
                    MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                    MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                    MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                Next
            Else
                MsgBox("No barcode detected !")
            End If
 
            oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
        End If
        oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    End If
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeCount">
	<summary>
  Returns the number of barcode detected by the Barcode1DReaderDoScan function.
  </summary>
	<returns>
  The number of barcode detected.
  </returns>
	<example>
  Detecting all barcode of an image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
  
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeType(System.Int32)">
	<summary>
  Returns the type of a barcode detected by the Barcode1DReaderDoScan function.
  </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                          value.</param>
	<returns>
  A member of the Barcode1DReaderType enumeration.
  </returns>
	<example>
  Detecting all barcode of an image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
  
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeValue(System.Int32)">
	<summary>
  Returns the value of a barcode detected by the Barcode1DReaderDoScan function.
  </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                          value.</param>
	<returns>
  The barcode data.
  </returns>
	<example>
  Detecting all barcode of an image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
  
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(System.Int32)">
	<summary>
  Returns the angle of a barcode detected by the Barcode1DReaderDoScan function.
  </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                          value.</param>
	<returns>
  The barcode angle in degrees.
  </returns>
	<example>
  Detecting all barcode of an image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
  
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderBarcodeHasChecksum(System.Int32)">
	<summary>
 Returns if a barcode detected by the Barcode1DReaderDoScan function has a checksum.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                         value.</param>
	<returns>
 True if the barcode has a checksum else False.
 </returns>
	<remarks>
 This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
 unlocked with the SetLicenseNumber1DBarcodeRecognition() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeX1(System.Int32)">
	<summary>
 Returns the X position (in pixel) of the top-left corner of a barcode detected by the
 Barcode1DReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                         value.</param>
	<returns>
 The barcode X position of the top-left corner.
 </returns>
	<remarks>
 This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
 unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
 </remarks>
	<example>
   Detecting all barcode of an image and drawing a rectangle around them.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
        Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                 For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
                     X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
                     X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
                     X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
                     X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
 
                     Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
                     Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
                     Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
                     Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
 
                     oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
.
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeY1(System.Int32)">
	<summary>
 Returns the Y position (in pixel) of the top-left corner of a barcode detected by the
 Barcode1DReaderDoScan function.
 </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                         value.</param>
	<returns>
 The barcode Y position of the top-left corner.
 </returns>
	<remarks>
 This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
 unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
 </remarks>
	<example>
 Detecting all barcode of an image and drawing a rectangle around them.
 
 <code lang="vb.net">
   Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
    Dim oGdPictureImaging As New GdPicture.GdPictureImaging
    Dim ImageID As Integer
 
    ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
 
    If ImageID &lt;&gt; 0 Then
        If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
            Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
 
            If BarcodeCount &gt; 0 Then
                For i As Integer = 1 To BarcodeCount
                    MsgBox("Barcode No: " &amp; Str(i))
                    MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                    MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                    MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                Next
       Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
                    X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
                    X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
                    X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
                    X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
 
                    Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
                    Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
                    Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
                    Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
 
                    oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                    oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                    oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                    oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                Next
            Else
                MsgBox("No barcode detected !")
            End If
 .
            oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
        End If
        oGdPictureImaging.ReleaseGdPictureImage(ImageID)
    End If
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeX2(System.Int32)">
	<summary>
  Returns the X position (in pixel) of the top-right corner of a barcode detected by the
  Barcode1DReaderDoScan function.
  </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                          value.</param>
	<returns>
  The barcode X position of the top-right corner.
  </returns>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
  </remarks>
	<example>
   Detecting all barcode of an image and drawing a rectangle around them.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
        Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                 For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
                     X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
                     X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
                     X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
                     X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
 
                     Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
                     Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
                     Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
                     Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
 
                     oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
.
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeY2(System.Int32)">
	<summary>
  Returns the Y position (in pixel) of the top-right corner of a barcode detected by the
  Barcode1DReaderDoScan function.
  </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                          value.</param>
	<returns>
  The barcode Y position of the top-right corner.
  </returns>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
  </remarks>
	<example>
   Detecting all barcode of an image and drawing a rectangle around them.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
        Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                 For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
                     X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
                     X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
                     X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
                     X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
 
                     Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
                     Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
                     Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
                     Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
 
                     oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
.
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeX3(System.Int32)">
	<summary>
  Returns the X position (in pixel) of the bottom-right corner of a barcode detected by the
  Barcode1DReaderDoScan function.
  </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                          value.</param>
	<returns>
  The barcode X position of the bottom-right corner.
  </returns>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
  </remarks>
	<example>
   Detecting all barcode of an image and drawing a rectangle around them.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
        Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                 For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
                     X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
                     X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
                     X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
                     X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
 
                     Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
                     Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
                     Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
                     Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
 
                     oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
.
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeY3(System.Int32)">
	<summary>
  Returns the Y position (in pixel) of the bottom-right corner of a barcode detected by the
  Barcode1DReaderDoScan function.
  </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                          value.</param>
	<returns>
  The barcode Y position of the bottom-right corner.
  </returns>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
  </remarks>
	<example>
   Detecting all barcode of an image and drawing a rectangle around them.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
        Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                 For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
                     X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
                     X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
                     X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
                     X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
 
                     Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
                     Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
                     Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
                     Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
 
                     oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
.
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeX4(System.Int32)">
	<summary>
  Returns the X position (in pixel) of the bottom-left corner of a barcode detected by the
  Barcode1DReaderDoScan function.
  </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                          value.</param>
	<returns>
  The barcode X position of the bottom-left corner.
  </returns>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
  </remarks>
	<example>
   Detecting all barcode of an image and drawing a rectangle around them.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
        Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                 For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
                     X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
                     X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
                     X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
                     X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
 
                     Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
                     Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
                     Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
                     Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
 
                     oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
.
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderGetBarcodeY4(System.Int32)">
	<summary>
  Returns the Y position (in pixel) of the bottom-left corner of a barcode detected by the
  Barcode1DReaderDoScan function.
  </summary>
	<param name="BarcodeNo">Barcode index. Must be between 1 and Barcode1DReaderGetBarcodeCount returned
                          value.</param>
	<returns>
  The barcode Y position of the bottom-left corner.
  </returns>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function.
  </remarks>
	<example>
   Detecting all barcode of an image and drawing a rectangle around them.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
        Dim X1, X2, X3, X4, Y1, Y2, Y3, Y4 As Integer
                 For i = 1 To oGdPictureImaging.Barcode1DReaderGetBarcodeCount
                     X1 = oGdPictureImaging.Barcode1DReaderGetBarcodeX1(i) + LeftArea
                     X2 = oGdPictureImaging.Barcode1DReaderGetBarcodeX2(i) + LeftArea
                     X3 = oGdPictureImaging.Barcode1DReaderGetBarcodeX3(i) + LeftArea
                     X4 = oGdPictureImaging.Barcode1DReaderGetBarcodeX4(i) + LeftArea
 
                     Y1 = oGdPictureImaging.Barcode1DReaderGetBarcodeY1(i) + TopArea
                     Y2 = oGdPictureImaging.Barcode1DReaderGetBarcodeY2(i) + TopArea
                     Y3 = oGdPictureImaging.Barcode1DReaderGetBarcodeY3(i) + TopArea
                     Y4 = oGdPictureImaging.Barcode1DReaderGetBarcodeY4(i) + TopArea
 
                     oGdPictureImaging.DrawLine(ImageID, X1, Y1, X2, Y2, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X2, Y2, X3, Y3, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X3, Y3, X4, Y4, 1, Color.Red, True)
                     oGdPictureImaging.DrawLine(ImageID, X4, Y4, X1, Y1, 1, Color.Red, True)
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
.
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Barcode1DReaderClear">
	<summary>
  Releases from memory all information about latest 1D barcode detection.
  </summary>
	<example>
  Detecting all barcode of an image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPicture.GdPictureImaging
     Dim ImageID As Integer
  
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Prompt the user to select an image
  
     If ImageID &lt;&gt; 0 Then
         If oGdPictureImaging.Barcode1DReaderDoScan(ImageID) = GdPictureStatus.OK Then 'Start barcode scanning process
             Dim BarcodeCount As Integer = oGdPictureImaging.Barcode1DReaderGetBarcodeCount
  
             If BarcodeCount \&gt; 0 Then
                 For i As Integer = 1 To BarcodeCount
                     MsgBox("Barcode No: " &amp; Str(i))
                     MsgBox("Type: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeType(i).ToString)
                     MsgBox("Value: " &amp; oGdPictureImaging.Barcode1DReaderGetBarcodeValue(i))
                     MsgBox("Angle: " &amp; Str(oGdPictureImaging.Barcode1DReaderGetBarcodeSkewAngle(i)))
                 Next
             Else
                 MsgBox("No barcode detected !")
             End If
  
             oGdPictureImaging.Barcode1DReaderClear() 'Release detection info from memory
         End If
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
  End Sub
  </code>
	</example>
	<remarks>
  This function requires the optional GdPicture 1D Barcode Recognition Plugin. This Plugin must be
  unlocked with the SetLicenseNumber1DBarcodeRecognition() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageTransparency(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a GdPicture image into another GdPicture image applying a transparency effect.
  </summary>
	<param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn. </param>
	<param name="DstImage">GdPicture Image Identifier. specifies the image to draw. </param>
	<param name="Transparency">Transparency to apply to the drawn image [0 ; 255]. 0 means full
                             opacity and 255 full transparency. </param>
	<param name="DstLeft">Specifies the x-coordinate in pixel of the upper-left corner of
                        the destination rectangle at which to draw the image. </param>
	<param name="DstTop">Specifies the y-coordinate in pixel of the upper-left corner of
                       the destination rectangle at which to draw the image. </param>
	<param name="DstWidth">Specifies the width in pixel of the destination rectangle at which
                         to draw the image. </param>
	<param name="DstHeight">Specifies the height in pixel of the destination rectangle at which
                          to draw the image. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Watermark an image to another image
  <code lang="vb.net">
     Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
         Dim oGdPictureImaging As New GdPicture.GdPictureImaging
         Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
         oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
         Dim ImageBackID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\image1.jpg")
         Dim ImageWatermarkID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\image2.jpg")
  
         ''' Drawing ImageBackID to the top left corner of ImageBackID.
         oGdPictureImaging.DrawGdPictureImageTransparency(ImageWatermarkID, ImageBackID, 150, 0, 0, 200, 200, Drawing2D.InterpolationMode.HighQualityBicubic)
  
         oGdPictureImaging.SaveAsJPEG(ImageBackID, "c:\\image3.jpg", 90)
  
         oGdPictureImaging.ReleaseGdPictureImage(ImageBackID)
         oGdPictureImaging.ReleaseGdPictureImage(ImageWatermarkID)
     End Sub
  </code>
	</example>
	<example>
 Copying One Image onto and setting Opacity to half.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim SrcImage As Integer
     Dim DstImage As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     SrcImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
     DstImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
   oGdPictureImaging.DrawGdPictureImageTransparency(SrcImage, DstImage, 128, 0, 0, 100, 100, Drawing2D.InterpolationMode.Bicubic)
 
     oGdPictureImaging.SaveAsPNG(DstImage, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(DstImage)
     oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageTransparencyColor(System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
 Draws a GdPicture image into another GdPicture image setting a specific color of the image to draw as
 transparent.
 </summary>
	<param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn. </param>
	<param name="DstImage">GdPicture Image Identifier. specifies the image to draw. </param>
	<param name="TransparentColor">Color Object. You can build a Color Object using the ARGB()
                                function. The color to set as transparent. </param>
	<param name="DstLeft">Specifies the x-coordinate in pixel of the upper-left corner of
                       the destination rectangle at which to draw the image. </param>
	<param name="DstTop">Specifies the y-coordinate in pixel of the upper-left corner of
                      the destination rectangle at which to draw the image. </param>
	<param name="DstWidth">Specifies the width in pixel of the destination rectangle at which
                        to draw the image. </param>
	<param name="DstHeight">Specifies the height in pixel of the destination rectangle at which
                         to draw the image. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
 Copying One Image onto and setting transparency color.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim SrcImage As Integer
     Dim DstImage As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     SrcImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
     DstImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
   oGdPictureImaging.DrawGdPictureImageTransparencyColor(SrcImage, DstImage, oGdPictureImaging.ARGB(255,120,50,60), 0, 0, 100, 100, Drawing2D.InterpolationMode.Bicubic)
 
     oGdPictureImaging.SaveAsPNG(DstImage, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(DstImage)
     oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageTransparencyColor(System.Int32,System.Int32,System.Drawing.Color,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
 Draws a GdPicture image into another GdPicture image setting a specific color of the image to draw as
 transparent. This function takes a percentage threshold parameter regarding the color to set as
 transparent.
 
 Ie: A threshold value of 90 means that all the color values which are within 90% of the color value
 parameter will be set as transparent.
 </summary>
	<param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn. </param>
	<param name="DstImage">GdPicture Image Identifier. specifies the image to draw. </param>
	<param name="TransparentColor">Color Object. You can build a Color Object using the ARGB()
                                function. The color to set as transparent. </param>
	<param name="Threshold">percentage threshold between 0 and 100. </param>
	<param name="DstLeft">Specifies the x-coordinate in pixel of the upper-left corner of
                       the destination rectangle at which to draw the image. </param>
	<param name="DstTop">Specifies the y-coordinate in pixel of the upper-left corner of
                      the destination rectangle at which to draw the image. </param>
	<param name="DstWidth">Specifies the width in pixel of the destination rectangle at which
                        to draw the image. </param>
	<param name="DstHeight">Specifies the height in pixel of the destination rectangle at which
                         to draw the image. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
 Copying One Image onto and setting transparency color and threshold value to half.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim SrcImage As Integer
     Dim DstImage As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     SrcImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
     DstImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
   oGdPictureImaging.DrawGdPictureImageTransparencyColor(SrcImage, DstImage, oGdPictureImaging.ARGB(255,120,50,60), 128, 0, 0, 100, 100, Drawing2D.InterpolationMode.Bicubic)
 
     oGdPictureImaging.SaveAsPNG(DstImage, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(DstImage)
     oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageClipped(System.Int32,System.Int32,System.Drawing.Point[])">
	<summary>
  Draws a clipped GdPicture image from several points of co-ordinates into another GdPicture image.
  </summary>
	<param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn. </param>
	<param name="DstImage">GdPicture Image Identifier. specifies the image to draw. </param>
	<param name="arPoints">Array of System.Drawing.Point that specifies the coordinates. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  draw image1.jpg into image2.jpg to a region defined by 3 points a(0, 0) b(700, 0) and c(700, 700)
  <code lang="vb.net">
  Dim ImageID1 As Integer, ImageID2 As Integer
  Dim arPoints(2) As System.Drawing.Point
  Dim m_Stat As GdPictureStatus
  
  ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("image1.jpg")
  ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("image2.jpg")
  
  arPoints(0).X = 0
  arPoints(0).Y = 0
  arPoints(1).X = 700
  arPoints(1).Y = 0
  arPoints(2).X = 700
  arPoints(2).Y = 700
  
  m_Stat = oGdPictureImaging.DrawGdPictureImageClipped(ImageID1, ImageID2, arPoints)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a GdPicture image into another GdPicture image.
  </summary>
	<param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn. </param>
	<param name="DstImage">GdPicture Image Identifier. specifies the image to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate in pixel of the upper-left corner of
                        the destination rectangle at which to draw the image. </param>
	<param name="DstTop">Specifies the y-coordinate in pixel of the upper-left corner of
                       the destination rectangle at which to draw the image. </param>
	<param name="DstWidth">Specifies the width in pixel of the destination rectangle at which
                         to draw the image. </param>
	<param name="DstHeight">Specifies the height in pixel of the destination rectangle at which
                          to draw the image. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.DrawGdPictureImageRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)"/>
	<example>
 Copying One Image onto another.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim SrcImage As Integer
     Dim DstImage As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     SrcImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
     DstImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
   oGdPictureImaging.DrawGdPictureImage(SrcImage, DstImage, 0, 0, 200, 200, System.Drawing.Drawing2D.InterpolationMode.Bicubic)
 
     oGdPictureImaging.SaveAsPNG(DstImage, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(DstImage)
     oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a portion of a GdPicture image into another GdPicture image.
  </summary>
	<param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn. </param>
	<param name="DstImage">GdPicture Image Identifier. specifies the image to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate in pixel of the upper-left corner of
                        the destination rectangle at which to draw the image. </param>
	<param name="DstTop">Specifies the y-coordinate in pixel of the upper-left corner of
                       the destination rectangle at which to draw the image. </param>
	<param name="DstWidth">Specifies the width in pixel of the destination rectangle at which
                         to draw the image. </param>
	<param name="DstHeight">Specifies the height in pixel of the destination rectangle at which
                          to draw the image. </param>
	<param name="SrcLeft">Left pixel source of the image to draw. </param>
	<param name="SrcTop">Top pixel source of the image to draw. </param>
	<param name="SrcWidth">Width portion in pixel of the image to draw. </param>
	<param name="SrcHeight">Height portion in pixel of the image to draw. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
 Copying One Image onto another specifying both the source and destination rectangles.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim SrcImage As Integer
     Dim DstImage As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     SrcImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
     DstImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
   oGdPictureImaging.DrawGdPictureImageRect(SrcImage, DstImage, 0, 0, 200, 200, 0, 0, 100, 100, System.Drawing.Drawing2D.InterpolationMode.Bicubic)
 
     oGdPictureImaging.SaveAsPNG(DstImage, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(DstImage)
     oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageOP(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.Operators,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a GdPicture image into another GdPicture image using an operator of combination.
  </summary>
	<param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn. </param>
	<param name="DstImage">GdPicture Image Identifier. specifies the image to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate in pixel of the upper-left corner of
                        the destination rectangle at which to draw the image. </param>
	<param name="DstTop">Specifies the y-coordinate in pixel of the upper-left corner of
                       the destination rectangle at which to draw the image. </param>
	<param name="DstWidth">Specifies the width in pixel of the destination rectangle at which
                         to draw the image. </param>
	<param name="DstHeight">Specifies the height in pixel of the destination rectangle at which
                          to draw the image. </param>
	<param name="Op">A member of the Operators enumeration. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.DrawGdPictureImageRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)"/>
	<example>
 Copying One Image onto another using OP operation AND.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim SrcImage As Integer
     Dim DstImage As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     SrcImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
     DstImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
   oGdPictureImaging.DrawGdPictureImageOP(SrcImage, DstImage, 0, 0, 200, 200, Operators.OperatorAnd, System.Drawing.Drawing2D.InterpolationMode.Bicubic)
 
     oGdPictureImaging.SaveAsPNG(DstImage, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(DstImage)
     oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageOPRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.Operators,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Draws a portion of a GdPicture image into another GdPicture image using an operator of combination.
  </summary>
	<param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn. </param>
	<param name="DstImage">GdPicture Image Identifier. specifies the image to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate in pixel of the upper-left corner of
                        the destination rectangle at which to draw the image. </param>
	<param name="DstTop">Specifies the y-coordinate in pixel of the upper-left corner of
                       the destination rectangle at which to draw the image. </param>
	<param name="DstWidth">Specifies the width in pixel of the destination rectangle at which
                         to draw the image. </param>
	<param name="DstHeight">Specifies the height in pixel of the destination rectangle at which
                          to draw the image. </param>
	<param name="SrcLeft">Specifies the the x-coordinate in pixel of the upper-left corner
                        of the portion of the source image to be drawn. </param>
	<param name="SrcTop">Specifies the the y-coordinate in pixel of the upper-left corner
                       of the portion of the source image to be drawn. </param>
	<param name="SrcWidth">Specifies the width in pixel of the portion of the source image to
                         be drawn. </param>
	<param name="SrcHeight">Specifies the height in pixel of the portion of the source image to
                          be drawn. </param>
	<param name="Op">A member of the Operators enumeration. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
 Copying One Image onto another using OP operation AND and specifying both the source and destination rectangles.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim SrcImage As Integer
     Dim DstImage As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     SrcImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
     DstImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
   oGdPictureImaging.DrawGdPictureImageOPRect(SrcImage, DstImage, 0, 0, 200, 200, 0, 0, 100, 100, Operators.OperatorAnd, System.Drawing.Drawing2D.InterpolationMode.Bicubic)
 
     oGdPictureImaging.SaveAsPNG(DstImage, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(DstImage)
     oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGdPictureImageSkewing(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode,System.Boolean)">
	<summary>
  Draws a skewed GdPicture image from 3 points of co-ordinates into another GdPicture image.
  </summary>
	<param name="SrcImage">GdPicture Image Identifier. Specifies the image to be drawn. </param>
	<param name="DstImage">GdPicture Image Identifier. specifies the image to draw. </param>
	<param name="DstLeft1">Left pixel destination of the first point. </param>
	<param name="DstTop1">Top pixel destination of the first point. </param>
	<param name="DstLeft2">Left pixel destination of the second point. </param>
	<param name="DstTop2">Top pixel destination of the second point. </param>
	<param name="DstLeft3">Left pixel destination of the third point. </param>
	<param name="DstTop3">Left pixel destination of the third point. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Copying One Image onto another using skewing and applying antialiasing.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim SrcImage As Integer
     Dim DstImage As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     SrcImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
     DstImage = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
   oGdPictureImaging.DrawGdPictureImageSkewing(SrcImage, DstImage,0, 0, 700, 0, 700, 700, Drawing2D.InterpolationMode.Bicubic, True)
 
     oGdPictureImaging.SaveAsPNG(DstImage, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(DstImage)
     oGdPictureImaging.ReleaseGdPictureImage(SrcImage)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws an arc on a GdPicture image. The arc is part of an ellipse.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the bounding
                        rectangle for the ellipse that contains the arc. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the bounding
                       rectangle for the ellipse that contains the arc. </param>
	<param name="Width">Specifies the width of the ellipse that contains the arc. </param>
	<param name="Height">Specifies the height of the ellipse that contains the arc. </param>
	<param name="StartAngle">Specifies the angle between the x-axis and the starting point of the arc. </param>
	<param name="SweepAngle">Specifies the angle between the starting and ending points of the arc. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the arc. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the arc. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing an Arc on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.DrawArc(ImageID, 0, 0, 500, 500, 20.0, 160.0, 10, oGdPictureImaging.ARGB(255,0,0,0), True)
 
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws an arc on a GdPicture image. The arc is part of an ellipse.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the bounding
                        rectangle for the ellipse that contains the arc. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the bounding
                       rectangle for the ellipse that contains the arc. </param>
	<param name="Width">Specifies the width of the ellipse that contains the arc. </param>
	<param name="Height">Specifies the height of the ellipse that contains the arc. </param>
	<param name="StartAngle">Specifies the angle between the x-axis and the starting point of the arc. </param>
	<param name="SweepAngle">Specifies the angle between the starting and ending points of the arc. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the arc. </param>
	<param name="PenColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         used to draw the arc. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing an Arc on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.DrawArc(ImageID, 0, 0, 500, 500, 20.0, 160.0, 10, oGdPictureImaging.ARGBI(255,0,0,0), True)
 
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
 Draws a Bezier spline on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Left1">Specifies the x-coordinate of the starting point of the Bezier spline. </param>
	<param name="Top1">Specifies the y-coordinate of the starting point of the Bezier spline. </param>
	<param name="Left2">Specifies the x-coordinate of the first control point of the Bezier spline.
                     </param>
	<param name="Top2">Specifies the y-coordinate of the first control point of the Bezier spline.
                    </param>
	<param name="Left3">Specifies the x-coordinate of the second control point of the Bezier
                     spline. </param>
	<param name="Top3">Specifies the y-coordinate of the second control point of the Bezier
                    spline. </param>
	<param name="Left4">Specifies the x-coordinate of the ending point of the Bezier spline. </param>
	<param name="Top4">Specifies the y-coordinate of the ending point of the Bezier spline. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the arc. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                        used to draw the Bezier. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Drawing an Bezier Curve on the image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.DrawBezier(ImageID, 50, 50, 100, 120, 180, 60, 500, 50, 10, oGdPictureImaging.ARGB(255,0,0,0), True)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
 Draws a Bezier spline on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Left1">Specifies the x-coordinate of the starting point of the Bezier spline. </param>
	<param name="Top1">Specifies the y-coordinate of the starting point of the Bezier spline. </param>
	<param name="Left2">Specifies the x-coordinate of the first control point of the Bezier spline.
                     </param>
	<param name="Top2">Specifies the y-coordinate of the first control point of the Bezier spline.
                    </param>
	<param name="Left3">Specifies the x-coordinate of the second control point of the Bezier
                     spline. </param>
	<param name="Top3">Specifies the y-coordinate of the second control point of the Bezier
                    spline. </param>
	<param name="Left4">Specifies the x-coordinate of the ending point of the Bezier spline. </param>
	<param name="Top4">Specifies the y-coordinate of the ending point of the Bezier spline. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the arc. </param>
	<param name="PenColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                        used to draw the Bezier. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Drawing an Bezier Curve on the image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.DrawBezier(ImageID, 50, 50, 100, 120, 180, 60, 500, 50, 10, oGdPictureImaging.ARGBI(255,0,0,0), True)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawCircle(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Boolean)">
	<summary>
  Draws a circle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the center of the circle. </param>
	<param name="DstTop">Specifies the y-coordinate of the center of the circle. </param>
	<param name="Diameter">Diameter of the circle in pixel. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function.
                         Color used to draw the circle. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the circle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Circle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.DrawCircle(ImageID, 50, 50, 80, oGdPictureImaging.ARGB(255,0,0,0), 10, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawCircle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws a circle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the center of the circle. </param>
	<param name="DstTop">Specifies the y-coordinate of the center of the circle. </param>
	<param name="Diameter">Diameter of the circle in pixel. </param>
	<param name="PenColor">Color value. You can obtain a suitable value by using the ARGBI() function.
                         Color used to draw the circle. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the circle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Circle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.DrawCircle(ImageID, 50, 50, 80, oGdPictureImaging.ARGBI(255,0,0,0), 10, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawCurve(System.Int32,System.Drawing.Point[],System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a curve on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="arPoints">Array of System.Drawing.Point that specifies the coordinates that the
                         cardinal spline passes through. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the curve. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the curve. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Curve on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Points(3) As Point
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
        Points(0).X = 50
        Points(0).Y = 50
        Points(1).X = 120
        Points(1).Y = 80
        Points(2).X = 260
        Points(2).Y = 20
 
      oGdPictureImaging.DrawCurve(ImageID, Points, 10, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledClosedCurve(System.Int32,System.Drawing.Point[],System.Drawing.Color,System.Single,System.Drawing.Drawing2D.FillMode,System.Boolean)">
	<summary>
  Draws a filled closed curve on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="arPoints">Array of System.Drawing.Point that specifies the coordinates that the
                         cardinal spline passes through. </param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function. Color
                          used to fill the polygon. </param>
	<param name="Tension">Nonnegative real number that specifies how tightly the spline bends as it
                        passes through the points. A value of 0 specifies that the spline is a
                        sequence of straight lines. As the value increases, the curve becomes
                        fuller. The default value is 0.5f. </param>
	<param name="FillMD">Specifies how to fill a closed area that is within another closed area and
                       that is created when the curve or path passes over itself. A member of the
                       Drawing2D.FillMode enumeration. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
  If the first and last coordinates in the points array are not identical, a line is drawn between them
  to close the polygon.
  </remarks>
	<example>
  Drawing a Filled Closed Curve on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Points(3) As Point
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
        Points(0).X = 50
        Points(0).Y = 50
        Points(1).X = 120
        Points(1).Y = 80
        Points(2).X = 260
        Points(2).Y = 20
 
      oGdPictureImaging.DrawFilledClosedCurve(ImageID, Points, 10,oGdPictureImaging.ARGB(255,0,0,0), 0.5, Drawing2D.FillMode.Alternate, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawClosedCurve(System.Int32,System.Drawing.Point[],System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a closed curve on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="arPoints">Array of System.Drawing.Point that specifies the coordinates that the
                         cardinal spline passes through. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the curve. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the curve. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Closed Curve on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Points(3) As Point
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
        Points(0).X = 50
        Points(0).Y = 50
        Points(1).X = 120
        Points(1).Y = 80
        Points(2).X = 260
        Points(2).Y = 20
 
      oGdPictureImaging.DrawClosedCurve(ImageID, Points, 10, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawPolygon(System.Int32,System.Drawing.Point[],System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a polygon on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="arPoints">Array of System.Drawing.Point that specifies the vertices of the polygon. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the polygon. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the polygon. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
  If the first and last coordinates in the points array are not identical, a line is drawn between them
  to close the polygon.
  </remarks>
	<example>
  Drawing a Polygon on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Points(3) As Point
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
        Points(0).X = 50
        Points(0).Y = 50
        Points(1).X = 120
        Points(1).Y = 80
        Points(2).X = 260
        Points(2).Y = 20
 
      oGdPictureImaging.DrawPolygon(ImageID, Points, 2, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawEllipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Boolean)">
	<summary>
  Draws an ellipse on a GdPicture image.
  </summary>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                        bounds the ellipse. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                       bounds the ellipse. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse. </param>
	<param name="Height">specifies the height of the rectangle that bounds the ellipse. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the ellipse. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the ellipse. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Ellipse on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawEllipse(ImageID, 50, 50, 25, 40, oGdPictureImaging.ARGB(255,0,0,0), 10, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawEllipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws an ellipse on a GdPicture image.
  </summary>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                        bounds the ellipse. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                       bounds the ellipse. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse. </param>
	<param name="Height">specifies the height of the rectangle that bounds the ellipse. </param>
	<param name="PenColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         used to draw the ellipse. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the ellipse. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Ellipse on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawEllipse(ImageID, 50, 50, 25, 40, oGdPictureImaging.ARGBI(255,0,0,0), 10, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedEllipse(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a rotated ellipse on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                        bounds the ellipse. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                       bounds the ellipse. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse. </param>
	<param name="Height">specifies the height of the rectangle that bounds the ellipse. </param>
	<param name="PenWidth">Width in pixel of the pen used to draw the rectangle. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the ellipse. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Rotated Ellipse on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedEllipse(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedEllipse(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws a rotated ellipse on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                        bounds the ellipse. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                       bounds the ellipse. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse. </param>
	<param name="Height">specifies the height of the rectangle that bounds the ellipse. </param>
	<param name="PenWidth">Width in pixel of the pen used to draw the rectangle. </param>
	<param name="PenColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         used to draw the ellipse. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Rotated Ellipse on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedEllipse(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGBI(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedFilledEllipse(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a rotated and filled ellipse on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                        bounds the ellipse. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                       bounds the ellipse. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse. </param>
	<param name="Height">specifies the height of the rectangle that bounds the ellipse. </param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function. Color
                          used to fill the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Drawing a Rotated Filled Ellipse on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedFilledEllipse(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedFilledEllipse(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws a rotated and filled ellipse on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                        bounds the ellipse. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                       bounds the ellipse. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse. </param>
	<param name="Height">specifies the height of the rectangle that bounds the ellipse. </param>
	<param name="FillColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                          used to fill the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Drawing a Rotated Filled Ellipse on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedFilledEllipse(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGBI(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledCircle(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
 Draws a filled circle on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the center of the circle. </param>
	<param name="DstTop">Specifies the y-coordinate of the center of the circle. </param>
	<param name="Diameter">Diameter of the circle in pixel. </param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function.
                         Color used to fill the circle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a filled circle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawFilledCircle(ImageID, 50, 50, 25,  oGdPictureImaging.ARGB(255,0,0,0),  True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledCircle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
 Draws a filled circle on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the center of the circle. </param>
	<param name="DstTop">Specifies the y-coordinate of the center of the circle. </param>
	<param name="Diameter">Diameter of the circle in pixel. </param>
	<param name="FillColor">Color value. You can obtain a suitable value by using the ARGBI() function.
                         Color used to fill the circle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a filled circle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawFilledCircle(ImageID, 50, 50, 25,  oGdPictureImaging.ARGBI(255,0,0,0),  True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledCircleTextureFromGdPictureImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
 Draws a filled circle on a GdPicture image using a texture from a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ImageTexture">GdPicture Image Identifier. Source image used for the texture. </param>
	<param name="DstLeft">Specifies the x-coordinate of the center of the circle. </param>
	<param name="DstTop">Specifies the y-coordinate of the center of the circle. </param>
	<param name="Diameter">Diameter of the circle in pixel. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
  Drawing a filled circle texture on the image from a GdPicture Image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim TextureImage As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.png")
      TextureImage = oGdPictureImaging.CreateGdPictureImageFromFile("texture.tiff")
 
      oGdPictureImaging.DrawFilledCircleTextureFromGdPictureImage(ImageID, TextureImage, 50, 50, 25, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(TextureImage)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledCircleTextureFromFile(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
 Draws a filled circle on a GdPicture image using a texture from a file.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TextureFilePath">The texture source file path. Can be an empty string. If empty, prompts the
                               user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="DstLeft">Specifies the x-coordinate of the center of the circle. </param>
	<param name="DstTop">Specifies the y-coordinate of the center of the circle. </param>
	<param name="Diameter">Diameter of the circle in pixel. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
  Drawing a filled circle texture on the image from a texture file path.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawFilledCircleTextureFromFile(ImageID, "boxes.tiff", 50, 50, 25, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledPolygon(System.Int32,System.Drawing.Point[],System.Drawing.Color,System.Drawing.Drawing2D.FillMode,System.Boolean)">
	<summary>
  Draws a filled polygon on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="arPoints">Array of System.Drawing.Point that specifies the vertices of the polygon. </param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function. Color
                          used to fill the polygon. </param>
	<param name="FillMD">Specifies how to fill a closed area that is within another closed area and
                       that is created when the polygon or path passes over itself.A member of the
                       Drawing2D.FillMode enumeration. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
  If the first and last coordinates in the points array are not identical, a line is drawn between them
  to close the polygon.
  </remarks>
	<example>
  Drawing a Filled Polygon on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Points(3) As Point
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
        Points(0).X = 50
        Points(0).Y = 50
        Points(1).X = 120
        Points(1).Y = 80
        Points(2).X = 260
        Points(2).Y = 20
 
      oGdPictureImaging.DrawFilledPolygon(ImageID, Points, oGdPictureImaging.ARGB(255,0,0,0), Drawing2D.FillMode.Alternate, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledPolygonTextureFromFile(System.Int32,System.String,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Boolean)">
	<summary>
  Draws a filled polygon on a GdPicture image using a texture from a file.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TextureFilePath">The texture source file path. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="arPoints">Array of System.Drawing.Point that specifies the vertices of the
                         polygon. </param>
	<param name="FillMD">Specifies how to fill a closed area that is within another closed area
                       and that is created when the polygon or path passes over itself.A
                       member of the Drawing2D.FillMode enumeration. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  If the first and last coordinates in the points array are not identical, a line is drawn between them
  to close the polygon.
  </remarks>                                                                                           \
  <example>
  Drawing a Filled Polygon on the image with Texture from file.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Points(3) As Point
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
        Points(0).X = 50
        Points(0).Y = 50
        Points(1).X = 120
        Points(1).Y = 80
        Points(2).X = 260
        Points(2).Y = 20
 
      oGdPictureImaging.DrawFilledPolygonTextureFromFile(ImageID, "Boxes,tiff", Points, Drawing2D.FillMode.Alternate, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledPolygonTextureFromGdPictureImage(System.Int32,System.Int32,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Boolean)">
	<summary>
 Draws a filled polygon on a GdPicture image using a texture from a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ImageTexture">GdPicture Image Identifier. Source image used for the texture. </param>
	<param name="arPoints">Array of System.Drawing.Point that specifies the vertices of the polygon.
                        </param>
	<param name="FillMD">Specifies how to fill a closed area that is within another closed area
                      and that is created when the polygon or path passes over itself.A member
                      of the Drawing2D.FillMode enumeration. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 If the first and last coordinates in the points array are not identical, a line is drawn between them
 to close the polygon.
 </remarks>
	<example>
 Drawing a Filled Polygon on the image with Texture from a GdPicture Image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Points(3) As Point
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Org.png")
     TextureImg = oGdPictureImaging.CreateGdPictureImageFromFile("Texture.tiff")
 
       Points(0).X = 50
       Points(0).Y = 50
       Points(1).X = 120
       Points(1).Y = 80
       Points(2).X = 260
       Points(2).Y = 20
 
     oGdPictureImaging.DrawFilledPolygonTextureFromGdPictureImage(ImageID, TextureImg, Points, Drawing2D.FillMode.Alternate, True)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledEllipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
 Draws a filled ellipse on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                       bounds the ellipse. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                      bounds the ellipse. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse. </param>
	<param name="Height">specifies the height of the rectangle that bounds the ellipse. </param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to fill the ellipse. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Filled Ellipse on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawFilledEllipse(ImageID, 50, 50, 25, 40, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledEllipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
 Draws a filled ellipse on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                       bounds the ellipse. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                      bounds the ellipse. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse. </param>
	<param name="Height">specifies the height of the rectangle that bounds the ellipse. </param>
	<param name="FillColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         used to fill the ellipse. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Filled Ellipse on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawFilledEllipse(ImageID, 50, 50, 25, 40, oGdPictureImaging.ARGBI(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a filled rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function. Color
                          used to fill the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Filled Rectangle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawFilledRectangle(ImageID, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws a filled rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="FillColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                          used to fill the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Filled Rectangle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawFilledRectangle(ImageID, 50, 50, 50, 100, oGdPictureImaging.ARGBI(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGradientCurve(System.Int32,System.Drawing.Point[],System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a linear gradient curve on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="arPoints">Array of System.Drawing.Point that specifies the coordinates that the
                         cardinal spline passes through. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the curve. </param>
	<param name="StartColor">Color Object. You can build a Color Object using the ARGB() function. Start
                           color of the curve. </param>
	<param name="EndColor">Color Object. You can build a Color Object using the ARGB() function. End
                         color of the curve. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Gradient Curve on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Points(3) As Point
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
        Points(0).X = 50
        Points(0).Y = 50
        Points(1).X = 120
        Points(1).Y = 80
        Points(2).X = 260
        Points(2).Y = 20
 
      oGdPictureImaging.DrawGradientCurve(ImageID, Points, 10, oGdPictureImaging.ARGB(255,0,0,0), oGdPictureImaging.ARGB(255,255,255,255), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGradientLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a linear gradient line on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="SrcLeft">Specifies the x-coordinate of the starting point of the line. </param>
	<param name="SrcTop">Specifies the y-coordinate of the starting point of the line. </param>
	<param name="DstLeft">Specifies the x-coordinate of the ending point of the line. </param>
	<param name="DstTop">Specifies the y-coordinate of the ending point of the line. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the line. </param>
	<param name="StartColor">Color Object. You can build a Color Object using the ARGB() function. Start
                           color of the line. </param>
	<param name="EndColor">Color Object. You can build a Color Object using the ARGB() function. End
                         color of the line. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Gradient Line on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawGradientLine(ImageID, 50, 10, 250, 200, 5, oGdPictureImaging.ARGB(255,0,0,0), oGdPictureImaging.ARGB(255,255,255,255), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawGrid(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
  Draws a grid on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the starting point of the grid. </param>
	<param name="DstTop">Specifies the y-coordinate of the starting point of the grid. </param>
	<param name="Width">Width of the grid in pixel. </param>
	<param name="Height">Height of the grid in pixel. </param>
	<param name="HorizontalStep">Space in pixel between each columns. </param>
	<param name="VerticalStep">Space in pixel between each rows. </param>
	<param name="PenWidth">With of the pen (in pixel) used to draw the grid. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function.
                         Pen color used to draw the grid. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Grid on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawGrid(ImageID, 50, 10, 250, 200, 10, 8, 2, oGdPictureImaging.ARGB(255,0,0,0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a line on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="SrcLeft">Specifies the x-coordinate of the starting point of the line. </param>
	<param name="SrcTop">Specifies the y-coordinate of the starting point of the line. </param>
	<param name="DstLeft">Specifies the x-coordinate of the ending point of the line. </param>
	<param name="DstTop">Specifies the y-coordinate of the ending point of the line. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the line. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the line. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Draws a Semi transparent Red line using 2 pixels pen size from (0,0) to (200,200) on a GdPicture
  image
  <code lang="vb.net">
  oGdPictureImaging.DrawLine(ImageID, 0, 0, 200, 200, 2, oGdPictureImaging.ARGB(125, 255, 0, 0), True)
  </code>
	</example>
	<example>
  Drawing a Line on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawLine(ImageID, 50, 10, 250, 200, 2, oGdPictureImaging.ARGB(255,0,0,0), True )
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws a line on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="SrcLeft">Specifies the x-coordinate of the starting point of the line. </param>
	<param name="SrcTop">Specifies the y-coordinate of the starting point of the line. </param>
	<param name="DstLeft">Specifies the x-coordinate of the ending point of the line. </param>
	<param name="DstTop">Specifies the y-coordinate of the ending point of the line. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the line. </param>
	<param name="PenColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         used to draw the line. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Draws a Semi transparent Red line using 2 pixels pen size from (0,0) to (200,200) on a GdPicture
  image
  <code lang="vb.net">
  oGdPictureImaging.DrawLine(ImageID, 0, 0, 200, 200, 2, oGdPictureImaging.ARGBI(125, 255, 0, 0), True)
  </code>
	</example>
	<example>
  Drawing a Line on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawLine(ImageID, 50, 10, 250, 200, 2, oGdPictureImaging.ARGBI(255,0,0,0), True )
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawLineArrow(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a line + an arrow at the end of this one.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="SrcLeft">Specifies the x-coordinate of the starting point of the line. </param>
	<param name="SrcTop">Specifies the y-coordinate of the starting point of the line. </param>
	<param name="DstLeft">Specifies the x-coordinate of the ending point of the line. </param>
	<param name="DstTop">Specifies the y-coordinate of the ending point of the line. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the line. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the line. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Line Arrow on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawLineArrow(ImageID, 50, 10, 250, 200, 2, oGdPictureImaging.ARGB(255,0,0,0), True )
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRoundedRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a rounded rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="Radius">Size of the radius in pixel. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the rectangle. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Rounded Rectangle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRoundedRectangle(ImageID, 50, 50, 50, 100, 30.0, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledRoundedRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a filled and rounded rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="Radius">Radius value between 0 and 90. </param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function. Color
                          used to fill the circle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Filled Rounded Rectangle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawFilledRoundedRectangle(ImageID, 50, 50, 50, 100, 30.0, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledRoundedRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Boolean)">
	<summary>
  Draws a filled and rounded rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="Radius">Radius value between 0 and 90. </param>
	<param name="FillColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                          used to fill the circle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Filled Rounded Rectangle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawFilledRoundedRectangle(ImageID, 50, 50, 50, 100, 30.0, oGdPictureImaging.ARGBI(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the rectangle. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Draws a Semi transparent Green rectangle using 2 pixels pen size from (0,0) to (200,200)
  <code lang="vb.net">
  oGdPictureImaging.DrawRectangle(ImageID, 0, 0, 200, 200, 2, oGdPictureImaging.ARGB(125, 0, 255, 0), True)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws a rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the rectangle. </param>
	<param name="PenColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         used to draw the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Draws a Semi transparent Green rectangle using 2 pixels pen size from (0,0) to (200,200)
  <code lang="vb.net">
  oGdPictureImaging.DrawRectangle(ImageID, 0, 0, 200, 200, 2, oGdPictureImaging.ARGBI(125, 0, 255, 0), True)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a pie on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                        bounds the ellipse in which to draw the pie. </param>
	<param name="DstTop">the y-coordinate of the upper-left corner of the rectangle that bounds
                       the ellipse in which to draw the pie. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse in which to
                      draw the pie. </param>
	<param name="Height">Specifies the height of the rectangle that bounds the ellipse in which to
                       draw the pie. </param>
	<param name="StartAngle">Specifies the angle, in degrees, between the x-axis and the starting point
                           of the arc that defines the pie. A positive value specifies clockwise
                           rotation. </param>
	<param name="SweepAngle">the angle, in degrees, between the starting and ending points of the arc
                           that defines the pie. A positive value specifies clockwise rotation. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the rectangle. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the pie. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Pie on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim TextureImg As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Org.png")
      TextureImg = oGdPictureImaging.CreateGdPictureImageFromFile("Texture.tiff")
 
      oGdPictureImaging.DrawPie(ImageID, 50, 10, 250, 200, 20.0, 90.0, 10, oGdPictureImaging.ARGB(255,0,0,0), True )
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      GdPictureImaging.ReleaseGdPictureImage(TextureImg)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws a pie on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                        bounds the ellipse in which to draw the pie. </param>
	<param name="DstTop">the y-coordinate of the upper-left corner of the rectangle that bounds
                       the ellipse in which to draw the pie. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse in which to
                      draw the pie. </param>
	<param name="Height">Specifies the height of the rectangle that bounds the ellipse in which to
                       draw the pie. </param>
	<param name="StartAngle">Specifies the angle, in degrees, between the x-axis and the starting point
                           of the arc that defines the pie. A positive value specifies clockwise
                           rotation. </param>
	<param name="SweepAngle">the angle, in degrees, between the starting and ending points of the arc
                           that defines the pie. A positive value specifies clockwise rotation. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the rectangle. </param>
	<param name="PenColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         used to draw the pie. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Pie on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim TextureImg As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Org.png")
      TextureImg = oGdPictureImaging.CreateGdPictureImageFromFile("Texture.tiff")
 
      oGdPictureImaging.DrawPie(ImageID, 50, 10, 250, 200, 20.0, 90.0, 10, oGdPictureImaging.ARGBI(255,0,0,0), True )
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      GdPictureImaging.ReleaseGdPictureImage(TextureImg)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a filled pie on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                        bounds the ellipse in which to draw the pie. </param>
	<param name="DstTop">the y-coordinate of the upper-left corner of the rectangle that bounds
                       the ellipse in which to draw the pie. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse in which to
                      draw the pie. </param>
	<param name="Height">Specifies the height of the rectangle that bounds the ellipse in which to
                       draw the pie. </param>
	<param name="StartAngle">Specifies the angle, in degrees, between the x-axis and the starting point
                           of the arc that defines the pie. A positive value specifies clockwise
                           rotation. </param>
	<param name="SweepAngle">the angle, in degrees, between the starting and ending points of the arc
                           that defines the pie. A positive value specifies clockwise rotation. </param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function. Color
                          used to fill the pie. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Filled Pie on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawFilledPie(ImageID, 50, 50, 25, 25, 25.0, 90.0, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawFilledPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Boolean)">
	<summary>
  Draws a filled pie on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                        bounds the ellipse in which to draw the pie. </param>
	<param name="DstTop">the y-coordinate of the upper-left corner of the rectangle that bounds
                       the ellipse in which to draw the pie. </param>
	<param name="Width">Specifies the width of the rectangle that bounds the ellipse in which to
                      draw the pie. </param>
	<param name="Height">Specifies the height of the rectangle that bounds the ellipse in which to
                       draw the pie. </param>
	<param name="StartAngle">Specifies the angle, in degrees, between the x-axis and the starting point
                           of the arc that defines the pie. A positive value specifies clockwise
                           rotation. </param>
	<param name="SweepAngle">the angle, in degrees, between the starting and ending points of the arc
                           that defines the pie. A positive value specifies clockwise rotation. </param>
	<param name="FillColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                          used to fill the pie. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Filled Pie on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawFilledPie(ImageID, 50, 50, 25, 25, 25.0, 90.0, oGdPictureImaging.ARGBI(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedFilledRectangle(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a rotated and filled rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function. Color
                          used to fill the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Drawing a Rotated Filled Rectangle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedFilledRectangle(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedFilledRectangle(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws a rotated and filled rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="FillColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                          used to fill the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Drawing a Rotated Filled Rectangle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedFilledRectangle(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGBI(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedRectangle(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean)">
	<summary>
  Draws a rotated rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="PenWidth">Width in pixel of the pen used to draw the rectangle. </param>
	<param name="PenColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         used to draw the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Rotated Rectangle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedRectangle(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGB(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedRectangle(System.Int32,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws a rotated rectangle on a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle. </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle. </param>
	<param name="Width">Specifies the width of the rectangle. </param>
	<param name="Height">Specifies the height of the rectangle. </param>
	<param name="PenWidth">Width in pixel of the pen used to draw the rectangle. </param>
	<param name="PenColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         used to draw the rectangle. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Drawing a Rotated Rectangle on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedRectangle(ImageID, 50.0, 50, 50, 50, 100, oGdPictureImaging.ARGBI(255,0,0,0), True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawLineTextureFromFile(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
  Draws a textured line on a GdPicture image using a texture from a file.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TextureFilePath">The texture source file path. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="SrcLeft">Specifies the x-coordinate of the starting point of the line. </param>
	<param name="SrcTop">Specifies the y-coordinate of the starting point of the line. </param>
	<param name="DstLeft">Specifies the x-coordinate of the ending point of the line. </param>
	<param name="DstTop">Specifies the y-coordinate of the ending point of the line. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the line. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files.
  </remarks>
	<example>
  Drawing a Line on the image with Texture from a path.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
      oGdPictureImaging.DrawLineArrow(ImageID, "Texture.tiff", 50, 10, 250, 200, 10, True )
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawLineTextureFromGdPictureImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
	<summary>
 Draws a textured line on a GdPicture image using a texture from a GdPicture Image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ImageTexture">GdPicture Image Identifier. Source image used for the texture. </param>
	<param name="SrcLeft">Specifies the x-coordinate of the starting point of the line. </param>
	<param name="SrcTop">Specifies the y-coordinate of the starting point of the line. </param>
	<param name="DstLeft">Specifies the x-coordinate of the ending point of the line. </param>
	<param name="DstTop">Specifies the y-coordinate of the ending point of the line. </param>
	<param name="PenWidth">The width in pixel of the pen used to draw the line. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 </remarks>
	<example>
 Drawing a Line on the image with Texture from a path.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim TextureImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Org.png")
     TextureImg = oGdPictureImaging.CreateGdPictureImageFromFile("Texture.tiff")
 
     oGdPictureImaging.DrawLineArrow(ImageID, TextureImg, 50, 10, 250, 200, 10, True )
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     GdPictureImaging.ReleaseGdPictureImage(TextureImg)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedText(System.Int32,System.Single,System.String,System.Int32,System.Int32,System.Single,GdPicture.FontStyle,System.Drawing.Color,System.String,System.Boolean)">
	<summary>
 Draws a rotated text on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle
                       that bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle
                      that bounds the </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="TextColor">Color Object. You can build a Color Object using the ARGB() function.
                         Color of the text. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing a Rotated Text on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedText(ImageID, 45, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGB(255,0,0,0), "Arial", True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedText(System.Int32,System.Single,System.String,System.Int32,System.Int32,System.Single,GdPicture.FontStyle,System.Int32,System.String,System.Boolean)">
	<summary>
 Draws a rotated text on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle
                       that bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle
                      that bounds the </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="TextColor">Color value. You can obtain a suitable value by using the ARGBI() function.
                         Color of the text. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing a Rotated Text on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedText(ImageID, 45, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGBI(255,0,0,0), "Arial", True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawRotatedTextBackColor(System.Int32,System.Single,System.String,System.Int32,System.Int32,System.Single,GdPicture.FontStyle,System.Drawing.Color,System.Drawing.Color,System.String,System.Boolean)">
	<summary>
 Draws a rotated text with background color on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                       bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                      bounds the </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="TextColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         of the text. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         of the background. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing a Rotated Text with specified Back Color on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawRotatedTextBackColor(ImageID, 45, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGB(255,0,0,0), oGdPictureImaging.ARGB(255,0,255,0), "Arial", True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawText(System.Int32,System.String,System.Int32,System.Int32,System.Single,GdPicture.FontStyle,System.Int32,System.String,System.Boolean)">
	<summary>
 Draws a text on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                       bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                      bounds the </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="TextColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         of the text. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing Text on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawText(ImageID, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGBI(255,0,0,0), "Arial", True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawText(System.Int32,System.String,System.Int32,System.Int32,System.Single,GdPicture.FontStyle,System.Drawing.Color,System.String,System.Boolean)">
	<summary>
 Draws a text on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                       bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                      bounds the </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="TextColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         of the text. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing Text on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawText(ImageID, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGB(255,0,0,0), "Arial", True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetTextHeight(System.Int32,System.String,System.String,System.Single,GdPicture.FontStyle)">
	<summary>
 Calculate the height of the specified text, based on the specified font, font size and font style.
 The result is measured in units specified by the FontSetUnit() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Text">Text to draw. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<returns>
 The height of the text measured in units specified by the FontSetUnit() function.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<example>
  Retrieving the minimal height required to write a certain text on an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Height As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      Height = oGdPictureImaging.GetTextHeight(ImageID,  "GdPicture Imaging", "Arial",10.0, FontStyle.FontStyleRegular)
 
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetTextWidth(System.Int32,System.String,System.String,System.Single,GdPicture.FontStyle)">
	<summary>
 Calculate the width of the specified text, based on the specified font, font size and font style. The
 result is measured in units specified by the FontSetUnit() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Text">Text to draw. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<returns>
 The width of the text measured in units specified by the FontSetUnit() function.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<example>
  Retrieving the minimal width required to write a certain text on an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Width As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      Width = oGdPictureImaging.GetTextWidth(ImageID,  "GdPicture Imaging", "Arial",10.0, FontStyle.FontStyleRegular)
 
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawTextBackColor(System.Int32,System.String,System.Int32,System.Int32,System.Single,GdPicture.FontStyle,System.Int32,System.Int32,System.String,System.Boolean)">
	<summary>
 Draws a text with background color on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                       bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                      bounds the </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="TextColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         of the text. </param>
	<param name="BackColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         of the background. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing Text with specified Back Color on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawTextBackColor(ImageID, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGBI(255,0,0,0), oGdPictureImaging.ARGBI(255,0,255,0), "Arial", True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawTextBackColor(System.Int32,System.String,System.Int32,System.Int32,System.Single,GdPicture.FontStyle,System.Drawing.Color,System.Drawing.Color,System.String,System.Boolean)">
	<summary>
 Draws a text with background color on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                       bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                      bounds the </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="TextColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         of the text. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         of the background. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing Text with specified Back Color on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawTextBackColor(ImageID, "GdPicture Imaging", 50, 50, 9.0, FontStyle.FontStyleRegular, oGdPictureImaging.ARGB(255,0,0,0), oGdPictureImaging.ARGB(255,0,255,0), "Arial", True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawTextBox(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,GdPicture.TextAlign,GdPicture.FontStyle,System.Int32,System.String,System.Boolean,System.Boolean)">
	<summary>
 Draws an aligned text into a bounding box on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Text">Text to draw. </param>
	<param name="Left">Specifies the x-coordinate of the upper-left corner of the text box. </param>
	<param name="Top">Specifies the y-coordinate of the upper-left corner of the text box. </param>
	<param name="Width">Specifies the width in pixel of the text box. </param>
	<param name="Height">Specifies the height in pixel of the text box. </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="Alignment">A member of the TextAlign enumeration. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="TextColor">Color value. You can obtain a suitable value by using the ARGBI() function.
                         Color of the text. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="DrawBox">Set this parameter to True to draw the textbox that bounds the text. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing Text Box on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawTextBox(ImageID, "GdPicture Imaging", 50, 50, 200, 50, 10.0, TextAlign.TextAlignCenter, FontStyle.FontStyleRegular, oGdPictureImaging.ARGBI(255, 0, 0, 0), "Arial", True, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawTextBox(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,GdPicture.TextAlign,GdPicture.FontStyle,System.Drawing.Color,System.String,System.Boolean,System.Boolean)">
	<summary>
 Draws an aligned text into a bounding box on a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Text">Text to draw. </param>
	<param name="Left">Specifies the x-coordinate of the upper-left corner of the text box. </param>
	<param name="Top">Specifies the y-coordinate of the upper-left corner of the text box. </param>
	<param name="Width">Specifies the width in pixel of the text box. </param>
	<param name="Height">Specifies the height in pixel of the text box. </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="Alignment">A member of the TextAlign enumeration. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="TextColor">Color Object. You can build a Color Object using the ARGB() function.
                         Color of the text. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="DrawBox">Set this parameter to True to draw the textbox that bounds the text. </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing Text Box on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawTextBox(ImageID, "GdPicture Imaging", 50, 50, 200, 50, 10.0, TextAlign.TextAlignCenter, FontStyle.FontStyleRegular, oGdPictureImaging.ARGB(255, 0, 0, 0), "Arial", True, True)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawTextGradient(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,GdPicture.FontStyle,System.String,System.Boolean)">
	<summary>
 Draws a text on a GdPicture image using a linear gradient Imaging.Colors.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                       bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                      bounds the </param>
	<param name="StartColor">Color value. You can obtain a suitable value by using the ARGBI() function. Start
                          color of the gradient. </param>
	<param name="EndColor">Color value. You can obtain a suitable value by using the ARGBI() function. End
                        color of the gradient. </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing Gradient Text on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawTextGradient(ImageID, "GdPicture Imaging", 50, 50, oGdPictureImaging.ARGB(255, 0, 0, 0), oGdPictureImaging.ARGB(255, 255,255,255), 10.0, FontStyle.FontStyleRegular, "Arial",  True)
 
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawTextGradient(System.Int32,System.String,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Single,GdPicture.FontStyle,System.String,System.Boolean)">
	<summary>
 Draws a text on a GdPicture image using a linear gradient Imaging.Colors.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle that
                       bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle that
                      bounds the </param>
	<param name="StartColor">Color Object. You can build a Color Object using the ARGB() function. Start
                          color of the gradient. </param>
	<param name="EndColor">Color Object. You can build a Color Object using the ARGB() function. End
                        color of the gradient. </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
 To draw watermark text use an ARGB value with alpha component &lt; 255. 
 </remarks>
	<example>
  Drawing Gradient Text on the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawTextGradient(ImageID, "GdPicture Imaging", 50, 50, oGdPictureImaging.ARGB(255, 0, 0, 0), oGdPictureImaging.ARGB(255, 255,255,255), 10.0, FontStyle.FontStyleRegular, "Arial",  True)
 
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawTextTextureFromFile(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Single,GdPicture.FontStyle,System.String,System.Boolean)">
	<summary>
  Draws a textured text on a GdPicture image using a texture from a file.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TextureFilePath">The texture source file path. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle
                        that bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle
                       that bounds the </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<remarks>
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files.
  </remarks>
	<example>
  Drawing Text on the image with Texture loaded from file.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
 
      oGdPictureImaging.DrawTextTextureFromFile(ImageID, "Texture.tiff", "GdPicture Imaging", 50, 50, 10.0, FontStyle.FontStyleRegular, "Arial",  True)
 
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DrawTextTextureFromGdPictureImage(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Single,GdPicture.FontStyle,System.String,System.Boolean)">
	<summary>
  Draws a textured text on a GdPicture image using a texture from a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ImageTexture">GdPicture Image Identifier. Source image used for the texture. </param>
	<param name="Text">Text to draw. </param>
	<param name="DstLeft">Specifies the x-coordinate of the upper-left corner of the rectangle
                        that bounds the </param>
	<param name="DstTop">Specifies the y-coordinate of the upper-left corner of the rectangle
                       that bounds the </param>
	<param name="FontSize">The font size in units specified by the FontSetUnit() function. </param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<param name="FontName">The name of the font. IE: "Arial" </param>
	<param name="AntiAlias">Set to True to apply the Antialiasing algorithm else False. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<example>
  Drawing Text on the image with Texture loaded from a GdPicture Image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim TextureImg As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Image.png")
      TextureImg = oGdPictureImaging.CreateGdPictureImageFromFile("Texture.tiff")
 
 
      oGdPictureImaging.DrawTextTextureFromFile(ImageID, TextureImg, "GdPicture Imaging", 50, 50, 10.0, FontStyle.FontStyleRegular, "Arial",  True)
 
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalRemoveIsolatedDots8(System.Int32)">
	<summary>
 Removes 1 pixel-sized isolated black dots in the 8 directions: E, NE, SE, S, SW, W, NW, N in a
 GdPicture image or in an area of a GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalRemoveIsolatedDots4(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalRemoveIsolatedDots2x2(System.Int32)"/>
	<example>
 Using RemoveIsolatedDots8 to Remove Isolated dots with 1 pixels in size with 8 directions in a binary
 image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalRemoveIsolatedDots8(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalRemoveIsolatedDots4(System.Int32)">
	<summary>
 Removes 1 pixel-sized isolated black dots the 4 directions: N, S, W, E in a GdPicture image or in an
 area of a GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalRemoveIsolatedDots8(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalRemoveIsolatedDots2x2(System.Int32)"/>
	<example>
 Using RemoveIsolatedDots4 to Remove Isolated dots with 1 pixels in size in 4 directions in a binary
 image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalRemoveIsolatedDots4(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalRemoveIsolatedDots2x2(System.Int32)">
	<summary>
 Removes 4 pixels-sized isolated black dots in the 8 directions: E, NE, SE, S, SW, W, NW, N in a
 GdPicture image or in an area of a GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalRemoveIsolatedDots8(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalRemoveIsolatedDots4(System.Int32)"/>
	<example>
 Using RemoveIsolatedDots2x2 to Remove Isolated dots with 4 pixels in size using 8 directions in a
 binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalRemoveIsolatedDots2x2(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalFillHolesV(System.Int32)">
	<summary>
 Fills the 1 pixel size holes in the vertical direction in a GdPicture image or in an area of a
 GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalFillHolesH(System.Int32)"/>
	<example>
 Using FillHolesV on a binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalFillHolesV(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalFillHolesHV(System.Int32)">
	<summary>
 Fills the 1 pixel size holes in the vertical and horizontal directions in a GdPicture image or in an
 area of a GdPicture image defined by SetROI() function. This functions is equivalent of 2 successive
 call of FxBitonalFillHolesV() and FxBitonalFillHolesH()
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalFillHolesH(System.Int32)"/>
	<example>
 Using FillHolesV on a binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalFillHolesHV(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalFillHolesH(System.Int32)">
	<summary>
 Fills the 1 pixel size holes in the horizontal direction in a GdPicture image or in an area of a
 GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalFillHolesV(System.Int32)"/>
	<example>
 Using FillHolesH on a binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalFillHolesG(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesH(System.Int32)">
	<summary>
 Removes the 1 pixel-sized lines in the horizontal direction in a GdPicture image or in an area of a
 GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesV(System.Int32)"/>
	<example>
 Using RemoveLinesH to Remove Horizontal lines in a binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonaRemoveLinesH(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesV(System.Int32)">
	<summary>
 Removes the 1 pixel-sized lines in the vertical direction in a GdPicture image or in an area of a
 GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesH(System.Int32)"/>
	<example>
 Using RemoveLinesV to Remove Vertical lines in a binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonaRemoveLinesV(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesH2(System.Int32)">
	<summary>
 Removes the 2 pixel-sized lines in the horizontal direction in a GdPicture image or in an area of a
 GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesV2(System.Int32)"/>
	<example>
 Using RemoveLinesH2 to Remove Horizontal lines with width 2 pixels in a binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonaRemoveLinesH2(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesV2(System.Int32)">
	<summary>
 Removes the 2 pixel-sized lines in the vertical direction in a GdPicture image or in an area of a
 GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesH2(System.Int32)"/>
	<example>
 Using RemoveLinesV2 to Remove Vertical lines with width 2 pixels in a binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonaRemoveLinesV2(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesH3(System.Int32)">
	<summary>
 Removes the 3 pixel-sized lines in the horizontal direction in a GdPicture image or in an area of a
 GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesV3(System.Int32)"/>
	<example>
 Using RemoveLinesH3 to Remove Horizontal lines with width 3 pixels in a binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonaRemoveLinesH3(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesV3(System.Int32)">
	<summary>
 Removes the 3 pixel-sized lines in the vertical direction in a GdPicture image or in an area of a
 GdPicture image defined by SetROI() function.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonaRemoveLinesH3(System.Int32)"/>
	<example>
 Using RemoveLinesV3 to Remove Horizontal lines with width 3 pixels in a binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonaRemoveLinesV3(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalDilate8(System.Int32)">
	<summary>
 Dilates black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 function.
 This filter helps to dilate black pixels in the 8 directions: E, NE, SE, S, SW, W, NW, N. The actions
 of this filter are more prominent than FxDilate4.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalDilate4(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalDilateV(System.Int32)"/>
	<example>
 Using Dilate8 on a binary image in order to dilate black pixels and erode black ones.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalDilate8(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalDilate4(System.Int32)">
	<summary>
 Dilates black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 function.
 
 This filter helps to dilate black pixels in the 4 directions: N, S, W, E. The actions of this filter
 are less prominent than FxDilate8.
 It can be used used to improve very fine and degraded characters.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalDilate8(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalDilateV(System.Int32)"/>
	<example>
 Using Dilate4 on a binary image to dilate black pixels and erode black ones.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalDilate4(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalErode8(System.Int32)">
	<summary>
 Erodes black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 function.
 
 This filter retains the black pixels surrounded in the 8 directions: E, NE, SE, S, SW, W, NW, N.
 The actions of this filter are more prominent than FxErode4.
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalErode4(System.Int32)"/>
	<example>
 Using Erode8 on a binary image to erode black pixels and dilate black ones.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalErode8(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalErode4(System.Int32)">
	<summary>
 Erodes black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 function.
 
 This filter retains the black pixels surrounded in the four cardinal directions: N, S, W, E.
 
 Very useful when the characters are bold and very close to each other.
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalErode8(System.Int32)"/>
	<example>
 Using Erode4 on a binary image to erode black pixels and dilate black ones.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalErode4(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBitonalDilateV(System.Int32)">
	<summary>
 Dilates black pixels in a GdPicture image or in an area of a GdPicture image defined by SetROI()
 function.
 
 This filter helps to dilate black pixels in the 2 directions: N, S. The actions of this filter are
 less prominent than FxDilate4.
 
 This function should be use only on bitonal images.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalDilate4(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBitonalDilate8(System.Int32)"/>
	<example>
 Using DilateV on a binary image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBitonalDilateV(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FloodFill(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Fills an area of unified color in a GdPicture image with a specific color.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="XStart">Specifies the x-coordinate, in pixel, of the point where filling is to
                      start. </param>
	<param name="YStart">Specifies the y-coordinate, in pixel, of the point where filling is to
                      start. </param>
	<param name="FillColor">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                         to use for the filling operation. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Applying floodfill on image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FloodFill(ImageID, 120, 65, oGdPictureImaging.ARGBI(255, 255, 0, 0))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FloodFill(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
 Fills an area of unified color in a GdPicture image with a specific color.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="XStart">Specifies the x-coordinate, in pixel, of the point where filling is to
                      start. </param>
	<param name="YStart">Specifies the y-coordinate, in pixel, of the point where filling is to
                      start. </param>
	<param name="FillColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         to use for the filling operation. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Applying floodfill on image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FloodFill(ImageID, 120, 65, Color.AliceBlue)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.RemoveHolePunch(System.Int32)">
	<summary>
  Removes Hole Punches on the left side of the image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Applying HolePunch which automatically process the Left Margin of the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.RemoveHolePunch(ImageID)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.RemoveHolePunch(System.Int32,GdPicture.HolePunchMargins)">
	<summary>
  Removes Hole Punches on any specified margin of the image. This methods can be used on 1bpp image only.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Margins">A member of the HolePunchMargins enumeration. You can combine margins using the or operator.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  Binary operator "OR" can be used with HolePunch Enumerations to specify more than one margin at the same time. 
  </remarks>
	<example>
  Applying HolePunch on all regions of image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.RemoveHolePunch(ImageID, HolePunchMargins.MarginBottom Or HolePunchMargins.MarginLeft Or HolePunchMargins.MarginRight Or HolePunchMargins.MarginTop)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FormDropOut(System.Int32,System.Int32,System.Boolean)">
	<summary>
 Removes Empty Form information and keeps the entered information only. Highly useful for better and
 faster OCR processing, and reducing the Image compression size.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The Filled Form. </param>
	<param name="TemplateID">GdPicture Image Identifier. The Empty Template Form Document.</param>
	<param name="UseGapCorrection">Whether or not to try to fix gaps of interaction between form and
                                data.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Setting UseGapCorrection to True, will slow the speed of the algorithm, but will result in much more
 accurate characters and filled data. Nonetheless, most applications will not need it. If accuracy is
 what is sought after, set it to true, but make sure the process is called after the scan process and
 not during to avoid any delays. The slowing of the UseGapCorrection option should be overlooked when
 considering the tremendous outcomes of FormDropOut mentioned above on the application in general.
 </remarks>
	<example>
 Applying FormDropOut on all regions of image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim TemplateID As Integer
 
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     TemplateID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FormDropOut(ImageID, TemplateID, True)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxTwirl(System.Int32,System.Single)">
	<summary>
 Performs a twirl effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Factor">Twirl Factor between 0 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Twirl effect on the image with a set Twirl Factor.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxTwirl(ImageID, 30)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxSwirl(System.Int32,System.Single)">
	<summary>
 Performs a swirl effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Factor">Swirl Factor between 1 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Swirl effect on the image with a set Swirl Factor.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxSwirl(ImageID, 30)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxMirrorRounded(System.Int32)">
	<summary>
 Performs a rounded mirror effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Mirror Rounded effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxMirrorRounded(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxhWaves(System.Int32,System.Int32,System.Int32)">
	<summary>
 Performs horizontal wave effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="WidthWave">Width of the wave in pixels. </param>
	<param name="HeightWave">Height of the wave in pixels. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying Horizontal Waves effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxhWaves(ImageID, 10, 20)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxvWaves(System.Int32,System.Int32,System.Int32)">
	<summary>
 Performs vertical wave effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="WidthWave">Width of the wave in pixels. </param>
	<param name="HeightWave">Height of the wave in pixels. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying Vertical Waves effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxvWaves(ImageID, 10, 20)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBlur(System.Int32)">
	<summary>
 Performs blur effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a blur effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBlur(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxSubtractBackground(System.Int32,System.Int32,System.Boolean)">
	<summary>
 Performs a Subtract Background (RollingBall) algorithm. It mainly is used for Medical Images like
 images of cells. The two parameters in the algorithm give you control over the size of the
 subtraction and the color of it. For more information please revise Stanley Sternberg's, “Biomedical
 Image Processing”, IEEE Computer, January 1983
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="RollingBallSize">Size of ball rolled under the image. Controlled the amount of
                               subtraction. Value &gt;= 50</param>
	<param name="LightBackground">Whether a background is lighter or not than the foreground. Value &gt;=
                               true</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDespeckle(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDespeckleMore(System.Int32)"/>
	<example>
 Applying a SubtractBackground on image
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim RollingBallSize As Integer
     Dim LightBackground As Boolean
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     RollingBallSize = 50
     LightBackground = True
     oGdPictureImaging.FxSubtractBackground(ImageID, RollingBallSize, LightBackground)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxScanLine(System.Int32)">
	<summary>
 Performs scan line effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a ScanLine effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxScanLine(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxSepia(System.Int32)">
	<summary>
 Performs sepia effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Sepia effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxSepia(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxColorize(System.Int32,System.Single,System.Single,System.Single)">
	<summary>
 Performs "colorization" effect on a GdPicture image or on an area of a GdPicture image
 defined by SetROI().
 </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<param name="Hue">Hue [0 - 100]. </param>
	<param name="Saturation">Saturation [0 - 100]. </param>
	<param name="Luminosity">Luminosity [0 - 100]. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Colorize effect on the image using set Hue, Saturation, and Luminosity values.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim Hue As Integer
     Dim Saturation As Integer
     Dim Luminosity As Integer
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     Hue = 50
     Saturation = 50
     Luminosity = 25
 
     oGdPictureImaging.FxColorize(ImageID, Hue, Saturation, Luminosity)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxDilate(System.Int32)">
	<summary>
 Performs Dilate effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxMax(System.Int32,System.Int32)"/>
	<example>
 Applying a Dilate effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxDilate(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxStretchContrast(System.Int32)">
	<summary>
 Performs a contrast histogram stretch filter on a GdPicture image or on an area of a GdPicture image
 defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Stretch Contrast effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxStretchContrast(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxEqualizeIntensity(System.Int32)">
	<summary>
 Performs an intensity histogram equalization on a GdPicture image or on an area of a GdPicture image
 defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying Equalize Intensity on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxEqualizeIntensity(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxNegative(System.Int32)">
	<summary>
 Performs a negative effect (color inversion) on a GdPicture image or on an area of a GdPicture image
 defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Negative effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxNegative(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxFire(System.Int32)">
	<summary>
 Performs a fire effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Fire effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxFire(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxHalo(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Performs a halo effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Left">The left destination of the halo. </param>
	<param name="Top">The top destination of the halo. </param>
	<param name="Radius">The halo radius. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Halo effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxHalo(ImageID, 50, 100, 30)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxRedEyesCorrection(System.Int32)">
	<summary>
 Performs red eyes correction filter on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a RedEyeCorrection effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxRedEyesCorrection(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxSoften(System.Int32,System.Int32)">
	<summary>
 Performs a soften filter on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="SoftenValue">Factor between 1 and 100. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Soften effect on the image, with a set soften factor
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxSoften(ImageID, 25)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxDespeckle(System.Int32)">
	<summary>
 Performs a 3x3 despeckle filter (also known as median filter) on a GdPicture image or on an area of a
 GdPicture image defined by SetROI() function. It works as a noise removal filter, for Salt-And-Pepper
 like-noise, or varied dots around a document.
 It can remove black noise pixels from white backgrounds and visa versa. It also can remove random noise from multicolored backgrounds.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDespeckleMore(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxMedian(System.Int32,System.Int32)"/>
	<example>
 Applying a Despeckle effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxDespeckle(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxMedian(System.Int32,System.Int32)">
	<summary>
 Performs a median filter of any size of kernel (amount of pixels included in operation) on a
 GdPicture image or on an area of a GdPicture image defined by SetROI() function.
 This function clears the image of Salt and Pepper noise, which is random dot like noise of white and black color.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="KernelSize">Level corresponding to number of pixels to include in the median operation,
                          where Level = n, corresponds to (n*2+1)^2 pixels to be included. For
                          Example, KernelSize = 1 includes 9 pixels in the median operation,
                          KernelSize = 2 includes 25 pixels in the median operation. Range from 1 to 60.
                          If value supplied is out of range the function will return GdPictureStatus.InvalidParameter</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDespeckle(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDespeckleMore(System.Int32)"/>
	<example>
 Applying a median filter on image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim KernelSize As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     KernelSize = 4.
 
     oGdPictureImaging.FxMedian(ImageID, KernelSize)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxGaussian(System.Int32,System.Int32)">
	<summary>
 Performs a Gaussian (blur via Gaussian deviation formula)filter of any size of kernel (amount of
 pixels included in operation) on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="KernelSize">Number of pixels in each direction of N, W, E, S to include in the Gaussian formula in the blur operation. The larger the value
 the more blur you get. The range is larger than 1, and less than the Image's Smaller Dimension (Width, Height) divided by 2. 
 Suggested value is 4 for a [96-120] DPI image.
 If the value supplied is our of range the function will return GdPictureStatus.InvalidParameter.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDespeckle(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDespeckleMore(System.Int32)"/>
	<example>
 Applying gaussian filter on image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim KernelSize As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     KernelSize = 4.
 
     oGdPictureImaging.FxGaussian(ImageID, KernelSize)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxUnsharpMask(System.Int32,System.Int32,System.Double,System.Int32)">
	<summary>
 Performs an Unsharp Mask effect which is a Sharpen effect via subtracting a Gaussian mask of the
 image, on a GdPicture image or on an area of a GdPicture image defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Radius">Size of Edges to become after the effect is applies. It controls how wide
                      they get after the filter is applied. Radius and Amount interact, reducing
                      one, allows more of the other. Minimum Value of Radius should be 3 or more
                      to allow for enough pixels surrounding the edge to be investigated. If value
                      passed less than 3 is passed it will be ammended automatically to 3. Proper
                      value is 5. Value &gt;= 3. </param>
	<param name="Amount">Amount of Contrast to be added to areas of edges where filter will be
                      applies. It controls how much darker and how much brighter the edges become.
                      Proper value is 0.5, Value between 0.0-5.0</param>
	<param name="Threshold">It controls the amount of edges to be sharpened. Smaller values sharpen
                         more, higher values exclude the subtle edges from being sharpened. Proper
                         value is 40. Value between 0-255. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDespeckle(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDespeckleMore(System.Int32)"/>
	<example>
 Applying unsharpmask on image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Amount As Double
     Dim Threshold As Integer
     Dim Radius As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     Amount = 4.5
     Threshold = 40
     Radius = 5
 
     oGdPictureImaging.FxUnsharpMask(ImageID, Radius, Amount, Threshold)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxMax(System.Int32,System.Int32)">
	<summary>
 Performs a Maximum filter (Dilate Filter)of any size of kernel (amount of pixels included in
 operation) on a GdPicture image or on an area of a GdPicture image defined by SetROI() function. It
 selects the Maximum value or the neighboring pixels to each pixel and gives it that value.
 Basically, in binary images, it makes objects in the become smaller, and in colored images it makes the image brighter because the darker objects shrink.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="KernelSize">How much smaller should objects become in each direction of the four directions, left, right, top, and bottom. 
  This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.
  If a value entered is out of range, the function return value will be GdPictureStatus.InvalidParameter </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDilate(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxMin(System.Int32,System.Int32)"/>
	<example>
 Applying a Maximum filter on image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim KernelSize As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     KernelSize = 4.
 
     oGdPictureImaging.FxMax(ImageID, KernelSize)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxMin(System.Int32,System.Int32)">
	<summary>
 Performs a Minimum filter (Erode Filter)of any size of kernel (amount of pixels included in
 operation) on a GdPicture image or on an area of a GdPicture image defined by SetROI() function. It
 selects the Minimum value or the neighboring pixels to each pixel and gives it that value.
 Basically, in binary images, it makes objects in the image grow larger, and in colored images it makes the image darker because the darker objects grow.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="KernelSize">How large should objects grow in each direction of the four directions, left, right, top, and bottom 
  This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.
  If a value entered is out of range, the function return value will be GdPictureStatus.InvalidParameter</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxErode(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxMax(System.Int32,System.Int32)"/>
	<example>
 Applying a Minimum filter on image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim KernelSize As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     KernelSize = 4.
 
     oGdPictureImaging.FxMin(ImageID, KernelSize)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxDespeckleMore(System.Int32)">
	<summary>
 Performs a 5x5 despeckle filter (also known as median filter) on a GdPicture image or into an area of
 a GdPicture image defined by SetROI() function. It works as a noise removal filter, for
 Salt-And-Pepper like-noise, or varied dots around a document.
 It can remove black noise pixels from white backgrounds and visa versa. It also can remove random noise from multicolored backgrounds.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxDespeckle(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxMedian(System.Int32,System.Int32)"/>
	<example>
 Applying a DespeckleMore effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxDespeckleMore(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxEmboss(System.Int32)">
	<summary>
 Performs emboss effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying an Emboss effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxEmboss(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxEmboss(System.Int32,System.Drawing.Color)">
	<summary>
 Performs emboss effect specifying a background color on a GdPicture image or on an area of a
 GdPicture image defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function.
                         Background color. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying an Emboss effect on the image with specifying the backgroundcolor.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxEmboss(ImageID, oGdPictureImaging.ARGB(255, 40, 255, 128))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxEmbossMore(System.Int32)">
	<summary>
 Performs emboss more effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function. Same as Emboss effect but to more of a degree.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying an EmbossMore effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxEmbossMore(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxEmbossMore(System.Int32,System.Drawing.Color)">
	<summary>
 Performs emboss more effect specifying a background color on a GdPicture image or on an area of a
 GdPicture image defined by SetROI() function. Same as emboss effect but to more of a degree.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function. Color
                         of the background. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying an EmbossMore effect on the image with specifying the backgroundcolor.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxEmbossMore(ImageID, oGdPictureImaging.ARGB(255, 40, 255, 128))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxEngrave(System.Int32)">
	<summary>
 Performs engrave effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying an Engrave effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxEngrave(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxEngrave(System.Int32,System.Drawing.Color)">
	<summary>
 Performs engrave effect specifying a background color on a GdPicture image or on an area of a
 GdPicture image defined by SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function.
                         Background color. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying an Engrave effect on the image with specifying the backgroundcolor.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxEngrave(ImageID, oGdPictureImaging.ARGB(255, 40, 255, 128))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxEngraveMore(System.Int32)">
	<summary>
 Performs engrave more effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function. Same as Engrave effect but to more of a degree.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying an EngraveMore effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxEngraveMore(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxEngraveMore(System.Int32,System.Drawing.Color)">
	<summary>
 Performs engrave more effect specifying a background color on a GdPicture image or on an area of a
 GdPicture image defined by SetROI() function. Same as the Engrave effect but to more of a degree.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function.
                         Background color. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying an EngraveMore effect on the image with specifying the backgroundcolor.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxEngraveMore(ImageID, oGdPictureImaging.ARGB(255, 40, 255, 128))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxEdgeEnhance(System.Int32)">
	<summary>
 Performs edge enhance effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying an Edge Enhance effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxEdgeEnhance(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxConnectedContour(System.Int32)">
	<summary>
 Performs connected contour effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Connected Contour effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxConnectedContour(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxAddNoise(System.Int32)">
	<summary>
 Performs noise effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
  Adding Noise to the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.FxAddNoise(ImageID)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxContour(System.Int32)">
	<summary>
 Performs contour effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Contour effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxContour(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxRelief(System.Int32)">
	<summary>
 Performs relief effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Relief effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxRelief(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxErode(System.Int32)">
	<summary>
 Performs erode effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxMin(System.Int32,System.Int32)"/>
	<example>
 Applying Erode on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxErode(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxSharpen(System.Int32)">
	<summary>
 Performs sharpen effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Sharpen effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxSharpen(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxSharpenMore(System.Int32)">
	<summary>
 Performs sharpen more effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function. Same effect as Sharpen but to a larger degree.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a SharpenMore effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxSharpenMore(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxDiffuse(System.Int32)">
	<summary>
 Performs diffuse effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Diffuse effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxDiffuse(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxDiffuseMore(System.Int32)">
	<summary>
 Performs DiffuseMore effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function. It is the same as a Diffuse effect but to more of a degree.
 </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a DiffuseMore effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxDiffuseMore(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxSmooth(System.Int32)">
	<summary>
 Performs smooth effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Smooth effect on the image, with a set soften factor
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxSmooth(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxAqua(System.Int32)">
	<summary>
 Performs aqua effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying aqua effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxAqua(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.fxRemoveBackgroundChromaKey(System.Int32,GdPicture.ColorKey,System.Int32,System.Int32)">
	<summary>
 Sets the Red, Green or Blue background color as transparent in a GdPicture image or in area of a
 GdPicture image defined by SetROI() function. This function is particularly accurate to remove the
 Green, Blue or Red background of a photo.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Component">A member of the ColorKey enumeration defining the color to remove (can be
                         Red, Blue or Green). </param>
	<param name="Variation">Variation between 0 and 512. 0 means no possible variation of the color
                         key. Suggest value is 240, higher can result with non removed background
                         space.</param>
	<param name="MinKeyValue">Defines the minimum value of the component. Must be a value between 0 and
                           255. Default value is 25 for dark background, 50 for standard background
                           and 80 for background with high luminosity.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Removes the Green background of a bitmap.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SetTransparencyColorChromaKey(ImageID, ColorKey.ColorKeyGreen,  240, 25)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxPixelize(System.Int32)">
	<summary>
 Performs "pixelize" effect on a GdPicture image or on an area of a GdPicture image defined
 by SetROI() function. This filter makes the image appear as pixelated.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a Pixelize effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxPixelize(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxGrayscale(System.Int32)">
	<summary>
 Performs grayscale effect on a GdPicture image or on an area of a GdPicture image defined by SetROI()
 function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<example>
 Applying a GrayScale effect on the image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxGrayscale(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture.BitonalReduction)">
	<summary>
 Performs black &amp; white effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Mode">A member of the BitonalReduction enumeration. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ConvertTo1Bpp(System.Int32)"/>
	<example>
 Applying black and white effect on the image using Burke's method.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBlackNWhite(ImageID, BitonalReduction.Burke)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture.BitonalReduction,System.Int32)">
	<summary>
 Performs black &amp; white effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function.
 
 This function takes a parameter to defines the palette color weight.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Mode">A member of the BitonalReduction enumeration. </param>
	<param name="PalWeight">The color palette weight. Must be &gt; 0. Default value is 15. Only available
                         for Burke, Stucki &amp; FloydSteinberg filters. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ConvertTo1Bpp(System.Int32)"/>
	<example>
 Applying black and white effect on the image using Stucki's method and a pallette weight of 15.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBlackNWhite(ImageID, BitonalReduction.Stucki, 15)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)">
	<summary>
 Performs black &amp; white effect on a GdPicture image or on an area of a GdPicture image defined by
 SetROI() function using a specific threshold value. Values above or equal to the threshold value will
 be set white, and values lower than the threshold value will be set as black.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Threshold">Value between [1 and 254] The default value is 128 which means '50%'.pixel
                         lighter than 50% =&gt; become white, darker =&gt; become black.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture.BitonalReduction)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ConvertTo1Bpp(System.Int32)"/>
	<example>
 Applying black and white effect on the image using a threshold of 128.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.FxBlackNWhiteT(ImageID, 128)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)">
	<summary>
  Sets the font size unit used in the Drawing text functions.
  </summary>
	<param name="UnitMode">A member of the UnitMode enumeration. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetUnit"/>
	<example>
 Setting the unit size of a font used in drawing text on an image.
 The following code assumes a certain font has been set and is going to be used to draw text on an image with.
 <code lang="vb.net">
     Dim oGdPictureImaging As New GdPictureImaging
     oGdPictureImaging.FontSetUnit(UnitMode.UnitPixel)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FontGetUnit">
	<summary>
 Retrieves the font size unit used in the Drawing text functions.
 </summary>
	<returns>
 A member of the UnitMode enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontSetUnit(GdPicture.UnitMode)"/>
	<example>
 Retrieving the unit size of a font used in drawing text on an image.
 The following code assumes a certain font along with its unit have been set and is used to draw text on an image with.
 <code lang="vb.net">
     Dim oGdPictureImaging As New GdPictureImaging
     Dim Size As UnitMode
     Size = oGdPictureImaging.FontGetUnit()
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FontGetCount">
	<summary>
 Retrieves the number of fonts available.
 </summary>
	<returns>
 The number of fonts available. 
 </returns>
	<example>
 Retrieving how many fonts available.
 <code lang="vb.net">
     Dim oGdPictureImaging As New GdPictureImaging
     Dim Number As Integer
     Number = oGdPictureImaging.FontGetCount()
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FontGetName(System.Int32)">
	<summary>
 Retrieves the name of an available font.
 </summary>
	<param name="FontNo">Value between 1 and FontGetCount(). </param>
	<returns>
 A font name.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetCount"/>
	<example>
 Retrieving a font's name available.
 The following code assumes at least 21 fonts are available.
 <code lang="vb.net">
     Dim oGdPictureImaging As New GdPictureImaging
     Dim Name As String
     Name = oGdPictureImaging.FontGetName(21)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.FontIsStyleAvailable(System.String,GdPicture.FontStyle)">
	<summary>
  Determines whether the specified style is available for this font family.
  </summary>
	<param name="FontName">The font family name. ("Arial" or "Helvetica"...)</param>
	<param name="FontStyle">A member of the FontStyle enumeration. </param>
	<returns>
  True if the font style is available else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FontGetName(System.Int32)"/>
	<example>
 Determinning wether a certain font has a specified style
 <code lang="vb.net">
     Dim oGdPictureImaging As New GdPictureImaging
     Dim HasStyle As Boolean
     HasStyle = oGdPictureImaging.FontIsStyleAvailable("Ariel", FontStyle.FontStyleRegular)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetWidth(System.Int32)">
	<summary>
  Returns the width in pixel of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  Width in pixel.
  </returns>
	<example>
 Retrieving the image's height.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Width As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Width = oGdPictureImaging.GetWidth(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetHeight(System.Int32)">
	<summary>
 Returns the height in pixels of a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 Height in pixels.
 </returns>
	<example>
 Retrieving the image's height.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Height As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Height = oGdPictureImaging.GetHeight(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetHeightInches(System.Int32)">
	<summary>
 Returns the height in inches of a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 Height in inches.
 </returns>
	<example>
 Retrieving the image's Height in inches.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Height As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Height = oGdPictureImaging.GetHeightInches(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetWidthInches(System.Int32)">
	<summary>
 Returns the Width in inches of a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 Width in inches.
 </returns>
	<example>
 Retrieving the image's Width in inches.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Width As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Width = oGdPictureImaging.GetWidthInches(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetImageFormat(System.Int32)">
	<summary>
 Returns the format of a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the DocumentFormat enumeration.
 </returns>
	<example>
 Retrieving the image's Format.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ImageFormat As DocumentFormat
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     ImageFormat = oGdPictureImaging.GetImageFormat(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetPixelFormat(System.Int32)">
	<summary>
 Returns the pixel format of a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the PixelFormat enumeration. See:
 http://msdn.microsoft.com/en-us/library/system.drawing.PixelFormat.aspx
 </returns>
	<example>
 Retrieving the image's PixelFormat.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ImagePixelFormat As PixelFormat
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     ImagePixelFormat = oGdPictureImaging.GetPixelFormat(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetImageColorSpace(System.Int32)">
	<summary>
 Returns the color space of a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the ImageColorSpace enumeration.
 </returns>
	<example>
 Retrieving the image's ColorSpace.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim GdImageColorSpace As ImageColorSpace
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     GdImageColorSpace = oGdPictureImaging.GetImageColorSpace(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetBitDepth(System.Int32)">
	<summary>
 Returns the bit depth of a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 Can be:
   1.  For 1 bit per pixel image.
   4.  For 4 bits per pixel image.
   8.  For 8 bits per pixel image.
   16. For 16 bits per pixel image.
   24. For 24 bits per pixel image.
   32. For 32 bits per pixel image.
   48. For 48 bits per pixel image.
   64. For 64 bits per pixel image.
 </returns>
	<example>
 Retrieving the image's BitDepth.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim BitDepth As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     BitDepth = oGdPictureImaging.GetBitDepth(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetTiffCompression(System.Int32)">
	<summary>
 Returns the compression scheme of a GdPicture image (TIFF format only).
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the TiffCompression enumeration
 </returns>
	<example>
 Retrieving the image's Tiff Compression.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ImgTiffCompression As TiffCompression
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     ImgTiffCompression = oGdPictureImaging.GetTiffCompression(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IsPixelFormatIndexed(System.Int32)">
	<summary>
  Asks if the pixel format of a GdPicture image is indexed.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  True if the pixel format is indexed else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.IsPixelFormatHasAlpha(System.Int32)"/>
	<example>
  Determining whether an image has an Indexed Pixel Format.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim IndexedPixelFormat As Boolean
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      IndexedPixelFormat = oGdPictureImaging.IsPixelFormatIndexed(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IsPixelFormatHasAlpha(System.Int32)">
	<summary>
  Returns if the pixel format of a GdPicture image has alpha component.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  True if the pixel format is indexed else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.IsPixelFormatIndexed(System.Int32)"/>
	<example>
  Determining whether an image has an Alpha Channel.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim HasAlphaChannel As Boolean
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      HasAlphaChannel = oGdPictureImaging.IsPixelFormatHasAlpha(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetHorizontalResolution(System.Int32)">
	<summary>
  Returns the horizontal resolution of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  Horizontal resolution in Dot Per Inch (DPI).
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetVerticalResolution(System.Int32)"/>
	<example>
  Retrieving the image's horizontal resolution.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim HRes As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      HRes = oGdPictureImaging.GetHorizontalResolution(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetVerticalResolution(System.Int32)">
	<summary>
  Returns the vertical resolution of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  Vertical resolution in Dot Per Inch (DPI).
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetHorizontalResolution(System.Int32)"/>
	<example>
  Retrieving the image's vertical resolution.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim VRes As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      VRes = oGdPictureImaging.GetVerticalResolution(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetHorizontalResolution(System.Int32,System.Single)">
	<summary>
  Changes the horizontal resolution of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="HorizontalResolution">The new horizontal resolution in Dot Per Inch (DPI). </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetVerticalResolution(System.Int32,System.Single)"/>
	<example>
  Setting the image's horizontal resolution.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim HRes As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      HRes = 200
 
      oGdPictureImaging.SetHorizontalResolution(ImageID, HRes)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetVerticalResolution(System.Int32,System.Single)">
	<summary>
  Changes the vertical resolution of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="VerticalResolution">The new vertical resolution in Dot Per Inch (DPI). </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetHorizontalResolution(System.Int32,System.Single)"/>
	<example>
  Setting the image's vertical resolution.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim VRes As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      VRes = 200
 
      oGdPictureImaging.SetVerticalResolution(ImageID, VRes)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifSetTransparency(System.Int32,System.Drawing.Color)">
	<summary>
  Sets the transparency color for a GdPicture image.
  
  If the specified GdPicture image is an editable multiframe gif image, 
  you should use this function for each frame of the image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TransparentColor">Color Object. You can build a Color Object using the ARGB() function.
                                 Color to set as transparent. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Setting the transparency of a gif image
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     oGdPictureImaging.GifSetTransparency(ImageID, oGdPictureImaging.ARGB(255, 0, 255, 0))
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifCreateMultiFrameFromFile(System.String)">
	<summary>
  Creates a new editable multiframe gif image based on an
  image file.
  </summary>
	<param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  0: The image could not created. Use the GetStat() function to determine the reason this function
  failed.
  
  Non-zero: GdPicture Image Identifier. The created editable multiframe gif image.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files.
  </remarks>
	<example>
  apply negative effect on all frames of an animated gif image
  <code lang="vb.net">
  Dim i As Integer
  Dim GifImageID As Integer
  Dim FrameCount As Integer
  
  GifImageID = oGdPictureImaging.GifCreateMultiFrameFromFile("input.gif")
  FrameCount = oGdPictureImaging.GifGetFrameCount(GifImageID)
  
  For i = 1 To FrameCount
      oGdPictureImaging.GifSelectFrame(GifImageID, i)
       oGdPictureImaging.FxNegative(GifImageID)
   Next i
  
   oGdPictureImaging.GifSaveMultiFrameToFile(GifImageID,  "output.gif")
   oGdPictureImaging.ReleaseGdPictureImage(GifImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifCreateMultiFrameFromGdPictureImage(System.Int32)">
	<summary>
  Creates a new editable multiframe gif image based from
  a GdPicture Image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image from witch the new multiframe gif image
                        will be created. </param>
	<returns>
  0: The image could not created. Use the GetStat() function to determine the reason this function
  failed.
  
  Non-zero: GdPicture Image Identifier. The created editable multiframe gif image.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files.
  </remarks>
	<example>
  apply negative effect on all frames of an animated gif image
  <code lang="vb.net">
  Dim i As Integer
  Dim GifImageID As Integer
  Dim FrameCount As Integer
  
  GifImageID = oGdPictureImaging.GifCreateMultiFrameFromFile("input.gif")
  FrameCount = oGdPictureImaging.GifGetFrameCount(GifImageID)
  
  For i = 1 To FrameCount
      oGdPictureImaging.GifSelectFrame(GifImageID, i)
       oGdPictureImaging.FxNegative(GifImageID)
   Next i
  
   oGdPictureImaging.GifSaveMultiFrameToFile(GifImageID,  "output.gif")
   oGdPictureImaging.ReleaseGdPictureImage(GifImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifGetLoopCount(System.Int32)">
	<summary>
  Returns the loop count of a multiframe gif image.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsMultiFrame(System.Int32)"/>
	<param name="ImageID">GdPicture Image Identifier. The multiframe gif image. (Can be an editable
                        multiframe gif or a read only gif image.) </param>
	<returns>
  The number of times the animation should be played. 0 = infinite.
  </returns>
	<remarks>
  This function works with editable multiframe gif images 
  and with multiframe gif images opened as read only. 
  </remarks>
	<example>
 How to obtain a multiframe gif image loop count.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim LoopCount As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     LoopCount = oGdPictureImaging.GifGetLoopCount(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifSetLoopCount(System.Int32,System.Int32)">
	<summary>
  Sets the loop count of a multiframe gif image.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsMultiFrame(System.Int32)"/>
	<param name="ImageID">GdPicture Image Identifier. The multiframe gif image. (Can be an editable
                        multiframe gif or a read only gif image.) </param>
	<param name="LoopCount">The number of times the animation should be played. Between 0 and 65536. 0 =
                          infinite. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  This function works with editable multiframe gif images 
  and with multiframe gif images opened as read only. 
  </remarks>
	<example>
 Making the gif animation run infinitely
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     oGdPictureImaging.GifSetLoopCount(ImageID, 0)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifSelectFrame(System.Int32,System.Int32)">
	<summary>
  Selects a frame of a multiframe gif image. The frame can now be edited or saved to a different file.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The multiframe gif image. (Can be an editable
                        multiframe gif or a read only gif image.) </param>
	<param name="Frame">Frame no between 1 and frame count. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GifGetFrameCount(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsMultiFrame(System.Int32)"/>
	<remarks>
  This function works with editable multiframe gif images 
  and with multiframe gif images opened as read only.
  </remarks>
	<example>
  apply negative effect on all frames of an animated gif image
  <code lang="vb.net">
  Dim i As Integer
  Dim GifImageID As Integer
  Dim FrameCount As Integer
  
  GifImageID = oGdPictureImaging.GifCreateMultiFrameFromFile("input.gif")
  FrameCount = oGdPictureImaging.GifGetFrameCount(GifImageID)
  
  For i = 1 To FrameCount
      oGdPictureImaging.GifSelectFrame(GifImageID, i)
       oGdPictureImaging.FxNegative(GifImageID)
   Next i
  
   oGdPictureImaging.GifSaveMultiFrameToFile(GifImageID,  "output.gif")
   oGdPictureImaging.ReleaseGdPictureImage(GifImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifGetFrameTime(System.Int32,System.Int32)">
	<summary>
  Returns the "frame time" of a frame of a multiframe gif image.
  
  Frame time is the amount of time in ms to display the frame for (GIF specific - the value stored in
  the file is centiseconds (1/100th of a second)).
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsMultiFrame(System.Int32)"/>
	<param name="ImageID">GdPicture Image Identifier. The multiframe gif image. </param>
	<param name="Frame">Frame no between 1 and frame count. </param>
	<returns>
  The frame time of the selected frame of the multiframe gif image.
  </returns>
	<remarks>
  This function works with editable multiframe gif images 
  and with multiframe gif images opened as read only. 
  </remarks>
	<example>
 How to obtain a multiframe gif image certain frame's "frametime".
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim FrameTime As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     FrameTime = oGdPictureImaging.GifGetFrameTime(ImageID, 3)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifSetFrameTime(System.Int32,System.Int32,System.Int32)">
	<summary>
  Sets the "frame time" of a frame of a multiframe gif image.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsMultiFrame(System.Int32)"/>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<param name="ImageID">GdPicture Image Identifier. The multiframe gif image. </param>
	<param name="Frame">Frame no between 1 and frame count. </param>
	<param name="FrameTime">'Frame time is the amount of time in ms to display the frame for (GIF
                          specific - the value stored in the file is centiseconds (1/100th of a
                          second)). </param>
	<remarks>
  This function works with editable multiframe gif images 
  and with multiframe gif images opened as read only. 
  </remarks>
	<example>
 Setting the frame time of a certain fram in a gif multiframe image
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     oGdPictureImaging.GifSetFrameTime(ImageID, 2, 1)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifSetFrameDisposal(System.Int32,System.Int32,System.Int32)">
	<summary>
  Before saving using the GifSaveMultiFrameToFile() function, sets the "Frame disposal method" of a
  frame of an editable multiframe gif image.
  
  This defines what to do with the logical canvas area after displaying this image.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)"/>
	<param name="ImageID">GdPicture Image Identifier. The multiframe gif image. </param>
	<param name="Frame">Frame no between 1 and frame count. </param>
	<param name="FrameDisposal">Can be:1: Leave. Will leave the image in place to be
                              entirely or partially overdrawn by the next image.2:
                              Background. Will blank out the area used by the frame with the
                              background color.3: Previous. Will return the logical
                              canvas to the previous state before the image was drawn. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  This function works only with editable multiframe gif images. 
  </remarks>
	<example>
 Using GifSetFrameDisposal
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     oGdPictureImaging.GifSetFrameDisposal(ImageID, 2, 1)
 
     oGdPictureImaging.GifSaveMultiFrameToFile(ImageID, "animate.gif")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifGetFrameCount(System.Int32)">
	<summary>
  Returns the number of frame currently available in a multiframe gif image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The multiframe gif image. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsMultiFrame(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifSelectFrame(System.Int32,System.Int32)"/>
	<returns>
  Number of frames currently available in the multiframe gif image. Returns 0 if the image is not a
  multiframe gif image.
  </returns>
	<remarks>
  This function works with editable multiframe gif images 
  and with multiframe gif images opened as read only. 
  </remarks>
	<example>
 How to obtain a multiframe gif image frame count.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim FrameCount As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     FrameCount = oGdPictureImaging.GifGetFrameCount(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifGetCurrentFrame(System.Int32)">
	<summary>
  Returns the current frame (or selected frame) in a multiframe gif image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The multiframe gif image. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsMultiFrame(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifSelectFrame(System.Int32,System.Int32)"/>
	<returns>
  Returns the current frame of the multiframe gif image. Returns 0 if the image have not frame
  selected.
  </returns>
	<remarks>
  This function works with editable multiframe gif images 
  and with multiframe gif images opened as read only. 
  </remarks>
	<example>
 How to obtain a certain frame from a gif image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Frame As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     Frame = oGdPictureImaging.GifGetCurrentFrame(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifIsMultiFrame(System.Int32)">
	<summary>
  Checks if an image is a multiframe gif image. This image can be a read only multiframe gif image or
  an editable multiframe gif image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to check. </param>
	<returns>
  True if the image is a multiframe gif image, else false.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GifGetFrameCount(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifSelectFrame(System.Int32,System.Int32)"/>
	<example>
 Determining whether a gif image is multiframe or not..
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim MultiFrame As Boolean
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     MultiFrame = oGdPictureImaging.GifIsMultiFrame(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)">
	<summary>
  Checks if an image is an editable multiframe gif image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to check. </param>
	<returns>
  True if the image is an editable multiframe gif image, else false. 
  </returns>
	<example>
 Determining whether a gif image is multiframe or not..
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Editable As Boolean
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     Editable = oGdPictureImaging.GifIsEditableMultiFrame(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifDeleteFrame(System.Int32,System.Int32)">
	<summary>
  Deletes the frame of an editable multiframe gif image 
  on the given position.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which a frame
                        will be deleted. </param>
	<param name="Frame">The position of the frame to delete. Must be a value from 1 to the current
                      number of frames available in the multiframe gif image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)"/>
	<remarks>
  This function can only be used with an editable multiframe gif image.
  
  To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
  function.
  
  To save modifications brought to the multiframe gif image you need to use the
  GifSaveMultiFrameToFile() function. 
  </remarks>
	<example>
  How to delete a Frame in a gif image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
  
      oGdPictureImaging.GifDeleteFrame(ImageID, 5)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifOpenMultiFrameForWrite(System.Boolean)">
	<summary>
  This function controls the way of multiframe gif image loading.
  
  By default, the class loads multiframe gif images as read only through the following functions:
  
  CreateGdPictureImageFromByteArray
  
  CreateGdPictureImageFromByteArrayICM
  
  CreateGdPictureImageFromFile
  
  CreateGdPictureImageFromFileICM
  
  CreateGdPictureImageFromStream
  
  CreateGdPictureImageFromStreamICM
  
  CreateGdPictureImageFromString
  
  CreateGdPictureImageFromStringICM
  
  CreateGdPictureImageFromFTP
  
  CreateGdPictureImageFromHTTP
  
  
  
  If you want to open multiframe gif images as read &amp; write,
  you should this function using False for the WriteAccess parameter.
  </summary>
	<param name="WriteAccess">True to load the multiframe gif images for reading and writing,
                            else False to open them as read-only. </param>
	<example>
  Openning a Multiframe Image for either writing or reading-only, the following code assumes a MultiFrame image is already loaded
  <code lang="vb.net">
  m_Stat = GifOpenMultiFrameForWrite(True)'Opens an image for Writing and Reading
  m_Stat = GifOpenMultiFrameForWrite(False)'Opens an image for reading-only
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)">
	<summary>
  Saves an editable multiframe gif image to a file.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image to save as
                        file. </param>
	<param name="FilePath">The path to save the image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)"/>
	<remarks>
  This function can only be used with an editable multiframe gif image.
  
  To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
  function.
  
  This function must only be used to save an editable multiframe gif image.
  </remarks>
	<example>
  apply negative effect on all frames of an animated gif image
  <code lang="vb.net">
  Dim i As Integer
  Dim GifImageID As Integer
  Dim FrameCount As Integer
  
  GifImageID = oGdPictureImaging.GifCreateMultiFrameFromFile("input.gif")
  FrameCount = oGdPictureImaging.GifGetFrameCount(GifImageID)
  
  For i = 1 To FrameCount
      oGdPictureImaging.GifSelectFrame(GifImageID, i)
       oGdPictureImaging.FxNegative(GifImageID)
   Next i
  
   oGdPictureImaging.GifSaveMultiFrameToFile(GifImageID,  "output.gif")
   oGdPictureImaging.ReleaseGdPictureImage(GifImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifAppendFrameFromFile(System.Int32,System.String)">
	<summary>
  Appends a new frame from file to the end of an editable multiframe gif image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which the
                        frame will be added. </param>
	<param name="FilePath">The path of the image to append within the editable multiframe gif image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)"/>
	<remarks>
  This function can only be used with an editable multiframe gif image.
  
  To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
  function.
  
  To save modifications brought to the multiframe gif image you need to use the
  GifSaveMultiFrameToFile() function.
  
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files. 
  </remarks>
	<example>
  How to use GidAppendPageFromFile.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.gif")
  
      oGdPictureImaging.GifAppendFrameFromFile(ImageID, "c:\\addition.jpg")
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifAppendFrameFromGdPictureImage(System.Int32,System.Int32)">
	<summary>
  Appends a new frame from a GdPicture Image to the end of an editable multiframe gif image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which
                        the frame will be added. </param>
	<param name="ImageToAddID">GdPicture Image Identifier. The image to append within the editable
                             multiframe gif image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)"/>
	<remarks>
  This function can only be used with an editable multiframe gif image.
  
  To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
  function.
  
  To save modifications brought to the multiframe gif image you need to use the
  GifSaveMultiFrameToFile() function. 
  </remarks>
	<example>
  How to use GiffAppendPageFromGdPictureImage.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim AddImgID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tig")
      AddImgID = oGdPictureImaging.CreateGdPictureImageFromFile("addition.jpg")
  
      oGdPictureImaging.GifAppendFrameFromGdPictureImage(ImageID, AddImgID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(AddImgID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifInsertFrameFromFile(System.Int32,System.Int32,System.String)">
	<summary>
  Inserts a new frame from file at the given position an editable multiframe gif image.
  Frame has to be a number smaller or equal than the current number of frames available in the
  multiframe gif image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which the
                        frame will be inserted. </param>
	<param name="Position">The position to add the new frame. Must be a value from 1 to the current
                         number of frames available in the multiframe gif image. </param>
	<param name="FilePath">The path of the image to append within the editable multiframe gif image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)"/>
	<remarks>
  This function can only be used with an editable multiframe gif image.
  
  To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
  function.
  
  To save modifications brought to the multiframe gif image you need to use the
  GifSaveMultiFrameToFile() function.
  
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files. 
  </remarks>
	<example>
  How to use GifInsertFrameFromFile.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.gif")
  
      oGdPictureImaging.GifInsertFrameFromFile(ImageID, 3, "addition.jpg")
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifInsertFrameFromGdPictureImage(System.Int32,System.Int32,System.Int32)">
	<summary>
  Inserts a new frame from a GdPicture Image at the given position in an editable multiframe gif image.
  Frame has to be a number smaller or equal than the current number of frames available in the
  multiframe gif image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which
                        the frame will be inserted. </param>
	<param name="Position">The position to add the new frame. Must be a value from 1 to the current
                         number of frames available in the multiframe gif image. </param>
	<param name="ImageToAddID">GdPicture Image Identifier. The image to append within the editable
                             multiframe gif image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)"/>
	<remarks>
  This function can only be used with an editable multiframe gif image.
  
  To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
  function.
  
  To save modifications brought to the multiframe gif image you need to use the
  GifSaveMultiFrameToFile() function. 
  </remarks>
	<example>
  How to use GifInsertFrameFromGdPictureImage.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim AddImgID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.gif")
      AddImgID = oGdPictureImaging.CreateGdPictureImageFromFile("addition.jpg")
  
      oGdPictureImaging.GifInsertFrameFromGdPictureImage(ImageID, 3, AddImgID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(AddImgID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GifSwapFrames(System.Int32,System.Int32,System.Int32)">
	<summary>
  Swaps two frames in an editable multiframe gif image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multiframe gif image in which frames
                        will be swapped. </param>
	<param name="Frame1">The position of the first frame to swap with the second. Must be a value from
                       1 to the current number of frames available in the multiframe gif image. </param>
	<param name="Frame2">The position of the second frame to swap with the first one. Must be a value
                       from 1 to the current number of frames available in the multiframe gif image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GifIsEditableMultiFrame(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GifSaveMultiFrameToFile(System.Int32,System.String)"/>
	<remarks>
  This function can only be used with an editable multiframe gif image.
  
  To check if an image is an editable multiframe gif image you can use the GifIsEditableMultiFrame()
  function.
  
  To save modifications brought to the multiframe gif image you need to use the
  GifSaveMultiFrameToFile() function. 
  </remarks>
	<example>
 Swaping two frames in a gif multiframe image
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     oGdPictureImaging.GifSwapFrames(ImageID, 3, 5)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ReleaseGdPictureImage(System.Int32)">
	<summary>
  Deletes a GdPicture Image from the memory.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image to release. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Releasing a GdPicture Image.
  This Code assumes the GdPicture Image ImageID already exists.
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateClonedGdPictureImage(System.Int32)">
	<summary>
 Creates a new GdPicture Image and initializes it with the contents of another GdPicture Image to minimize memory usage.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to clone.</param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<remarks>
 If the image to clone is a multibitmap image, this function will clone only the selected bitmap and
 will create a single frame image.
 
 This function creates a new GdPicture image and initializes it with the contents of the source image until a modification is applied to the cloned image. 
 Consequently the pixel data of the cloned image can be released from the memory if the image source is released!
 If you expect to have 2 independent bitmap stored in the memory you have to use the CreateClonedGdPictureImageI function.
 Do not use this function if you intend to release the source image from the memory before the cloned image.
 </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateClonedGdPictureImageI(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.CreateClonedGdPictureImageI(System.Int32)">
	<summary>
 Creates a new GdPicture Image and initializes it with a copy of the contents of another GdPicture Image. 
 The newly created image will be independent of the image source.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to clone. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<remarks>
 If the image to clone is a multibitmap image, this function will clone only the selected bitmap and
 will create a single frame image.
 </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateClonedGdPictureImage(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.CreateClonedGdPictureImage32BppARGB(System.Int32)">
	<summary>
 Creates a new independent 32-bits ARGB GdPicture Image clone from an existing image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to clone. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<remarks>
 If the image to clone is a multibitmap image, this function will clone only the selected bitmap and
 will create a single frame image.
 </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
 Createing a 32 bit ARGB clone of a GdPicture Image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ResImage As Integer
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     ResImage = oGdPictureImaging.CreateClonedGdPictureImage32BppARGB(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateClonedGdPictureImage32BppPARGB(System.Int32)">
	<summary>
 Creates a new independent 32-bits PARGB GdPicture Image clone from an existing image.
 
 8 bits are used for each of the alpha, red, green, and blue components. The red, green, and blue
 components are pre-multiplied, according to the alpha component.
 
 This pixel format provides better performances on Windows applications.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to clone. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<remarks>
 If the image to clone is a multibitmap image, this function will clone only the selected bitmap and
 will create a single frame image.
 </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
 Createing a 32 bit PARGB clone of a GdPicture Image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ResImage As Integer
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     ResImage = oGdPictureImaging.CreateClonedGdPictureImage32BppPARGB(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateClonedGdPictureImageArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Creates a new GdPicture Image from the area of another GdPicture Image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The image from which we will clone the
                       area. </param>
	<param name="SrcLeft">Left pixel source of the area to clone. </param>
	<param name="SrcTop">Top pixel source of the area to clone. </param>
	<param name="Width">Width of the area to clone. </param>
	<param name="Height">Height of the area to clone. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<remarks>
 If the image to clone is a multibitmap image, this function will clone only the selected bitmap and
 will create a single frame image.
 </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
 Createing an image from a part of a GdPicture Image.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ResImage As Integer
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     ResImage = oGdPictureImaging.CreateClonedGdPictureImageArea(ImageID, 0, 0, 100, 100)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromMemory(System.IntPtr,System.Int32,System.Boolean)">
	<summary>
 Creates a new GdPicture Image from an image file stored within an area of the memory.
 </summary>
	<param name="hMem">A pointer to the area of the memory which stores the document</param>
	<param name="Length">The length in byte of the area</param>
	<param name="UseICM">Set to true to use embedded color management (ICM) if any. Default value is
                      False</param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromByteArray(System.Byte[])">
	<summary>
 Creates a new GdPicture Image from an image file stored within an array of bytes.
 </summary>
	<param name="Data">The image data. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<example>
 How to create an image from an array of bytes
 <code lang="vb.net">
 Dim oFile As System.IO.FileInfo
 oFile = New System.IO.FileInfo("myimage.gif")
 
 Dim oFileStream As System.IO.FileStream = oFile.OpenRead()
 Dim lBytes As Integer = CInt(oFileStream.Length)
 
 If (lBytes &gt; 0) Then
    Dim fileData(lBytes - 1) As Byte
    Dim ImageID As Integer
 
    oFileStream.Read(fileData, 0, lBytes)
    oFileStream.Close()
    ImageID = oGdPictureImaging.CreateGdPictureImageFromByteArray(fileData)
 End If
 </code>
	</example>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SaveAsByteArray(System.Int32,System.Byte[]@,System.Int32@,GdPicture.DocumentFormat,System.Int32)"/>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif files. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromByteArrayICM(System.Byte[])">
	<summary>
 Creates a new GdPicture Image from an image file stored within an array of bytes. This function uses
 embedded color management (ICM).
 </summary>
	<param name="Data">The image data. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<example>
 How to create an image from an array of bytes
 <code lang="vb.net">
 Dim oFile As System.IO.FileInfo
 oFile = New System.IO.FileInfo("myimage.jpg")
 
 Dim oFileStream As System.IO.FileStream = oFile.OpenRead()
 Dim lBytes As Integer = CInt(oFileStream.Length)
 
 If (lBytes &gt; 0) Then
    Dim fileData(lBytes - 1) As Byte
    Dim ImageID As Integer
 
    oFileStream.Read(fileData, 0, lBytes)
    oFileStream.Close()
    ImageID = oGdPictureImaging.CreateGdPictureImageFromByteArrayICM(fileData)
 End If
 </code>
	</example>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SaveAsByteArray(System.Int32,System.Byte[]@,System.Int32@,GdPicture.DocumentFormat,System.Int32)"/>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif files. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromClipboard">
	<summary>
 Creates a new GdPicture Image from Clipboard content.
 </summary>
	<remarks>
 If success, set the created image as the native GdPicture image.
 </remarks>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
 Creating a GdPicture image from a ClipBoard Content.
 <code lang="vb.net">
      Dim ResImage As Integer
     ResImage = oGdPictureImaging.CreateGdPictureImageFromClipboard()
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromDIB(System.IntPtr)">
	<summary>
 Creates a new GdPicture Image from a Device Independent Bitmap handle (DIB).
 </summary>
	<param name="Dib">Pointer to a Microsoft® Windows® Graphics Device Interface (GDI) BITMAPINFO
                   structure. </param>
	<remarks>
 The Device Independent Bitmap (DIB) is the format which is used to store bitmaps in .bmp files.
 </remarks>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
  How to import/export image from/to DIB.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ResImage As Integer
     Dim Dib As IntPtr
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Dib = oGdPictureImaging.GetDibFromGdPictureImage(ImageID)
     ResImage = oGdPictureImaging.CreateGdPictureImageFromDIB(Dib)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromGdiplusImage(System.IntPtr)">
	<summary>
 Creates a new GdPicture Image from a gdiplus image handle.
 </summary>
	<param name="GdiplusImage">Pointer to a gdiplus image handle. If success, set the created image as a
                            GdPicture image. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
 How to import/export  a GdPicture Image from/to GdiPlus Image
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim GdiImg As IntPtr
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     GdiImg = oGdPictureImaging.GetGdiplusImageFromGdPictureImage(ImageID)
     ResImg = oGdPictureImaging.CreateGdPictureImageFromGdiplusImage(GdiImg)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromFile(System.String)">
	<summary>
 Creates a new GdPicture Image based on an image file.
 </summary>
	<param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files. 
 </remarks>
	<example>
 How to ia GdPictureImage from File
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromMetaFile(System.String)">
	<summary>
 Creates a new GdPicture Image based on a metafile image file.
 </summary>
	<param name="FilePath">The path of the file to open. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 Supported formats are EMF and WMF 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromMetaFile(System.String,System.Single)">
	<summary>
 Creates a new GdPicture Image based on a metafile image file multiplying the image size by a
 specified factor.
 </summary>
	<param name="FilePath">The path of the file to open. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="ScaleBy">Multiplies the image size by a specified factor. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 Supported formats are EMF and WMF 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromFileICM(System.String)">
	<summary>
 Creates a new GdPicture Image based on an image file. This function uses Integrated Color
 Management (ICM).
 </summary>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files. The new Image object applies color
 correction according to color management information that is embedded in the image file. Embedded
 information can include International Color Consortium (ICC) profiles, gamma values, and chromaticity
 information.
 
 
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files.
 </remarks>
	<param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
 How to create a GdPictureImage from File using ICM
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFileICM("")
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromHBitmap(System.IntPtr)">
	<summary>
 Creates a new GdPicture Image from an hBitmap handle.
 </summary>
	<param name="hBitmap">Handle to a GDI bitmap. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
 How to import/export  a GdPicture Image from/to HBITMAP
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim HBitmap As IntPtr
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     HBitmap = oGdPictureImaging.GetHBitmapFromGdPictureImage(ImageID)
     ResImg = oGdPictureImaging.CreateGdPictureImageFromHBitmap(HBitmap)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromBitmap(System.Drawing.Bitmap)">
	<summary>
 Creates a new GdPicture Image from a System.Drawing.Bitmap object.
 </summary>
	<param name="bm">Bitmap object. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
 How to import/export Gdpicture Image from/to Bitmap
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ResImage As Integer
     Dim Bm As Bitmap
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Bm = oGdPictureImaging.GetBitmapFromGdPictureImage(ImageID)
     ResImage = oGdPictureImaging.CreateGdPictureImageFromBitmap(Bm)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromHICON(System.IntPtr)">
	<summary>
 Creates a new GdPicture Image from an icon handle.
 </summary>
	<param name="hicon">Handle to a Microsoft® Windows® Graphics Device Interface (GDI) icon. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
 How to import/export  a GdPicture Image from/to HICON
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim HICON As IntPtr
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     HICON = oGdPictureImaging.GetHICONFromGdPictureImage(ImageID)
     ResImg = oGdPictureImaging.CreateGdPictureImageFromHICON(HBitmap)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromHwnd(System.IntPtr)">
	<summary>
 Creates a new GdPicture Image from a window handle.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. This must be a top-level window or a child of
                      a top level window. </param>
	<remarks>
 You can get the Windows Desktop hwnd with the GetDesktopHwnd function.
 </remarks>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GetDesktopHwnd"/>
	<example>
 How to create a GdPicture Image from HWND
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim Hwnd As IntPtr
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     Hwnd = oGdPictureImaging.GetDesktopHwnd()
     ResImg = oGdPictureImaging.CreateGdPictureImageFromHwnd(Hwnd)
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromRawBits(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)">
	<summary>
 Creates a new GdPicture Image from raw bitmap in memory.
 </summary>
	<remarks>
 Warning: Do not remove the raw bitmap from the memory until you delete the created GdPicture Image.
 </remarks>
	<param name="Width">Specifies the width, in pixels, of the bitmap. </param>
	<param name="Height">Specifies the height, in pixels, of the bitmap. </param>
	<param name="Stride">Specifies the byte offset between the beginning of one scan line and the
                      next. This is usually (but not necessarily) the number of bytes in the
                      pixel format (for example, 2 for 16 bits per pixel) multiplied by the
                      width of the bitmap. The value passed to this parameter must be a multiple
                      of four. </param>
	<param name="PixelFormat">specifies the pixel format of the bitmap. A member of the PixelFormat
                           enumeration. </param>
	<param name="Bits">Pointer to an array of bytes that contains the pixel data. The caller is
                    responsible for allocating and freeing the block of memory pointed to by
                    this parameter. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromStream(System.IO.Stream)">
	<summary>
 Creates a new GdPicture Image from an image stored into a Stream Object.
 </summary>
	<param name="Stream">System.IO.Stream object storing the image data. </param>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files.
 </remarks>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromIStream(System.Runtime.InteropServices.ComTypes.IStream)">
	<summary>
 Creates a new GdPicture Image from an image stored into an IStream Object.
 </summary>
	<param name="Stream">An IStream object storing the image data.</param>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files.
 </remarks>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromStreamICM(System.IO.Stream)">
	<summary>
 Creates a new GdPicture Image from an image stored into a Stream Object. This function
 uses embedded color management (ICM).
 </summary>
	<param name="Stream">System.IO.Stream object storing the image data. </param>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files.
 </remarks>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromIStreamICM(System.Runtime.InteropServices.ComTypes.IStream)">
	<summary>
 Creates a new GdPicture Image from an image stored into an IStream Object. This function
 uses embedded color management (ICM).
 </summary>
	<param name="Stream">An IStream object storing the image data.</param>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files.
 </remarks>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromString(System.String)">
	<summary>
 Creates a new GdPicture Image from image data stored within string data (Encoding 1252).
 </summary>
	<param name="ImageData">String which contains the image file data. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromStringICM(System.String)">
	<summary>
 Creates a new GdPicture Image from image data stored within string data (Encoding 1252). This function uses embedded
 color management (ICM).
 </summary>
	<param name="ImageData">String which contains the image file data. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromFTP(System.String,System.String,System.String,System.String,System.Int32)">
	<summary>
 Creates a new GdPicture Image from an image file stored in a distant server using FTP protocol.
 </summary>
	<param name="Host">The host server IE: ftp.gdicture.com </param>
	<param name="Path">The image file path into the distant server IE: /images/nature.jpg </param>
	<param name="Login">User Login. </param>
	<param name="Password">User Password. </param>
	<param name="FTPPort">The FTP port number used. Usually 21. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromHTTP(System.String,System.String,System.Int32)">
	<summary>
 Creates a new GdPicture Image from an image file stored in a distant server using HTTP protocol.
 </summary>
	<param name="Host">The host server. IE: www.gdpicture.com </param>
	<param name="Path">The image file path into the distant server .IE: /images/nature.jpg </param>
	<param name="HTTPPort">The HTTP port number used. Usually 80 or 443 to use https transfert mode. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetHttpTransfertBufferSize(System.Int32)"/>
	<remarks>
 Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires
 Plugin), IFF, HDR, Raw Fax G3, EXR, DDS and Dr. Halo files.
 
 Note for multipage images (TIFF and GIF):
 
 By default, the class loads multipage images (GIF and TIFF) as read only.
 
 If you want to open multipage images as read &amp; write, you should the TiffOpenMultiPageForWrite()
 specifying False. function for tiff files or the GifOpenMultiFrameForWrite() function for gif
 files. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.CreateNewGdPictureImage(System.Int32,System.Int32,System.Int16,System.Int32)">
	<summary>
 Creates a new empty GdPicture Image.
 </summary>
	<param name="Width">The width in pixel of the image. </param>
	<param name="Height">The height in pixel of the image. </param>
	<param name="BitDepth">Bit depth of the image. </param>
	<param name="BackColor">Color value. You can obtain a suitable value by using the ARGBI() function.
                         Background color of the image. This parameter is ignored for indexed bitmap.
                         </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 How to create a new GdPicture Image
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ResImg = oGdPictureImaging.CreateNewGdPictureImage(250, 250, 24, oGdPictureImaging.ARGB(255,0,0,0))
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateNewGdPictureImage(System.Int32,System.Int32,System.Int16,System.Drawing.Color)">
	<summary>
 Creates a new empty GdPicture Image.
 </summary>
	<param name="Width">The width in pixel of the image. </param>
	<param name="Height">The height in pixel of the image. </param>
	<param name="BitDepth">Bit depth of the image. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function.
                         Background color of the image. This parameter is ignored for indexed bitmap.
                         </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 How to create a new GdPicture Image
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ResImg = oGdPictureImaging.CreateNewGdPictureImage(250, 250, 24, oGdPictureImaging.ARGB(255,0,0,0))
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateNewGdPictureImage(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.Drawing.Color)">
	<summary>
 Creates a new empty GdPicture Image.
 </summary>
	<param name="Width">The width in pixel of the image. </param>
	<param name="Height">The height in pixel of the image. </param>
	<param name="PixelFormat">A member of the PixelFormat enumeration. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function.
                         Background color of the image. This parameter is ignored for indexed bitmap.
                         </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 How to create a new GdPicture Image using Pixel Format
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ResImg = oGdPictureImaging.CreateNewGdPictureImage(250, 250, PixelFormat.Format24bppRgb, oGdPictureImaging.ARGB(255,0,0,0))
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRCreateTemplateFromFile(System.String)">
	<summary>
 Creates a new Document Identifier Template from an image file.
 </summary>
	<param name="FilePath">The path of the image from which the new template will be created. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
 The created template ID if success else, -1 if fail. check the GetStat() function to get the reason
 on this result.
 </returns>
	<example>
 How to create document templates and identify the one which has the closest similar content to an
 image file.
 <code lang="vb.net">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim nCloserTemplate As Integer
 
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFile("template1.tif")
 If TemplateID1 = 0 Then
    MsgBox("Can't create TemplateID1 " + "Error number: " + Str(oGdPictureImaging.GetStat))
 End If
 
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateFromFile("template2.tif")
 If TemplateID2 = 0 Then
    MsgBox("Can't create TemplateID2 " + "Error number: " + Str(oGdPictureImaging.GetStat))
 End If
 
 
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 
 Select Case nCloserTemplate
        Case TemplateID1
             MsgBox("This image seems to get best similar content as TemplateID1. Confidence is: " + Str(oGdPictureImaging.ADRGetLastConfidence) + " %")
        Case TemplateID2
             MsgBox("This image seems to get best similar content as TemplateID2. Confidence is: " + Str(oGdPictureImaging.ADRGetLastConfidence) + " %")
 End Select
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRCreateTemplateEmpty">
	<summary>
 Creates a new empty Document Identifier Template. Then, you can add images in this template
 using the ADRAddGdPictureImageToTemplate() function.
 </summary>
	<returns>
 The created template ID if success else, -1 if fail. check the GetStat() function to get the reason
 on this result.
 </returns>
	<example>
 How to create document templates and identify the one which has the closest similar content to an
 image file.
 <code lang="vb.net">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim ImageID1 As Integer, ImageID2 As Integer
 Dim nCloserTemplate As Integer
 
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MsgBox "Can't add image to TemplateID1 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 'We create the second template from an other kind of image
 
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("template2.tif")
 
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID2, ImageID2) &lt;&gt; OK Then
    MsgBox "Can't add image to TemplateID2 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 
 Select Case nCloserTemplate
        Case TemplateID1
             MsgBox "This image seems to get best similar content as TemplateID1. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
        Case TemplateID2
             MsgBox "This image seems to get best similar content as TemplateID2. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
 End Select
 
 
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRCreateTemplateFromFileICM(System.String)">
	<summary>
 Creates a new Document Identifier Template from an image file. This function uses Integrated
 Color Management (ICM).
 </summary>
	<param name="FilePath">The path of the image from which the new template will be created. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
 The created template ID if success else, -1 if fail. check the GetStat() function to get the reason
 on this result.
 </returns>
	<example>
 How to create document templates and identify the one which has the closest similar content to an
 image file.
 <code lang="vb.net">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim nCloserTemplate As Integer
 
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFileICM("template1.tif")
 If TemplateID1 = 0 Then
    MsgBox "Can't create TemplateID1 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateFromFileICM("template2.tif")
 If TemplateID2 = 0 Then
    MsgBox "Can't create TemplateID2 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFileICM("document.tif")
 
 Select Case nCloserTemplate
        Case TemplateID1
             MsgBox "This image seems to get best similar content as TemplateID1. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
        Case TemplateID2
             MsgBox "This image seems to get best similar content as TemplateID2. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
 End Select
 
 
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRCreateTemplateFromGdPictureImage(System.Int32)">
	<summary>
 Creates a new Document Identifier Template from a GdPicture Image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The image from which the new template will be
                       created. </param>
	<returns>
 The created template ID if success else, -1 if fail. check the GetStat() function to get the reason
 on this result.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ADRCreateTemplateFromFile(System.String)"/>
	<example>
 How to create document templates from a gdpicture Image
 <code lang="vb.net">
 Dim TemplateID As Integer
 Dim nCloserTemplate As Integer
 Dim ImageID As Integer,
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 
 'We create the first template from an image
 TemplateID = oGdPictureImaging.ADRCreateTemplateFromGdPictureImage(ImageID)
 If TemplateID1 = 0 Then
    MsgBox("Can't create TemplateID1 " + "Error number: " + Str(oGdPictureImaging.GetStat))
 End If
 
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRAddGdPictureImageToTemplate(System.Int32,System.Int32)">
	<summary>
 Adds an image to a Document Identifier Template from a GdPicture Image.
 </summary>
	<param name="TemplateID">The existing template ID to add the new image. </param>
	<param name="ImageID">The image to add to the existing template. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
 How to create document templates and identify the one which has the closest similar content to an
 image file.
 <code lang="vb.net">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim ImageID1 As Integer, ImageID2 As Integer
 Dim nCloserTemplate As Integer
 
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MsgBox "Can't add image to TemplateID1 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 'We create the second template from an other kind of image
 
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("template2.tif")
 
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID2, ImageID2) &lt;&gt; OK Then
    MsgBox "Can't add image to TemplateID2 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 
 Select Case nCloserTemplate
        Case TemplateID1
             MsgBox "This image seems to get best similar content as TemplateID1. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
        Case TemplateID2
             MsgBox "This image seems to get best similar content as TemplateID2. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
 End Select
 
 
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRDeleteTemplate(System.Int32)">
	<summary>
 Deletes a Document Identifier Template.
 </summary>
	<param name="TemplateID">The existing template ID to delete. </param>
	<returns>
 True if deleted, else False (unknown template). 
 </returns>
	<example>
 How to create document templates and identify the one which has the closest similar content to an
 image file.
 <code lang="vb.net">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim ImageID1 As Integer, ImageID2 As Integer
 Dim nCloserTemplate As Integer
 
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MsgBox "Can't add image to TemplateID1 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 'We create the second template from an other kind of image
 
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("template2.tif")
 
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID2, ImageID2) &lt;&gt; OK Then
    MsgBox "Can't add image to TemplateID2 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 
 Select Case nCloserTemplate
        Case TemplateID1
             MsgBox "This image seems to get best similar content as TemplateID1. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
        Case TemplateID2
             MsgBox "This image seems to get best similar content as TemplateID2. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
 End Select
 
 
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRSetTemplateTag(System.Int32,System.String)">
	<summary>
 Sets a TAG to an existing template.
 
 Tip: this can be the name of the Template Identifier.
 </summary>
	<param name="TemplateID">An existing template ID. </param>
	<param name="TemplateTag">The tag value. Must be &lt; 256 characters length. </param>
	<returns>
 True if success, else False (unknown template). 
 </returns>
</member><member name="M:GdPicture.GdPictureImaging.ADRLoadTemplateConfig(System.String)">
	<summary>
 Loads a complete Template Configuration From a file previously saved with the ADRSaveTemplateConfig()
 function.
 </summary>
	<param name="FileConfig">The path of the template configuration file. </param>
	<returns>
 True if success, else False (invalid file content). 
 </returns>
</member><member name="M:GdPicture.GdPictureImaging.ADRStartNewTemplateConfig">
	<summary>
 Resets the current Template Configuration, if existing (deletes all template identifiers), and
 start a new one. 
 </summary>
</member><member name="M:GdPicture.GdPictureImaging.ADRSaveTemplateConfig(System.String)">
	<summary>
 Saves the current Template Configuration within a file in order to load it later using the ADRLoadTemplateConfig()
 function.
 </summary>
	<param name="FileConfig">The path of the template configuration file to create. </param>
	<returns>
 True if success, else False (can't create the file or empty template configuration). 
 </returns>
</member><member name="M:GdPicture.GdPictureImaging.ADRGetTemplateTag(System.Int32)">
	<summary>
  Gets a TAG to an existing template.
  </summary>
	<param name="TemplateID">An existing template ID. </param>
	<returns>
  The template TAG value.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.ADRGetTemplateImageCount(System.Int32)">
	<summary>
 Returns the number of images used in a Document Identifier Template.
 </summary>
	<param name="TemplateID">An existing template ID. </param>
	<returns>
 The number of image on which the Document Identifier Template is based. 
 </returns>
</member><member name="M:GdPicture.GdPictureImaging.ADRGetTemplateCount">
	<summary>
 Returns the current number of Document Identifier Templates.
 </summary>
	<returns>
 The number of document identifier templates. 
 </returns>
</member><member name="M:GdPicture.GdPictureImaging.ADRGetTemplateID(System.Int32)">
	<summary>
 Returns a Document Identifier Template ID from his index.
 </summary>
	<param name="TemplateNo">Template index. Value between 1 and ADRGetTemplateCount(). </param>
	<returns>
 The Template ID. If TemplateNo is invalid, returns -1. 
 </returns>
</member><member name="M:GdPicture.GdPictureImaging.ADRGetCloserTemplateForGdPictureImage(System.Int32)">
	<summary>
 Performs a Documents Recognition Operation from a GdPicture image and returns the Document
 Identifier Template ID which has the best similar content.
 </summary>
	<param name="ImageID">The GdPicture Image. </param>
	<returns>
 The Template ID which has the best similar content to the specified image.
 </returns>
	<example>
 How to create document templates and identify the one which has the closest similar content to an
 image file.
 <code lang="vb.net">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim nCloserTemplate As Integer
 Dim nImage as Integer
 
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFile("template1.tif")
 If TemplateID1 = 0 Then
    MsgBox "Can't create TemplateID1 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateFromFile("template2.tif")
 If TemplateID2 = 0 Then
    MsgBox "Can't create TemplateID2 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 
 'Now, we will try to identify an image.
 nImage = CreateGdPictureImageFromFile("document.tif")
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForGdPictureImage("document.tif")
 
 Select Case nCloserTemplate
        Case TemplateID1
             MsgBox "This image seems to get best similar content as TemplateID1. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
        Case TemplateID2
             MsgBox "This image seems to get best similar content as TemplateID2. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
 End Select
 oGdPictureImaging.ReleaseGdPictureImage(nImage)
 
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRGetCloserTemplateForFile(System.String)">
	<summary>
 Performs a Documents Recognition Operation from an image file and returns the Document Identifier
 Template ID which has the best similar content.
 </summary>
	<param name="FilePath">The path of the image to identify. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
 The Template ID which has the best similar content to the specified image.
 </returns>
	<example>
 How to create document templates and identify the one which has the closest similar content to an
 image file.
 <code lang="vb.net">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim nCloserTemplate As Integer
 
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFile("template1.tif")
 If TemplateID1 = 0 Then
    MsgBox "Can't create TemplateID1 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateFromFile("template2.tif")
 If TemplateID2 = 0 Then
    MsgBox "Can't create TemplateID2 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 
 Select Case nCloserTemplate
        Case TemplateID1
             MsgBox "This image seems to get best similar content as TemplateID1. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
        Case TemplateID2
             MsgBox "This image seems to get best similar content as TemplateID2. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
 End Select
 
 
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRGetCloserTemplateForFileICM(System.String)">
	<summary>
 Performs a Documents Recognition Operation from an image file and returns the Document Identifier
 Template ID which has the best similar content.
 
 This function uses Integrated Color Management (ICM).
 </summary>
	<param name="FilePath">The path of the image to identify. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
 The Template ID which has the best similar content to the specified image.
 </returns>
	<example>
 How to create document templates and identify the one which has the closest similar content to an
 image file.
 <code lang="vb.net">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim nCloserTemplate As Integer
 
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFileICM("template1.tif")
 If TemplateID1 = 0 Then
    MsgBox "Can't create TemplateID1 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateFromFileICM("template2.tif")
 If TemplateID2 = 0 Then
    MsgBox "Can't create TemplateID2 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFileICM("document.tif")
 
 Select Case nCloserTemplate
        Case TemplateID1
             MsgBox "This image seems to get best similar content as TemplateID1. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
        Case TemplateID2
             MsgBox "This image seems to get best similar content as TemplateID2. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
 End Select
 
 
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRGetLastConfidenceFromTemplate(System.Int32)">
	<summary>
 Returns the Confidence from a specific template obtained during the last Documents Recognition
 Operation.
 </summary>
	<param name="TemplateID">The template ID. </param>
	<returns>
 Confidence from specified template. Value between 0 and 100 (identical document). 
 </returns>
	<example>
 How to create document templates and identify the confidence of an ADR operation from a certain template
 <code lang="vb.net">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim ImageID1 As Integer, ImageID2 As Integer
 Dim nCloserTemplate As Integer
 Dim Confidence
 
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("template1.tif")
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID1, ImageID1) &lt;&gt; OK Then
    MsgBox "Can't add image to TemplateID1 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 'We create the second template from an other kind of image
 
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateEmpty
 ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("template2.tif")
 
 If  oGdPictureImaging.ADRAddGdPictureImageToTemplate(TemplateID2, ImageID2) &lt;&gt; OK Then
    MsgBox "Can't add image to TemplateID2 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 
 Confidence = oGdPictureImaging.ADRGetLastConfidenceFromTemplate(nCloserTemplate)
 
 
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ADRGetLastConfidence">
	<summary>
 Returns the Confidence of the closest template obtained during the last Documents Recognition
 Operation.
 </summary>
	<returns>
 Last Confidence. Value between 0 and 100 (identical document).
 </returns>
	<example>
 How to create document templates and identify the one which has the closest similar content to an
 image file.
 <code lang="vb.net">
 Dim TemplateID1 As Integer, TemplateID2 As Integer
 Dim nCloserTemplate As Integer
 
 'We create the first template from an image
 TemplateID1 = oGdPictureImaging.ADRCreateTemplateFromFile("template1.tif")
 If TemplateID1 = 0 Then
    MsgBox "Can't create TemplateID1 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 'We create the second template from an other kind of image
 TemplateID2 = oGdPictureImaging.ADRCreateTemplateFromFile("template2.tif")
 If TemplateID2 = 0 Then
    MsgBox "Can't create TemplateID2 " + "Error number: " + str(oGdPictureImaging.GetStat)
 End If
 
 
 'Now, we will try to identify an image.
 nCloserTemplate = oGdPictureImaging.ADRGetCloserTemplateForFile("document.tif")
 
 Select Case nCloserTemplate
        Case TemplateID1
             MsgBox "This image seems to get best similar content as TemplateID1. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
        Case TemplateID2
             MsgBox "This image seems to get best similar content as TemplateID2. Confidence is: " + str(oGdPictureImaging.ADRGetLastConfidence) + " %"
 End Select
 
 
 'Release created templates from memory
 oGdPictureImaging.ADRDeleteTemplate (TemplateID1)
 oGdPictureImaging.ADRDeleteTemplate (TemplateID2)
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffGetPageCount(System.Int32)">
	<summary>
 Returns the number of pages currently available in a multipage tiff image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The multipage tiff image. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsMultiPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSelectPage(System.Int32,System.Int32)"/>
	<returns>
 Number of pages currently available in the multipage tiff image. Returns 0 if the image is not a
 multipage tiff image.
 </returns>
	<remarks>
 This function works with Editable multipage tiff image and with multipage tiff images opened as read
 only.
 </remarks>
	<example>
 How to obtain a multipage tiff image page count.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim PageCount As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     PageCount = oGdPictureImaging.TiffGetPageCount(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffGetCurrentPage(System.Int32)">
	<summary>
 Returns the current page (or selected page) in a multipage tiff image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The multipage tiff image. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsMultiPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSelectPage(System.Int32,System.Int32)"/>
	<returns>
 Returns the current page of the multipage tiff image. Returns 0 if the image have not page selected.
 </returns>
	<remarks>
 This function works with Editable multipage tiff image and with multipage tiff images opened as read
 only.
 </remarks>
	<example>
 How to obtain a certain page from a multipage tiff image.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Page As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
 
     Page = oGdPictureImaging.TiffGetCurrentPage(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffSelectPage(System.Int32,System.Int32)">
	<summary>
  Selects a page of a multipage tiff image. The page can now be edited or saved to a different file.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The multipage tiff image. (Can be an editable
                        multipage tiff or a read only tiff image.) </param>
	<param name="Page">Page no between 1 and page count. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffGetPageCount(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsMultiPage(System.Int32)"/>
	<remarks>
  This function works with editable multipage tiff image 
  and with multipage tiff images opened as read only.
  </remarks>
	<example>
  Draw page number on each page of a multipage tiff image
  <code lang="vb.net">
  Dim i As Integer
  Dim TiffImageID As Integer
  Dim PageCount As Integer
  Dim oGdPictureImaging As New GdPictureImaging
  
  oGdPictureImaging.TiffOpenMultiPageForWrite(True)
  TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFile("input.tif")
  PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
  
  For i = 1 To PageCount
      oGdPictureImaging.TiffSelectPage(TiffImageID, i)
      oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
      oGdPictureImaging.ConvertTo1Bpp(TiffImageID) 'Comment this line to keep true color image
  Next i
  
  
  oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "output.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffIsMultiPage(System.Int32)">
	<summary>
  Checks if an image is a multipage tiff image. This image can be a read only multipage tiff image or
  an editable multipage tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to check. </param>
	<returns>
  True if the image is a multipage tiff image, else false.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffGetPageCount(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSelectPage(System.Int32,System.Int32)"/>
	<example>
  How to know whether a tiff image is a multiple image or not.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim MultiPageImage As Boolean
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
  
      MultiPageImage = oGdPictureImaging.TiffIsMultiPage(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffOpenMultiPageForWrite(System.Boolean)">
	<summary>
  This function controls the way of multipage tiff image loading.
  
  By default, the class loads multipage TIFF images as read only through the following functions:
  
  CreateGdPictureImageFromByteArray
  
  CreateGdPictureImageFromByteArrayICM
  
  CreateGdPictureImageFromFile
  
  CreateGdPictureImageFromFileICM
  
  CreateGdPictureImageFromStream
  
  CreateGdPictureImageFromStreamICM
  
  CreateGdPictureImageFromString
  
  CreateGdPictureImageFromStringICM
  
  CreateGdPictureImageFromFTP
  
  CreateGdPictureImageFromHTTP
  
  
  
  If you want to open multipage TIFF images as read &amp; write, you should use this function specifying False for the WriteAccess parameter.
  </summary>
	<param name="WriteAccess">True to load the multipage tiff images for reading and writing, 
                            else False to open them as read-only. </param>
	<example>
  Openning a MultiPagefile for either writing or reading-only, the following code assumes a multipage image is already loaded
  <code lang="vb.net">
  m_Stat = TiffOpenMultiPageForWrite(True)'Opens an image for Writing and Reading
  m_Stat = TiffOpenMultiPageForWrite(False)'Opens an image for reading-only
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffCreateMultiPageFromFile(System.String)">
	<summary>
  Creates a new editable multipage tiff image based 
  on an image file.
  </summary>
	<param name="FilePath">The path of the file to open.Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  0: The image could not created. Use the GetStat() function to determine the reason this function
  failed.
  
  Non-zero: GdPicture Image Identifier. The created editable multipage tiff image.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files.
  </remarks>
	<example>
  Draw page number on each page of a multipage tiff image
  <code lang="vb.net">
  Dim i As Integer
  Dim TiffImageID As Integer
  Dim PageCount As Integer
  Dim oGdPictureImaging As New GdPictureImaging
  

  oGdPictureImaging.TiffOpenMultiPageForWrite(True)
  TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFile("input.tif")
  PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
  
  For i = 1 To PageCount
      oGdPictureImaging.TiffSelectPage(TiffImageID, i)
      oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
      oGdPictureImaging.ConvertTo1Bpp(TiffImageID) 'Comment this line to keep true color image
  Next i
  
  
  oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "output.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffCreateMultiPageFromFileICM(System.String)">
	<summary>
  Creates a new editable multipage tiff image based
  on an image file. This function uses embedded color management (ICM).
  </summary>
	<param name="FilePath">The path of the file to open. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  0: The image could not created. Use the GetStat() function to determine the reason this function
  failed.
  
  Non-zero: GdPicture Image Identifier. The created editable multipage tiff image.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files. 
  </remarks>
	<example>
  Draw page number on each page of a multipage tiff image
  <code lang="vb.net">
  Dim i As Integer
  Dim TiffImageID As Integer
  Dim PageCount As Integer
  Dim oGdPictureImaging As New GdPictureImaging
  

  oGdPictureImaging.TiffOpenMultiPageForWrite(True)
  TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFileICM("input.tif")
  PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
  
  For i = 1 To PageCount
      oGdPictureImaging.TiffSelectPage(TiffImageID, i)
      oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
      oGdPictureImaging.ConvertTo1Bpp(TiffImageID) 'Comment this line to keep true color image
  Next i
  
  
  oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "output.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffCreateMultiPageFromGdPictureImage(System.Int32)">
	<summary>
  Creates a new editable multipage tiff image from a GdPicture Image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image from witch the new multipage tiff image
                        will be created. </param>
	<returns>
  0: The image could not created. Use the GetStat() function to determine the reason this function
  failed.
  
  Non-zero: GdPicture Image Identifier. The created editable multipage tiff image.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files. 
  </remarks>
	<example>
  Draw page number on each page of a multipage tiff image
  <code lang="vb.net">
  Dim i As Integer
  Dim TiffImageID As Integer
  Dim PageCount As Integer
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  

  oGdPictureImaging.TiffOpenMultiPageForWrite(True)
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
  TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromGdPictureImage(ImageID)
  PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
  
  For i = 1 To PageCount
      oGdPictureImaging.TiffSelectPage(TiffImageID, i)
      oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
      oGdPictureImaging.ConvertTo1Bpp(TiffImageID) 'Comment this line to keep true color image
  Next i
  
  
  oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "output.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)">
	<summary>
  Checks if an image is an editable multipage tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to check. </param>
	<returns>
  True if the image is an editable multipage tiff image, else false. 
  </returns>
	<example>
  How to know whether a multipage tiff image is editable or not.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Editable As Boolean
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
  
      Editable = oGdPictureImaging.TiffIsEditableMultiPage(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffAppendPageFromFile(System.Int32,System.String)">
	<summary>
  Appends a new page from file to the end of an editable multipage tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image in which the
                        page will be added. </param>
	<param name="FilePath">The path of the image to append within the editable multipage tiff image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture.TiffCompression)"/>
	<remarks>
  This function can only be used with an editable multipage tiff image.
  
  To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
  function.
  
  To save modifications brought to the multipage tiff image you need to use the
  TiffSaveMultiPageToFile() function.
  
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files. 
  </remarks>
	<example>
  How to use TiffAppendPageFromFile.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
  
      oGdPictureImaging.TiffAppendPageFromFile(ImageID, "c:\\addition.tiff")
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffAppendPageFromGdPictureImage(System.Int32,System.Int32)">
	<summary>
  Appends a new page from a GdPicture Image to the end of an editable multipage tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image in which
                        the page will be added. </param>
	<param name="ImageToAddID">GdPicture Image Identifier. The image to append within the editable
                             multipage tiff image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture.TiffCompression)"/>
	<remarks>
  This function can only be used with an editable multipage tiff image.
  
  To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
  function.
  
  To save modifications brought to the multipage tiff image you need to use the
  TiffSaveMultiPageToFile() function. 
  </remarks>
	<example>
  How to use TiffAppendPageFromGdPictureImage.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim AddImgID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
      AddImgID = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\addition.tiff")
  
      oGdPictureImaging.TiffAppendPageFromGdPictureImage(ImageID, AddImgID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(AddImgID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffInsertPageFromFile(System.Int32,System.Int32,System.String)">
	<summary>
  Inserts a new page from file at the given position an editable multipage tiff image.
  Page has to be a number smaller or equal than the current number of pages available in the multipage
  tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image in which the
                        page will be inserted. </param>
	<param name="Position">The position to add the new page. Must be a value from 1 to the current
                         number of pages available in the multipage tiff image. </param>
	<param name="FilePath">The path of the image to append within the editable multipage tiff image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture.TiffCompression)"/>
	<remarks>
  This function can only be used with an editable multipage tiff image.
  
  To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
  function.
  
  To save modifications brought to the multipage tiff image you need to use the
  TiffSaveMultiPageToFile() function.
  
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files. 
  </remarks>
	<example>
  How to use TiffInsertPageFromFile.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
  
      oGdPictureImaging.TiffInsertPageFromFile(ImageID, 3, "addition.tiff")
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffInsertPageFromGdPictureImage(System.Int32,System.Int32,System.Int32)">
	<summary>
  Inserts a new page from a GdPicture Image at the given position in an editable multipage tiff image.
  Page has to be a number smaller or equal than the current number of pages available in the multipage
  tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image in which
                        the page will be inserted. </param>
	<param name="Position">The position to add the new page. Must be a value from 1 to the current
                         number of pages available in the multipage tiff image. </param>
	<param name="ImageToAddID">GdPicture Image Identifier. The image to append within the editable
                             multipage tiff image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture.TiffCompression)"/>
	<remarks>
  This function can only be used with an editable multipage tiff image.
  
  To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
  function.
  
  To save modifications brought to the multipage tiff image you need to use the
  TiffSaveMultiPageToFile() function. 
  </remarks>
	<example>
  How to use TiffInsertPageFromGdPictureImage.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim AddImgID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
      AddImgID = oGdPictureImaging.CreateGdPictureImageFromFile("addition.tiff")
  
      oGdPictureImaging.TiffInsertPageFromFile(ImageID, 3, AddImgID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(AddImgID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffSwapPages(System.Int32,System.Int32,System.Int32)">
	<summary>
  Swaps two pages in an editable multipage tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image in which pages
                        will be swapped. </param>
	<param name="Page1">The position of the first page to swap with the second. Must be a value from 1
                      to the current number of pages available in the multipage tiff image. </param>
	<param name="Page2">The position of the second page to swap with the first one. Must be a value
                      from 1 to the current number of pages available in the multipage tiff image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture.TiffCompression)"/>
	<remarks>
  This function can only be used with an editable multipage tiff image.
  
  To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
  function.
  
  To save modifications brought to the multipage tiff image you need to use the
  TiffSaveMultiPageToFile() function. 
  </remarks>
	<example>
  How to swap two pages in a multipage tiff image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
  
      oGdPictureImaging.TiffSwapPages(ImageID, 3, 5)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffMovePage(System.Int32,System.Int32,System.Int32)">
	<summary>
  Moves one page in an editable multipage tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image identifier to move the page.</param>
	<param name="PageNo">The position of the page to move. Must be a value from 1
                      to the current number of pages available in the multipage tiff image. </param>
	<param name="Destination">The destination of the page to move. Must be a value
                      from 1 to the current number of pages available in the multipage tiff image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture.TiffCompression)"/>
	<remarks>
  This function can only be used with an editable multipage tiff image.
  
  To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
  function.
  
  To save modifications brought to the multipage tiff image you need to use the
  TiffSaveMultiPageToFile() function. 
  </remarks>
	<example>
  How to move a page in a multipage tiff image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
  
      oGdPictureImaging.TiffMovePage(ImageID, 1, 2)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffDeletePage(System.Int32,System.Int32)">
	<summary>
  Deletes the page of an editable multipage tiff image on the given position.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image in which a page
                        will be deleted. </param>
	<param name="Page">The position of the page to delete. Must be a value from 1 to the current
                     number of pages available in the multipage tiff image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture.TiffCompression)"/>
	<remarks>
  This function can only be used with an editable multipage tiff image.
  
  To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
  function.
  
  To save modifications brought to the multipage tiff image you need to use the
  TiffSaveMultiPageToFile() function. 
  </remarks>
	<example>
  How to delete a page in a multipage tiff image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("Mutil.tiff")
  
      oGdPictureImaging.TiffDeletePage(ImageID, 5)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture.TiffCompression)">
	<summary>
  Saves aneditable multipage tiff image to a
  multipage tiff file.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image to save as
                        file. </param>
	<param name="FilePath">The path to save the image. </param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)"/>
	<remarks>
  This function can only be used with an editable multipage tiff image.
  
  To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
  function.
  
  
  
  Warning:
  
  - If you are using CCITT3 or CCITT4 compression scheme, make sure to have only 1bpp page within your
  multipage tiff image (else LZW compression will be used).
  </remarks>
	<example>
  Draw page number on each page of a multipage tiff image
  <code lang="vb.net">
  Dim i As Integer
  Dim TiffImageID As Integer
  Dim PageCount As Integer
  Dim oGdPictureImaging As New GdPictureImaging
  

  oGdPictureImaging.TiffOpenMultiPageForWrite(True)
  TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFile("input.tif")
  PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
  
  For i = 1 To PageCount
      oGdPictureImaging.TiffSelectPage(TiffImageID, i)
      oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
      oGdPictureImaging.ConvertTo1Bpp(TiffImageID) 'Comment this line to keep true color image
  Next i
  
  
  oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "output.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffSaveMultiPageToFile(System.Int32,System.String,GdPicture.TiffCompression,System.Int32)">
	<summary>
  Saves aneditable multipage tiff image to a
  multipage tiff file.
  
  This functions takes a jpeg quality parameter.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The editable multipage tiff image to save
                        as file. </param>
	<param name="FilePath">The path to save the image. </param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<param name="JpegQuality">Defines the compression quality between 1 and 100. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffIsEditableMultiPage(System.Int32)"/>
	<remarks>
  This function can only be used with an editable multipage tiff image.
  
  To check if an image is an editable multipage tiff image you can use the TiffIsEditableMultiPage()
  function.
  Warning:
  
  - If you are using CCITT3 or CCITT4 compression scheme, make sure to have only 1bpp page within your
  multipage tiff image (else LZW compression will be used).
  </remarks>
	<example>
  Drawing page number on each page of a multipage tiff image and saving as multipage TIFF with JPEG
  compression
  <code lang="vb.net">
  Dim i As Integer
  Dim TiffImageID As Integer
  Dim PageCount As Integer
  Dim oGdPictureImaging As New GdPictureImaging
  

  oGdPictureImaging.TiffOpenMultiPageForWrite(True)
  TiffImageID = oGdPictureImaging.TiffCreateMultiPageFromFile("input.tif")
  PageCount = oGdPictureImaging.TiffGetPageCount(TiffImageID)
  
  For i = 1 To PageCount
      oGdPictureImaging.TiffSelectPage(TiffImageID, i)
      oGdPictureImaging.DrawText(TiffImageID, "Page " &amp; CStr(i) &amp; " / " &amp; CStr(PageCount), 50, 50, 10, FontStyle.FontStyleRegular, Color.Black, "Arial", True)
  Next i
  
  
  oGdPictureImaging.TiffSaveMultiPageToFile(TiffImageID, "output.tif", TiffCompression.TiffCompressionJPEG, 90)
  oGdPictureImaging.ReleaseGdPictureImage(TiffImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.String,GdPicture.TiffCompression)">
	<summary>
  Stores a GdPicture image as first page of a new multipage tiff file.
  
  You will be able to append new page to the created file using the TiffAddToMultiPageFile() function.
  
  This is the faster way to create multipage tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image to store as the first page
                        of the multipage tiff file.Do not release this image
                        before ending the multipage tiff file with the TiffCloseMultiPageFile()
                        function. (see example).</param>
	<param name="FilePath">The path of the multipage tiff file to create. </param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)"/>
	<remarks>
  Use the TiffCloseMultiPageFile() function when you don't want to append new page to the multipage
  tiff file.
  
  To access to the data of the new created image file you need first to save &amp; close it using the
  ReleaseGdPictureImage() function, then reload it using the CreateGdPictureImageFromFile() function.
  </remarks>
	<example>
  Create multipage tif image from several existing image files:
  <code lang="vb.net">
  Dim ImageID1, ImageID2, ImageID3 As Integer
  
  ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
  ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("image2.jpg")
  ImageID3 = oGdPictureImaging.CreateGdPictureImageFromFile("image3.jpg")
  
  oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID1, "multipage.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.TiffAddToMultiPageFile(ImageID1, ImageID2)
  oGdPictureImaging.TiffAddToMultiPageFile(ImageID1, ImageID3)
  oGdPictureImaging.TiffCloseMultiPageFile(ImageID1)
  
  oGdPictureImaging.ReleaseGdPictureImage(ImageID1)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID3)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.String,GdPicture.TiffCompression,System.Int32)">
	<summary>
  Stores a GdPicture image as first page of a new multipage tiff file.
  
  You will be able to append new page to the created file using the TiffAddToMultiPageFile() function.
  
  This functions takes a jpeg quality parameter.
  
  This is the faster way to create multipage tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image to store as the first page
                        of the multipage tiff file.Do not release this image
                        before ending the multipage tiff file with the TiffCloseMultiPageFile()
                        function. (see example).</param>
	<param name="FilePath">The path of the multipage tiff file to create. </param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<param name="JpegQuality">Defines the compression quality between 1 and 100. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)"/>
	<remarks>
  Use the TiffCloseMultiPageFile() function when you don't want to append new page to the multipage
  tiff file.
  
  To access to the data of the new created image file you need first to save &amp; close it using the
  ReleaseGdPictureImage() function, then reload it using the CreateGdPictureImageFromFile() function.
  </remarks>
	<example>
  Create multipage tif image from several existing image files:
  <code lang="vb.net">
  Dim ImageID1, ImageID2, ImageID3 As Integer
  
  ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
  ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("image2.jpg")
  ImageID3 = oGdPictureImaging.CreateGdPictureImageFromFile("image3.jpg")
  
  oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID1, "multipage.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.TiffAddToMultiPageFile(ImageID1, ImageID2)
  oGdPictureImaging.TiffAddToMultiPageFile(ImageID1, ImageID3)
  oGdPictureImaging.TiffCloseMultiPageFile(ImageID1)
  
  oGdPictureImaging.ReleaseGdPictureImage(ImageID1)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID3)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32)">
	<summary>
  Adds a page to a multipage tiff file created with the TiffSaveAsMultiPageFile() function.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image used with the
                        TiffSaveAsMultiPageFile() function. This must be the first image ot the
                        file. </param>
	<param name="ImageToAddID">GdPicture Image Identifier. The image to append within multipage tiff
                             file. You will be able to release this image after calling this
                             function. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.String,GdPicture.TiffCompression)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)"/>
	<remarks>
  Use the TiffCloseMultiPageFile() function when you don't want to append new page to the multipage
  tiff file.
  </remarks>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Create multipage tif image from several existing image files:
  <code lang="vb.net">
  Dim ImageID1, ImageID2, ImageID3 As Integer
  
  ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
  ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("image2.jpg")
  ImageID3 = oGdPictureImaging.CreateGdPictureImageFromFile("image3.jpg")
  
  oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID1, "multipage.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.TiffAddToMultiPageFile(ImageID1, ImageID2)
  oGdPictureImaging.TiffAddToMultiPageFile(ImageID1, ImageID3)
  oGdPictureImaging.TiffCloseMultiPageFile(ImageID1)
  
  oGdPictureImaging.ReleaseGdPictureImage(ImageID1)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID3)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffCloseMultiPageFile(System.Int32)">
	<summary>
  Terminates and closes a multipage tiff file created with the TiffSaveAsMultiPageFile() function.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image stored as the first page of
                        the multipage tiff file. You will be able to release this image after calling
                        this function. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffSaveAsMultiPageFile(System.Int32,System.String,GdPicture.TiffCompression)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffAddToMultiPageFile(System.Int32,System.Int32)"/>
	<example>
  Create multipage tif image from several existing image files:
  <code lang="vb.net">
  Dim ImageID1, ImageID2, ImageID3 As Integer
  
  ImageID1 = oGdPictureImaging.CreateGdPictureImageFromFile("image1.tif")
  ImageID2 = oGdPictureImaging.CreateGdPictureImageFromFile("image2.jpg")
  ImageID3 = oGdPictureImaging.CreateGdPictureImageFromFile("image3.jpg")
  
  oGdPictureImaging.TiffSaveAsMultiPageFile(ImageID1, "multipage.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.TiffAddToMultiPageFile(ImageID1, ImageID2)
  oGdPictureImaging.TiffAddToMultiPageFile(ImageID1, ImageID3)
  oGdPictureImaging.TiffCloseMultiPageFile(ImageID1)
  
  oGdPictureImaging.ReleaseGdPictureImage(ImageID1)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID3)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffMerge2Files(System.String,System.String,System.String,GdPicture.TiffCompression)">
	<summary>
  Merge two image files together and save them as multipage tiff image.
  </summary>
	<param name="FilePath1">The first image file path to merge. </param>
	<param name="FilePath2">The second image file path to merge. </param>
	<param name="FileDest">The destination image file path to create. </param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files.
  
  - If you are using CCITT3 or CCITT4 compression scheme, make sure to have only 1bpp input images
  (else LZW compression will be used).
  </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.TiffMergeFiles(System.String[],System.String,GdPicture.TiffCompression)"/>
	<example>
  Merge file1.jpg, file2.jpg, file3.tif &amp; file4.gif images
  <code lang="vb.net">
  m_Stat = TiffMergeFiles("c:\\imagesfile1.tiff", "c:\\imagesfile2.tiff", "c:\\imagesoutput.tif", CompressionLZW)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffMergeFiles(System.String[],System.String,GdPicture.TiffCompression)">
	<summary>
  Merges 2 or more image files together and save them as multipage tiff image.
  </summary>
	<param name="FilePath">Array of String representing the paths of the images to merge. </param>
	<param name="FileDest">The destination image file path to create. </param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files.
  
  - If you are using CCITT3 or CCITT4 compression scheme, make sure to have only 1bpp input images
  (else LZW compression will be used). 
  </remarks>
	<example>
  How to to merge two tiff files.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim FilePaths(2) As String
 
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      FilePaths(0) = "c:\\imagesfile1.jpg"
      FilePaths(1) = "c:\\imagesfile2.jpg"
      oGdPictureImaging.TiffMergeFiles(FilePaths, "c:\\imagesoutput.tif", CompressionLZW)
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TiffMergeFileList(System.String,System.String,GdPicture.TiffCompression)">
	<summary>
  Merge a list of files into a multipage tiff image.
  </summary>
	<param name="FilesList">Input The list of files. Each file must be separated with a comma. </param>
	<param name="FileDest">The destination image file path to create. </param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  Supported formats are RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
  JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
  SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
  EXR, DDS and Dr. Halo files. - If you are using CCITT3 or CCITT4 compression scheme, make sure to
  have only 1bpp input images (else LZW compression will be used).
  </remarks>
	<example>
  Merge file1.jpg, file2.jpg, file3.tif &amp; file4.gif images
  <code lang="vb.net">
  m_Stat = TiffMergeFileList("c:\\imagesfile1.jpg,c:imagesfile2.jpg;c:imagesfile3.tif,c:imagesfile4.gif", "c:\\imagesoutput.tif", CompressionLZW)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JBIG2SaveAsMultiPageFile(System.Int32,System.String)">
	<summary>
  Stores a GdPicture image as first page of a new multipage JBIG2 file.
  
  You will be able to append new page to the created file using the JBIG2AddToMultiPageFile() function.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image to store as the first page
                        of the multipage JBIG2 file.Do not release this image
                        before ending the multipage JBIG2 file with the JBIG2CloseMultiPageFile()
                        function. (see example).</param>
	<param name="FilePath">The path of the multipage tiff file to create. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2AddToMultiPageFile(System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2CloseMultiPageFile(System.Int32)"/>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Converts multipage TIFF to multipage JBIG2
  <code lang="vb.net">
       Dim oGdPictureImaging As New GdPictureImaging
 
       Dim TiffID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\multipage.tif")
       Dim Jbig2ID As Integer = 0
       For i As Integer = 1 To oGdPictureImaging.TiffGetPageCount(TiffID)
          If i = 1 Then
             Jbig2ID = oGdPictureImaging.CreateClonedGdPictureImageI(TiffID)
             oGdPictureImaging.JBIG2SaveAsMultiPageFile(Jbig2ID, "c:\\multipage.jb2")
          Else
             oGdPictureImaging.TiffSelectPage(TiffID, i)
             oGdPictureImaging.JBIG2AddToMultiPageFile(Jbig2ID, TiffID)
          End If
       Next
       oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
       oGdPictureImaging.ReleaseGdPictureImage(TiffID)
       oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 
       MsgBox("done")
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JBIG2AddToMultiPageFile(System.Int32,System.Int32)">
	<summary>
  Adds a page to a multipage JBIG2 file created with the JBIG2SaveAsMultiPageFile() function.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image used with the
                        JBIG2SaveAsMultiPageFile() function. This must be the first image ot the
                        file. </param>
	<param name="ImageToAddID">GdPicture Image Identifier. The image to append within multipage JBIG2
                             file. You will be able to release this image after calling this
                             function. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2SaveAsMultiPageFile(System.Int32,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2CloseMultiPageFile(System.Int32)"/>
	<remarks>
  Use the JBIG2CloseMultiPageFile() function when you don't want to append new page to the multipage
  JBIG2 file.
  </remarks>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Converts multipage TIFF to multipage JBIG2
  <code lang="vb.net">
       Dim oGdPictureImaging As New GdPictureImaging
 
       Dim TiffID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\multipage.tif")
       Dim Jbig2ID As Integer = 0
       For i As Integer = 1 To oGdPictureImaging.TiffGetPageCount(TiffID)
          If i = 1 Then
             Jbig2ID = oGdPictureImaging.CreateClonedGdPictureImageI(TiffID)
             oGdPictureImaging.JBIG2SaveAsMultiPageFile(Jbig2ID, "c:\\multipage.jb2")
          Else
             oGdPictureImaging.TiffSelectPage(TiffID, i)
             oGdPictureImaging.JBIG2AddToMultiPageFile(Jbig2ID, TiffID)
          End If
       Next
       oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
       oGdPictureImaging.ReleaseGdPictureImage(TiffID)
       oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 
       MsgBox("done")
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JBIG2CloseMultiPageFile(System.Int32)">
	<summary>
  Terminates and closes a multipage JBIG2 file created with the JBIG2SaveAsMultiPageFile() function.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image stored as the first page of
                        the multipage JBIG2 file. You will be able to release this image after calling
                        this function. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2SaveAsMultiPageFile(System.Int32,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2AddToMultiPageFile(System.Int32,System.Int32)"/>
	<example>
  Converts multipage TIFF to multipage JBIG2
  <code lang="vb.net">
       Dim oGdPictureImaging As New GdPictureImaging
 
       Dim TiffID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\multipage.tif")
       Dim Jbig2ID As Integer = 0
       For i As Integer = 1 To oGdPictureImaging.TiffGetPageCount(TiffID)
          If i = 1 Then
             Jbig2ID = oGdPictureImaging.CreateClonedGdPictureImageI(TiffID)
             oGdPictureImaging.JBIG2SaveAsMultiPageFile(Jbig2ID, "c:\\multipage.jb2")
          Else
             oGdPictureImaging.TiffSelectPage(TiffID, i)
             oGdPictureImaging.JBIG2AddToMultiPageFile(Jbig2ID, TiffID)
          End If
       Next
       oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
       oGdPictureImaging.ReleaseGdPictureImage(TiffID)
       oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 
       MsgBox("done")
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JBIG2IsMultiPage(System.Int32)">
	<summary>
 Checks if an image is a multipage JBIG2 image
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to check. </param>
	<returns>
 True if the image is a multipage JBIG2 image, else false.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2GetPageCount(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2SelectPage(System.Int32,System.Int32)"/>
	<example>
 Knowing whether a JBIG2 file is a multipage file
 <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      Dim PageCount As Integer
      Dim Multipage As Boolean
 
      Multipage = oGdPictureImaging.JBIG2IsMultiPage(Jbig2ID)
 
      oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
      oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JBIG2SelectPage(System.Int32,System.Int32)">
	<summary>
 Selects a page of a multipage JBIG2 image. The page can now be edited or saved to a different file.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The multipage JBIG2 image.</param>
	<param name="Page">Page no between 1 and page count. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2GetPageCount(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2IsMultiPage(System.Int32)"/>
	<example>
 Selecting a certain page in a Jbig2 Multipage file making is ready for editing
 <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      Dim PageCount As Integer
 
      oGdPictureImaging.JBIG2SelectPage(Jbig2ID)
 
      oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
      oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JBIG2GetPageCount(System.Int32)">
	<summary>
 Returns the number of pages currently available in a multipage JBIG2 image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The multipage JBIG2 image. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2IsMultiPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.JBIG2SelectPage(System.Int32,System.Int32)"/>
	<returns>
 Number of pages currently available in the multipage JBIG2 image. Returns 0 if the image is not a
 multipage JBIG2 image.
 </returns>
	<example>
 Retrieving the number of pages in a JBIG2 file
 <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      Dim PageCount As Integer
      Dim Jbig2ID As Integer
 
      PageCount = oGdPictureImaging.JBIG2GetPageCount(Jbig2ID)
 
      oGdPictureImaging.JBIG2CloseMultiPageFile(Jbig2ID)
      oGdPictureImaging.ReleaseGdPictureImage(Jbig2ID)
 
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PdfCreateRights(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
  Create a value to be used with the "Rights" parameter of PDF functions for saving with encryption.
  </summary>
	<param name="CanPrint">Allows the user to print the document. </param>
	<param name="CanModify">Allows the user to edit the document. </param>
	<param name="CanCopy">Allows the user to copy text and graphics from the document. </param>
	<param name="CanAddNotes">Allows the user to add annotations. </param>
	<param name="CanFillFields">Allows the user to fill in form fields. Only works with 128-bit
                              encryption. </param>
	<param name="CanCopyAccess">Enables copying for use with accessibility features. Only works with
                              128-bit encryption. </param>
	<param name="CanAssemble">Allows the user to assemble the document. Only works with 128-bit
                            encryption. </param>
	<param name="CanPrintFull">Allows high resolution printing of the document. Only works with 128-bit
                             encryption. </param>
	<returns>
  A combination of members of the PdfRight enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsPDF(System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
	<summary>
  Saves a GdPicture image as single page pdf.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="PDFA">True to generate PDF in PDF/A 1-b format else False. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert JPEG file to PDF/A 1-b
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = ogdpictureimaging.CreateGdPictureImageFromFile("image.jpg")
  If ImageID &lt;&gt; 0 Then
      ogdpictureimaging.SaveAsPDF(ImageID, "image.pdf", True, "PDF Title", "PDF Author", "PDF Subject", "key1;key2;key3", "The Creator")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsPDF(System.Int32,System.IO.Stream,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
	<summary>
  Saves a GdPicture image as single page pdf stream.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="PDFStream">The Stream object to save a GdPicture image. </param>
	<param name="PDFA">True to generate PDF in PDF/A 1-b format else False. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert JPEG file to PDF/A 1-b
  <code lang="vb.net">
  Dim ImageID As Integer
  
  Dim PDFStream As IO.Stream = New IO.MemoryStream
  
  ImageID = ogdpictureimaging.CreateGdPictureImageFromFile("c:\\image.jpg")
  If ImageID &lt;&gt; 0 Then
      ogdpictureimaging.SaveAsPDF(ImageID, True, "PDF Title", "PDF Author", "PDF Subject", "key1;key2;key3", "The Creator")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsPDF(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture.PdfEncryption,GdPicture.PdfRight,System.String,System.String)">
	<summary>
  Saves a GdPicture image as single page pdf with encryption.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is
                           not yet available. </param>
	<param name="Rights">A value returned by the PdfCreateRights function. </param>
	<param name="UserPassword">The user password for the PDF. Can be an empty string. </param>
	<param name="OwnerPassword">The owner password for the PDF. Can be an empty string. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert JPEG file to encrypted PDF
  <code lang="vb.net">
  Dim ImageID As Integer
  Dim PdfRights As PdfRight = ogdpictureimaging.PdfCreateRights(True, True, True, True, True, True, True, True)
  
  ImageID = ogdpictureimaging.CreateGdPictureImageFromFile("c:\\image.jpg")
  If ImageID &lt;&gt; 0 Then
      ogdpictureimaging.SaveAsPDF(ImageID, "c:\\image.pdf", "PDF Title", "PDF Author", "PDF Subject", "key1;key2;key3", "The Creator", PdfEncryption.PdfEncryption128BitRC4, PdfRights, "userpass", "ownerpass")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsPDF(System.Int32,System.IO.Stream,System.String,System.String,System.String,System.String,System.String,GdPicture.PdfEncryption,GdPicture.PdfRight,System.String,System.String)">
	<summary>
  Saves a GdPicture image as single page pdf stream with encryption.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="PDFStream">The Stream object to save a GdPicture image. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is
                           not yet available. </param>
	<param name="Rights">A value returned by the PdfCreateRights function. </param>
	<param name="UserPassword">The user password for the PDF. Can be an empty string. </param>
	<param name="OwnerPassword">The owner password for the PDF. Can be an empty string. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert JPEG file to encrypted PDF
  <code lang="vb.net">
  Dim ImageID As Integer
  Dim PdfRights As PdfRight = ogdpictureimaging.PdfCreateRights(True, True, True, True, True, True, True, True)
  
  Dim PDFStream As IO.Stream = New IO.MemoryStream
  
  ImageID = ogdpictureimaging.CreateGdPictureImageFromFile("c:\\image.jpg")
  If ImageID &lt;&gt; 0 Then
      ogdpictureimaging.SaveAsPDF(ImageID, PDFStream, "PDF Title", "PDF Author", "PDF Subject", "key1;key2;key3", "The Creator", PdfEncryption.PdfEncryption128BitRC4, PdfRights, "userpass", "ownerpass")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsPDFOCR(System.Int32,System.IO.Stream,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
	<summary>
  Saves a GdPicture image as single page searchable PDF stream and performs an OCR recognition.
  
  The recognized text is written invisibly to the PDF in order to simplify indexing and search.
  
  
  
  For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="PDFStream">The Stream object to save a GdPicture image. </param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
                              * If you want to recognize only numeric you can use "0123456789".
                              * If you want to recognize only uppercase alpha you can use
                                "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
                              Use empty string to recognize all characters. </param>
	<param name="PDFA">True to generate PDF in PDF/A 1-b format else False. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<returns>
  The recognized text.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function.
  
  Use the GetStat() function to determine if this function succeeded.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsPDFOCR(System.Int32,System.IO.Stream,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture.PdfEncryption,GdPicture.PdfRight,System.String,System.String)">
	<summary>
  Saves a GdPicture image as single page searchable PDF stream with encryption and performs an OCR
  recognition.
  
  The recognized text is written invisibly to the PDF in order to simplify indexing and search.
  
  
  
  For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="PDFStream">The Stream object to save a GdPicture image. </param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
                              * If you want to recognize only numeric you can use "0123456789".
                              * If you want to recognize only uppercase alpha you can use
                                "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
                              Use empty string to recognize all characters. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is not
                           yet available. </param>
	<param name="Rights">A value returned by the PdfCreateRights function. </param>
	<param name="UserPassword">The user password for the PDF. Can be an empty string. </param>
	<param name="OwnerPassword">The owner password for the PDF. Can be an empty string. </param>
	<returns>
  The recognized text.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function.
  
  Use the GetStat() function to determine if this function succeeded.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsPDFOCR(System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
	<summary>
  Saves a GdPicture image as single page searchable PDF and performs an OCR recognition.
  
  The recognized text is written invisibly to the PDF in order to simplify indexing and search.
  
  For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
                              * If you want to recognize only numeric you can use "0123456789".
                              * If you want to recognize only uppercase alpha you can use
                                "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
                              Use empty string to recognize all characters. </param>
	<param name="PDFA">True to generate PDF in PDF/A 1-b format else False. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<returns>
  The recognized text.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function.
  
  Use the GetStat() function to determine if this function succeeded.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsPDFOCR(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture.PdfEncryption,GdPicture.PdfRight,System.String,System.String)">
	<summary>
  Saves a GdPicture image as single page searchable PDF with encryption and performs an OCR
  recognition.
  
  The recognized text is written invisibly to the PDF in order to simplify indexing and search.
  
  
  
  For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
                              * If you want to recognize only numeric you can use "0123456789".
                              * If you want to recognize only uppercase alpha you can use
                                "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
                              Use empty string to recognize all characters. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is not
                           yet available. </param>
	<param name="Rights">A value returned by the PdfCreateRights function. </param>
	<param name="UserPassword">The user password for the PDF. Can be an empty string. </param>
	<param name="OwnerPassword">The owner password for the PDF. Can be an empty string. </param>
	<returns>
  The recognized text.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function.
  
  Use the GetStat() function to determine if this function succeeded.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.PdfCreateFromMultipageTIFF(System.Int32,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
	<summary>
  Creates a multipage PDF from a multipage tiff image.
  
  This image can be a read only multipage tiff image or an editable multipage tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The multipage tiff image to save as
                        PDF. </param>
	<param name="PdfFileDest">The destination of the pdf to create. </param>
	<param name="PDFA">True to generate PDF in PDF/A 1-b format else False. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert a multipage tif file to a multipage pdf file
  <code lang="vb.net">
  Dim MultipageImageID As Integer
  
  oGdPictureImaging.TiffOpenMultiPageForWrite(False) 'for better performances
  MultipageImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
  oGdPictureImaging.PdfCreateFromMultipageTIFF(MultipageImageID, "multipage.pdf", True, "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator")
  oGdPictureImaging.ReleaseGdPictureImage(MultipageImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PdfCreateFromMultipageTIFF(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture.PdfEncryption,GdPicture.PdfRight,System.String,System.String)">
	<summary>
  Creates a multipage PDF with encryption from a multipage tiff image.
  
  This image can be a read only multipage tiff image or an editable multipage tiff image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The multipage tiff image to save as PDF. </param>
	<param name="PdfFileDest">The destination of the pdf to create. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is
                           not yet available. </param>
	<param name="Rights">A value returned by the PdfCreateRights function. </param>
	<param name="UserPassword">The user password for the PDF. Can be an empty string. </param>
	<param name="OwnerPassword">The owner password for the PDF. Can be an empty string. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert a multipage tif file to amultipage pdf file with 128 bits RC4 encryption
  <code lang="vb.net">
  Dim MultipageImageID As Integer
  
  oGdPictureImaging.TiffOpenMultiPageForWrite(False) 'for better performances
  MultipageImageID = oGdPictureImaging.CreateGdPictureImageFromFile("multipage.tif")
  oGdPictureImaging.PdfCreateFromMultipageTIFF(MultipageImageID, "multipage.pdf", "MyPdfTitle", "MyPdfAuthor", "MyPdfSubject", "MyPdfKeywords", "MyPdfCreator", PdfEncryption.PdfEncryption128BitRC4, PdfRight.PdfRightCanView Or PdfRight.PdfRightCanPrint, "UserPass", "OwnerPass")
  oGdPictureImaging.ReleaseGdPictureImage(MultipageImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)">
	<summary>
  Appends a GdPicture Image into the multipage PDF file created by the PdfOCRStart() or
  PdfOCRStart() function.
  
  For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
  </summary>
	<param name="PdfID">A PDF identifier returned by the PdfOCRStart() function. </param>
	<param name="ImageID">The GdPicture Image to add to the multipage PDF. </param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
                              * If you want to recognize only numeric you can use "0123456789".
                              * If you want to recognize only uppercase alpha you can use
                                "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
                              Use empty string to recognize all characters. </param>
	<returns>
  The recognized text.
  </returns>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function.
  
  Use the GetStat() function to determine if this function succeeded.
  </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfOCRStart(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfOCRStop(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)"/>
	<example>
  How to scan pages of a document feeder to a multipage searchable PDF file.
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim bContinue As Boolean = True
  Dim PdfID As Integer
  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True)
  oGdPictureImaging.TwainSetAutoScan(True)
  PdfID = oGdPictureImaging.PdfOCRStart("output.pdf", True, "", "", "", "", "")
  
  If PdfID &lt;&gt; 0 Then
     While bContinue
           ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
           oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "c:\\Program FilesGdPicture.NETRedistOCR", "")
           oGdPictureImaging.ReleaseGdPictureImage(ImageID)
           bContinue = (oGdPictureImaging.TwainGetState \&gt; TwainStatus.TWAIN_SOURCE_ENABLED)
     End While
     oGdPictureImaging.PdfOCRStop(PdfID)
  End If
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
	<summary>
  Appends a GdPicture Image into the multipage PDF file created by the PdfOCRStart() or
  PdfOCRStart() function. This function takes a time-out parameter.
  
  For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
  </summary>
	<param name="PdfID">A PDF identifier returned by the PdfOCRStart() function. </param>
	<param name="ImageID">The GdPicture Image to add to the multipage PDF. </param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
                              * If you want to recognize only numeric you can use "0123456789".
                              * If you want to recognize only uppercase alpha you can use
                                "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
                              Use empty string to recognize all characters. </param>
	<param name="Timeout">Timeout of the engine, in milliseconds. Set 0 for no timeout.</param>
	<returns>
  The recognized text.
  </returns>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function.
  
  Use the GetStat() function to determine if this function succeeded.
  </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfOCRStart(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfOCRStop(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)"/>
	<example>
  How to scan pages of a document feeder to a multipage searchable PDF file.
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim bContinue As Boolean = True
  Dim PdfID As Integer
  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True)
  oGdPictureImaging.TwainSetAutoScan(True)
  PdfID = oGdPictureImaging.PdfOCRStart("output.pdf", True, "", "", "", "", "")
  
  If PdfID &lt;&gt; 0 Then
     While bContinue
           ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
           oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "c:\\Program FilesGdPicture.NETRedistOCR", "")
           oGdPictureImaging.ReleaseGdPictureImage(ImageID)
           bContinue = (oGdPictureImaging.TwainGetState \&gt; TwainStatus.TWAIN_SOURCE_ENABLED)
     End While
     oGdPictureImaging.PdfOCRStop(PdfID)
  End If
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PdfOCRStop(System.Int32)">
	<summary>
  Ends and Saves the PDF file created by the PdfOCRStart() or PdfOCRStart() function. If the source of the PDF is a Stream object it remains open.
  </summary>
	<param name="PdfID">A PDF identifier returned by the PdfOCRStart() function.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to scan pages of a document feeder to a multipage searchable PDF file.
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim bContinue As Boolean = True
  Dim PdfID As Integer
  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True)
  oGdPictureImaging.TwainSetAutoScan(True)
  PdfID = oGdPictureImaging.PdfOCRStart("output.pdf", True, "", "", "", "", "")
  
  If PdfID &lt;&gt; 0 Then
     While bContinue
           ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
           oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "c:\\Program FilesGdPicture.NETRedistOCR", "")
           oGdPictureImaging.ReleaseGdPictureImage(ImageID)
           bContinue = (oGdPictureImaging.TwainGetState \&gt; TwainStatus.TWAIN_SOURCE_ENABLED)
     End While
     oGdPictureImaging.PdfOCRStop(PdfID)
  End If
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfOCRStart(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)"/>
</member><member name="M:GdPicture.GdPictureImaging.PdfOCRStart(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
	<summary>
  Creates an empty searchable PDF file in order to transfer multiple page using the
  PdfAddGdPictureImageToPdfOCR() until the PdfOCRStop() function is called.
  
  The recognized text will be written invisibly to the PDF in order to simplify indexing and search.
  </summary>
	<param name="FilePath">The path of the PDF to create. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="PDFA">True to generate PDF in PDF/A 1-b format else False. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<returns>
  0: The PDF could not created. Use the GetStat() function to determine the reason this function
  failed.
  
  Non-zero: A PDF Identifier.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfOCRStop(System.Int32)"/>
	<example>
  How to scan pages of a document feeder to a multipage searchable PDF file.
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim bContinue As Boolean = True
  Dim PdfID As Integer
  
  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True)
  oGdPictureImaging.TwainSetAutoScan(True)
  PdfID = oGdPictureImaging.PdfOCRStart("output.pdf", True, "", "", "", "", "")
  
  If PdfID &lt;&gt; 0 Then
     While bContinue
           ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
           oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "c:\\Program FilesGdPicture.NETRedistOCR", "")
           oGdPictureImaging.ReleaseGdPictureImage(ImageID)
           bContinue = (oGdPictureImaging.TwainGetState \&gt; TwainStatus.TWAIN_SOURCE_ENABLED)
     End While
     oGdPictureImaging.PdfOCRStop(PdfID)
  End If
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
	<remarks>
  To be used, this function must be unlocked with the SetLicenseNumberOCRTesseract() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.PdfOCRStart(System.String,System.String,System.String,System.String,System.String,System.String,GdPicture.PdfEncryption,GdPicture.PdfRight,System.String,System.String)">
	<summary>
  Creates an empty searchable PDF file with encryption in order to transfer multiple page using the
  PdfAddGdPictureImageToPdfOCR() until the PdfOCRStop() function is called.
  
  The recognized text will be written invisibly to the PDF in order to simplify indexing and search.
  </summary>
	<param name="FilePath">The path of the PDF to create. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is
                           not yet available. </param>
	<param name="Rights">A value returned by the PdfCreateRights function. </param>
	<param name="UserPassword">The user password for the PDF. Can be an empty string. </param>
	<param name="OwnerPassword">The owner password for the PDF. Can be an empty string. </param>
	<returns>
  0: The PDF could not created. Use the GetStat() function to determine the reason this function
  failed.
  
  Non-zero: A PDF Identifier.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfOCRStop(System.Int32)"/>
	<example>
  How to scan pages of a document feeder to a multipage searchable PDF file with 128 bits RC4
  encryption.
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim bContinue As Boolean = True
  Dim PdfID As Integer
  
  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True)
  oGdPictureImaging.TwainSetAutoScan(True)
  PdfID = oGdPictureImaging.PdfOCRStart("output.pdf", "", "", "", "", "", PdfEncryption.PdfEncryption128BitRC4,PdfRight.PdfRightCanView or PdfRight.PdfRightCanPrint,"UserPass", OwnerPass")
  
  If PdfID &lt;&gt; 0 Then
     While bContinue
           ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
           oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "c:\\Program FilesGdPicture.NETRedistOCR", "")
           oGdPictureImaging.ReleaseGdPictureImage(ImageID)
           bContinue = (oGdPictureImaging.TwainGetState \&gt; TwainStatus.TWAIN_SOURCE_ENABLED)
     End While
     oGdPictureImaging.PdfOCRStop(PdfID)
  End If
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
	<remarks>
  To be used, this function must be unlocked with the SetLicenseNumberOCRTesseract() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.PdfOCRStart(System.IO.Stream,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
	<summary>
  Creates an empty searchable PDF stream in order to transfer multiple page using the
  PdfAddGdPictureImageToPdfOCR() until the PdfOCRStop() function is called.
  
  The recognized text will be written invisibly to the PDF in order to simplify indexing and search.
  </summary>
	<param name="PDFStream">The Stream object to save the PDF. </param>
	<param name="PDFA">True to generate PDF in PDF/A 1-b format else False. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<returns>
  0: The PDF could not created. Use the GetStat() function to determine the reason this function
  failed.
  
  Non-zero: A PDF Identifier.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfOCRStop(System.Int32)"/>
	<example>
  How to scan pages of a document feeder to a multipage searchable PDF file.
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim PDFStream As IO.Stream = New IO.MemoryStream
  Dim bContinue As Boolean = True
  Dim PdfID As Integer
  
  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True)
  oGdPictureImaging.TwainSetAutoScan(True)
  PdfID = oGdPictureImaging.PdfOCRStart(PDFStream, True, "", "", "", "", "")
  
  If PdfID &lt;&gt; 0 Then
     While bContinue
           ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
           oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "c:\\Program FilesGdPicture.NETRedistOCR", "")
           oGdPictureImaging.ReleaseGdPictureImage(ImageID)
           bContinue = (oGdPictureImaging.TwainGetState \&gt; TwainStatus.TWAIN_SOURCE_ENABLED)
     End While
     oGdPictureImaging.PdfOCRStop(PdfID)
  End If
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
	<remarks>
  To be used, this function must be unlocked with the SetLicenseNumberOCRTesseract() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.PdfOCRStart(System.IO.Stream,System.String,System.String,System.String,System.String,System.String,GdPicture.PdfEncryption,GdPicture.PdfRight,System.String,System.String)">
	<summary>
  Creates an empty searchable PDF stream with encryption in order to transfer multiple page using the
  PdfAddGdPictureImageToPdfOCR() until the PdfOCRStop() function is called.
  
  The recognized text will be written invisibly to the PDF in order to simplify indexing and search.
  </summary>
	<param name="PDFStream">The Stream object to save the PDF. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is
                           not yet available. </param>
	<param name="Rights">A value returned by the PdfCreateRights function. </param>
	<param name="UserPassword">The user password for the PDF. Can be an empty string. </param>
	<param name="OwnerPassword">The owner password for the PDF. Can be an empty string. </param>
	<returns>
  0: The PDF could not created. Use the GetStat() function to determine the reason this function
  failed.
  
  Non-zero: A PDF Identifier.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfAddGdPictureImageToPdfOCR(System.Int32,System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.PdfOCRStop(System.Int32)"/>
	<example>
  How to scan pages of a document feeder to a multipage searchable PDF file with 128 bits RC4
  encryption.
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim PDFStream As IO.Stream = New IO.MemoryStream
  Dim bContinue As Boolean = True
  Dim PdfID As Integer
  
  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True)
  oGdPictureImaging.TwainSetAutoScan(True)
  PdfID = oGdPictureImaging.PdfOCRStart(PDFStream, "", "", "", "", "", PdfEncryption.PdfEncryption128BitRC4,PdfRight.PdfRightCanView or PdfRight.PdfRightCanPrint,"UserPass", OwnerPass")
  
  If PdfID &lt;&gt; 0 Then
     While bContinue
           ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
           oGdPictureImaging.PdfAddGdPictureImageToPdfOCR(PdfID, ImageID, "eng", "c:\\Program FilesGdPicture.NETRedistOCR", "")
           oGdPictureImaging.ReleaseGdPictureImage(ImageID)
           bContinue = (oGdPictureImaging.TwainGetState \&gt; TwainStatus.TWAIN_SOURCE_ENABLED)
     End While
     oGdPictureImaging.PdfOCRStop(PdfID)
  End If
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
	<remarks>
  To be used, this function must be unlocked with the SetLicenseNumberOCRTesseract() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.PdfOCRCreateFromMultipageTIFF(System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
	<summary>
  Creates a multipage searchable PDF from a multipage tiff image and performs an OCR recognition. This
  image can be a read only multipage tiff image or an editable multipage tiff image. The recognized
  text is written invisibly to the PDF in order to simplify indexing and search.
  
  
  
  For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The multipage tiff image to save as PDF. </param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
                              * If you want to recognize only numeric you can use "0123456789".
                              * If you want to recognize only uppercase alpha you can use
                                "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
                              Use empty string to recognize all characters. </param>
	<param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="PDFA">True to generate PDF in PDF/A 1-b format else False. </param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<returns>
  The recognized text.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function.
  
  Use the GetStat() function to determine if this function succeeded.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.PdfOCRCreateFromMultipageTIFF(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,GdPicture.PdfEncryption,GdPicture.PdfRight,System.String,System.String)">
	<summary>
  Creates a multipage searchable PDF with encryption from a multipage tiff image and performs an OCR
  recognition. This image can be a read only multipage tiff image or an editable multipage tiff image.
  The recognized text is written invisibly to the PDF in order to simplify indexing and search.
  
  
  
  For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The multipage tiff image to save as PDF. </param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
                              * If you want to recognize only numeric you can use "0123456789".
                              * If you want to recognize only uppercase alpha you can use
                                "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
                              Use empty string to recognize all characters. </param>
	<param name="FilePath">The complete PDF file path to save a GdPicture image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Title">The title of the PDF. </param>
	<param name="Author">The PDF Author. </param>
	<param name="Subject">The PDF Subject. </param>
	<param name="Keywords">The PDF Keywords. </param>
	<param name="Creator">The name of the application which creates the PDF. </param>
	<param name="Encryption">A member of the PdfEncryption enumeration. Note: AES 256 encyption is not
                           yet available. </param>
	<param name="Rights">A value returned by the PdfCreateRights function. </param>
	<param name="UserPassword">The user password for the PDF. Can be an empty string. </param>
	<param name="OwnerPassword">The owner password for the PDF. Can be an empty string. </param>
	<returns>
  The recognized text.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function.
  
  You can catch the OCRTesseractProgress event to get the progession. Use the GetStat() function to
  determine if this function succeeded.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.PdfSetJpegQuality(System.Int32,System.Int32)">
	<summary>
 Changes the level of quality used to compress true color image data within a PDF.
 </summary>
	<param name="PdfID">A PDF identifier returned by the PdfOCRStart() function. </param>
	<param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
                       best quality and worse compression. </param>
	<remarks>
 Jpeg quality level is available only for 8bpp grayscale and non indexed color image. This function
 has not effect on 1, 4 &amp; 8 bpp (non grayscale) image compression. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.PdfSetCompressionForBitonalImage(System.Int32,GdPicture.PdfCompression)">
	<summary>
 Changes the compression scheme to use to compress bitonal image data within a PDF. Default is
 PdfCompressionJBIG2 if the optional GdPicture JBIG2 Encoder Plugin have been unlocked, else
 PdfCompressionCCITT4.
 </summary>
	<param name="PdfID">A PDF identifier returned by the PdfOCRStart() function. </param>
	<param name="Compression">A member of the PdfCompression enumeration.</param>
</member><member name="M:GdPicture.GdPictureImaging.PdfSetCompressionForColorImage(System.Int32,GdPicture.PdfCompression)">
	<summary>
 Changes the compression scheme to use to compress color image data within a PDF. Default is
 PdfCompressionJPEG.
 
 PdfCompressionCCITT4 and PdfCompressionJBIG2 are not allowed.
 </summary>
	<param name="PdfID">A PDF identifier returned by the PdfOCRStart() function. </param>
	<param name="Compression">a member of the PdfCompression enumeration</param>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo1BppAT(System.Int32)">
	<summary>
  Converts a GdPicture image to a 1-bit BW indexed color image using adaptive thresholding method.
  
  The color table has 2 entries: 1 Black &amp; 1 White.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture.BitonalReduction)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ConvertTo1Bpp(System.Int32)"/>
	<example>
 Converting Image to 1-bits per pixel image using adaptive thresholding
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo1BppAT(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo1BppAT(System.Int32,System.Int32)">
	<summary>
  Converts a GdPicture image to a 1-bit BW indexed color image using adaptive thresholding method.
  
  The color table has 2 entries: 1 Black &amp; 1 White.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Threshold">Adaptative Threslolding factor between 0 and 100. Default value is 10</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture.BitonalReduction)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ConvertTo1Bpp(System.Int32)"/>
	<example>
 Converting Image to 1-bits per pixel image using adaptive thresholding with a set thresholding factor
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo1BppAT(ImageID, 10)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo1Bpp(System.Int32)">
	<summary>
  Converts a GdPicture image to a 1-bit BW indexed color image.
  
  The color table has 2 entries: 1 Black &amp; 1 White.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture.BitonalReduction)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ConvertTo1BppAT(System.Int32)"/>
	<example>
 Converting Image to 1-bits per pixel image
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo1Bpp(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo1Bpp(System.Int32,System.Byte)">
	<summary>
  Converts a GdPicture image to a 1-bit BW indexed color image specifying a threshold value.
  
  The color table has 2 entries: 1 Black &amp; 1 White.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Threshold">Value between [1 and 254] The medium value is 128 which means '50%'.pixel
                          lighter than 50% &gt;= become white, darker =\&gt; become black. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture.BitonalReduction)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)"/>
	<example>
 Converting Image to 1-bits per pixel image with specifying a thresholding value
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo1Bpp(ImageID, 128)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo1BppFast(System.Int32)">
	<summary>
  Converts a GdPicture image to a 1-bit BW indexed color image specifying a threshold value. This function assumes that the input image is already black and white.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhite(System.Int32,GdPicture.BitonalReduction)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.FxBlackNWhiteT(System.Int32,System.Byte)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ConvertTo1Bpp(System.Int32)"/>
	<example>
 Converting Image to 1-bits per pixel image using a fast algorithm
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo1BppFast(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo4Bpp16(System.Int32)">
	<summary>
  Converts a GdPicture image to a 4-bits indexed color image using a standard color palette.
  
  The color table has 16 entries.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting Image to 4-bits per pixel image that has 16 color entries in its table
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo4Bpp16(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo4BppPal(System.Int32,System.Drawing.Color[])">
	<summary>
  Converts a GdPicture image to a 4-bits indexed color image using custom color palette.
  
  The color table has a maximum of 16 entries.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ColorEntries">Array of Color Objects. All color entries of the palette. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting Image to 4-bits per pixel image that has a custom color palette
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Palette(3) As Color
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     Palette(0) = Imaging1.ARGB(255, 0, 0, 0)
     Palette(1) = Imaging1.ARGB(255, 128, 128, 128)
     Palette(2) = Imaging1.ARGB(255, 255, 255, 255)
 
     oGdPictureImaging.ConvertTo4BppPal(ImageID, Palette)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo4BppQ(System.Int32)">
	<summary>
  Quantizes &amp; converts a GdPicture image to an 4-bits indexed color image.
  
  The color table has a maximum of 16 entries.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  Color image quantization is a process that reduces the number of distinct colors used in an image,
  usually with the intention that the new image should be as visually similar as possible to the
  original image.
  </remarks>
	<example>
 Converting Image to 4-bits per pixel image using color quantization
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo4BppQ(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertBitonalToGrayScale(System.Int32,System.Int32)">
	<summary>
  Converts bitonal images to an enhanced 8-bits gray-scaled indexed color image.
  
  The color table has 256 entries.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="SoftenValue">Soften factor between 1 and 100. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting a bitonal Image to GrayScale.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertBitonalToGrayScale(ImageID, 128)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo8BppGrayScale(System.Int32)">
	<summary>
  Converts a GdPicture image to an 8-bits gray-scaled indexed color image.
  
  This function uses a basic grayscale color reduction algorithm.
  
  The color table has 256 entries.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ConvertTo8BppGrayScaleAdv(System.Int32)"/>
	<example>
 Converting Image to GrayScale.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo8BppGrayScale(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo8BppGrayScaleAdv(System.Int32)">
	<summary>
  Converts a GdPicture image to an 8-bits gray-scaled indexed color image.
  
  This function uses an advanced grayscale color reduction algorithm.
  
  The color table has 256 entries.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ConvertTo8BppGrayScale(System.Int32)"/>
	<example>
 Converting Image to GrayScale indexed color.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo8BppGrayScaleAdv(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo8Bpp216(System.Int32)">
	<summary>
  Converts a GdPicture image to a 8-bits indexed color image using a standard color palette.
  
  This function uses an automatic segmentation components algorithm.
  
  The color table has a maximum of 256 entries but only 216 will be used.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting Image to 8Bpp with only 216 entries used.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo8Bpp216(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo8BppQ(System.Int32)">
	<summary>
  Quantizes &amp; converts a GdPicture image to an 8-bits indexed color image. This function uses a
  color quantization algorithm.
  
  The color table has a maximum of 256 entries.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  Color image quantization is a process that reduces the number of distinct colors used in an image,
  usually with the intention that the new image should be as visually similar as possible to the
  original image.
  </remarks>
	<example>
 Converting Image to 8Bpp using the color quantization algorithm
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo8BppQ(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo8BppQ(System.Int32,System.Int32)">
	<summary>
  Quantizes &amp; converts a GdPicture image to an 8-bits indexed color image with a desired number of
  colors. This function uses a color quantization algorithm.
  
  The color table has a maximum of 256 entries.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="MaxColors">The number of max. distinct colors to use into the new image. [2 - 256]
                          </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  Color image quantization is a process that reduces the number of distinct colors used in an image,
  usually with the intention that the new image should be as visually similar as possible to the
  original image.
  </remarks>
	<example>
 Converting Image to 8Bpp using the color quantization algorithm with maximum 175 distinct colors used
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo8BppQ(ImageID, 175)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo16BppRGB555(System.Int32)">
	<summary>
  Converts a GdPicture image to a 16-bits RGB555 color image.
  
  5 bits each are used for the red, green, and blue components. The remaining bit is not used.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting Image to 16Bpp with 5 bits used for each channel and the last bit is neglected
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo16BppRGB555(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo16BppRGB565(System.Int32)">
	<summary>
  Converts a GdPicture image to a 16-bits RGB565 color image.
  
  5 bits are used for the red component, 6 bits are used for the green component, and 5 bits are used
  for the blue component.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
 Converting Image to 16Bpp with 5 bits used for Red and blue channels and 6 bits for the green channel
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo16BppRGB565(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo24BppRGB(System.Int32)">
	<summary>
  Converts a GdPicture image to a 24-bits color image.
  
  8 bits each are used for the red, green, and blue components.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
 Converting Image to 24-bits per pixel
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo24BppRGB(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo32BppARGB(System.Int32)">
	<summary>
  Converts a GdPicture image to a 32-bits ARGB color image.
  
  8 bits each are used for the alpha, red, green, and blue components.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting Image to 32-bits per pixel ARGB image, where 8 pixels are for each of the red, green, blue, and alpha channels
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo32BppARGB(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo32BppRGB(System.Int32)">
	<summary>
  Converts a GdPicture image to a 32-bits RGB color image.
  
  8 bits each are used for the red, green, and blue components.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting Image to 32-bits per pixel RGB where the red green and blue channels each are represented by 8 bits
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo32BppRGB(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo32BppPARGB(System.Int32)">
	<summary>
  Converts a GdPicture image to a 32-bits PARGB color image.
  
  8 bits each are used for the alpha, red, green, and blue components. The red, green, and blue
  components are premultiplied, according to the alpha component.
  </summary>
	<param name="ImageID">GdPicture Image Identifier.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting Image to 32-bits per pixel PARGB image
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo32BppPARGB(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo48BppRGB(System.Int32)">
	<summary>
  Converts a GdPicture image to a 48-bits RGB color image.
  
  16 bits each are used for the red, green, and blue components.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting Image to 48-bits per pixel RGB image
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo48BppRGB(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo64BppARGB(System.Int32)">
	<summary>
  Converts a GdPicture image to a 64-bits ARGB color image.
  
  16 bits each are used for the alpha, red, green, and blue components.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting Image to 48-bits per pixel ARGB image
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo64BppARGB(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ConvertTo64BppPARGB(System.Int32)">
	<summary>
  Converts a GdPicture image to a 64-bits PARGB color image.
  
  16 bits each are used for the alpha, red, green, and blue components. The red, green, and blue
  components are premultiplied according to the alpha component.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Converting Image to 64-bits per pixel PARGB image
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ConvertTo64BppPARGB(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="E:GdPicture.GdPictureImaging.OCRTesseractProgress">
	<summary>
  Occurs on OCR processing progression.
  </summary>
	<param name="Progress">The Progression between 0 and 100. </param>
	<remarks>
  This event is raised by the following function: PdfOCRCreateFromMultipageTIFF
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetCharConfidence(System.Int32)">
	<summary>
  This function returns the confidence of one of the characters recognized during the last OCR process
  done by the OCRTesseractDoOCR() function.
  </summary>
	<param name="CharNo">The character index between 1 and the number of recognized characters returned
                       by the OCRTesseractGetCharCount() function. </param>
	<returns>
  Confidence between 0 and 100. 0=perfect, 100=reject
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount"/>
	<remarks>
  This function must be used only after the OCRTesseractDoOCR() function.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCR and storing confidence of characters in an array
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.OCRTesseractReinit()
        oGdPictureImaging.OCRTesseractSetPassCount(1)
        sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "c:\\Dictionaries", "")
        If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
            MsgBox("Needed dictionary is not into the specified path! ")
        Else
            Dim Confidence(oGdPictureImaging.OCRTesseractGetCharCount) As Single
            If CheckBox1.Checked = False Then
                For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
                     Confidence(ncpt) = oGdPictureImaging.OCRTesseractGetCharConfidence(ncpt)
                Next ncpt
            End If
 
      oGdPictureImaging.OCRTesseractClear()
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetCharSpaces(System.Int32)">
	<summary>
  This function returns the number of spaces detected before a character recognized during the last OCR
  process done by the OCRTesseractDoOCR() function.
  </summary>
	<param name="CharNo">The character index between 1 and the number of recognized characters returned
                       by the OCRTesseractGetCharCount() function. </param>
	<returns>
  The number of spaces detected before the character.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount"/>
	<remarks>
  This function must be used only after the OCRTesseractDoOCR() function.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCRTesseractGetCharSpaces
  The following code assumes that OCRTesseractDoOCR() has been called
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      Dim CharSpace As Integer
      CharSpace = oGdPictureImaging.OCRTesseractGetCharSpaces(26)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetCharLine(System.Int32)">
	<summary>
  This function returns the line position of one of the characters recognized during the last OCR
  process done by the OCRTesseractDoOCR() function.
  </summary>
	<param name="CharNo">The character index between 1 and the number of recognized characters returned
                       by the OCRTesseractGetCharCount() function. </param>
	<returns>
  The line on which the character has been found.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount"/>
	<remarks>
  This function must be used only after the OCRTesseractDoOCR() function.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCRTesseractGetCharLine
  The following code assumes that OCRTesseractDoOCR() has been called
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      Dim CharLine As Integer
      CharLine = oGdPictureImaging.OCRTesseractGetCharLine(26)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCode(System.Int32)">
	<summary>
  This function returns the Unicode character code of one of the characters recognized during the last OCR process
  done by the OCRTesseractDoOCR() function.
  </summary>
	<param name="CharNo">The character index between 1 and the number of recognized characters returned
                       by the OCRTesseractGetCharCount() function. </param>
	<returns>
  The Unicode char code.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount"/>
	<remarks>
  This function must be used only after the OCRTesseractDoOCR() function.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCRTesseractGetCharCode
  The following code assumes that OCRTesseractDoOCR() has been called
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      Dim CharCode As Integer
      CharCode = oGdPictureImaging.OCRTesseractGetCharCode(26)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetCharLeft(System.Int32)">
	<summary>
  This function returns the left position in pixel of one of the characters recognized during the last
  OCR process done by the OCRTesseractDoOCR() function.
  </summary>
	<param name="CharNo">The character index between 1 and the number of recognized characters returned
                       by the OCRTesseractGetCharCount() function. </param>
	<returns>
  The left position in pixel.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharRight(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharBottom(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharTop(System.Int32)"/>
	<remarks>
  This function must be used only after the OCRTesseractDoOCR() function.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCR and drawing rectangles around Text areas
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.OCRTesseractReinit()
        oGdPictureImaging.OCRTesseractSetPassCount(1)
        sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "c:\\Dictionaries", "")
        If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
            MsgBox("Needed dictionary is not into the specified path! ")
        Else
            If CheckBox1.Checked = False Then
                For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
                    Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
                                                                    oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
                                                                    1, oGdPictureImaging.ARGB(255,255,0,0), False)
                Next ncpt
            End If
 
      oGdPictureImaging.OCRTesseractClear()
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetCharRight(System.Int32)">
	<summary>
  This function returns the right position in pixel of one of the characters recognized during the last
  OCR process done by the OCRTesseractDoOCR() function.
  </summary>
	<param name="CharNo">The character index between 1 and the number of recognized characters returned
                       by the OCRTesseractGetCharCount() function. </param>
	<returns>
  The right position in pixel.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharLeft(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharBottom(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharTop(System.Int32)"/>
	<remarks>
  This function must be used only after the OCRTesseractDoOCR() function.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCR and drawing rectangles around Text areas
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.OCRTesseractReinit()
        oGdPictureImaging.OCRTesseractSetPassCount(1)
        sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "c:\\Dictionaries", "")
        If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
            MsgBox("Needed dictionary is not into the specified path! ")
        Else
            If CheckBox1.Checked = False Then
                For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
                    Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
                                                                    oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
                                                                    1, oGdPictureImaging.ARGB(255,255,0,0), False)
                Next ncpt
            End If
 
      oGdPictureImaging.OCRTesseractClear()
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetCharBottom(System.Int32)">
	<summary>
  This function returns the bottom position in pixel of one of the characters recognized during the
  last OCR process done by the OCRTesseractDoOCR() function.
  </summary>
	<param name="CharNo">The character index between 1 and the number of recognized characters returned
                       by the OCRTesseractGetCharCount() function. </param>
	<returns>
  The bottom position in pixel.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharLeft(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharRight(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharTop(System.Int32)"/>
	<remarks>
  This function must be used only after the OCRTesseractDoOCR() function.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCR and drawing rectangles around Text areas
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.OCRTesseractReinit()
        oGdPictureImaging.OCRTesseractSetPassCount(1)
        sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "c:\\Dictionaries", "")
        If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
            MsgBox("Needed dictionary is not into the specified path! ")
        Else
            If CheckBox1.Checked = False Then
                For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
                    Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
                                                                    oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
                                                                    1, oGdPictureImaging.ARGB(255,255,0,0), False)
                Next ncpt
            End If
 
      oGdPictureImaging.OCRTesseractClear()
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetCharTop(System.Int32)">
	<summary>
  This function returns the top position in pixel of one of the characters recognized during the last
  OCR process done by the OCRTesseractDoOCR() function.
  </summary>
	<param name="CharNo">The character index between 1 and the number of recognized characters returned
                       by the OCRTesseractGetCharCount() function. </param>
	<returns>
  The bottom position in pixel.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharLeft(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharRight(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharBottom(System.Int32)"/>
	<remarks>
  This function must be used only after the OCRTesseractDoOCR() function.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCR and drawing rectangles around Text areas
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.OCRTesseractReinit()
        oGdPictureImaging.OCRTesseractSetPassCount(1)
        sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "c:\\Dictionaries", "")
        If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
            MsgBox("Needed dictionary is not into the specified path! ")
        Else
            If CheckBox1.Checked = False Then
                For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
                    Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
                                                                    oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
                                                                    1, oGdPictureImaging.ARGB(255,255,0,0), False)
                Next ncpt
            End If
 
      oGdPictureImaging.OCRTesseractClear()
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount">
	<summary>
  This function returns the number of characters recognized during the last OCR process done by the
  OCRTesseractDoOCR() function.
  </summary>
	<returns>
  The number of characters recognized.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<remarks>
  This function must be used only after the OCRTesseractDoOCR() function.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCR and drawing rectangles around Text areas
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.OCRTesseractReinit()
        oGdPictureImaging.OCRTesseractSetPassCount(1)
        sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "c:\\Dictionaries", "")
        If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
            MsgBox("Needed dictionary is not into the specified path! ")
        Else
            If CheckBox1.Checked = False Then
                For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
                    Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
                                                                    oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
                                                                    1, oGdPictureImaging.ARGB(255,255,0,0), False)
                Next ncpt
            End If
 
      oGdPictureImaging.OCRTesseractClear()
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)">
	<summary>
  Starts a character recognition process on a GdPicture image or on an area of a GdPicture image
  defined by SetROI() function.
  
  For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
                              * If you want to recognize only numeric you can use "0123456789".
                              * If you want to recognize only uppercase alpha you can use
                                "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
                              Use empty string to recognize all characters. </param>
	<returns>
  The recognized text.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String,System.Int32)">
	<summary>
 Starts a character recognition process on a GdPicture image or on an area of a GdPicture image
 defined by SetROI() function.
 
 For each language of recognition, you have to deploy specific files. See the Dictionary parameter.
 
 This function takes a timeout parameter.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa"
                          for spain, "eng" for english, "fra" for french...
                          The name of a dictionary file has a predefined structure:
                          [AAA].traineddata, where [AAA] define the language. Some dictionary
                          files are available from the installation folder of GdPicture.NET in
                          Commons\\OCR . To get all supported languages files, you have to
                          download the language pack from
                          http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="CharWhiteList">This parameter can be used to specify your own white list of chars. IE:
                             * If you want to recognize only numeric you can use "0123456789".
                             * If you want to recognize only uppercase alpha you can use
                               "ABCDEFGHIJKLMNOPQRSTUVWXYZ"...
                             Use empty string to recognize all characters. </param>
	<param name="Timeout">Timeout of the engine, in milliseconds. Set 0 for no timeout.</param>
	<returns>
 The recognized text.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractGetCharCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)"/>
	<remarks>
 This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
 SetLicenseNumberOCRTesseract() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractSetOCRContext(GdPicture.OCRContext)">
	<summary>
  Defines the context of the next OCR process.
  </summary>
	<param name="Context">A member of the OCRContext enumeration. Default value is OCRContextDocument</param>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetOrientation(System.Int32,System.String,System.String)">
	<summary>
  Tries to determine the orientation of a GdPicture image using the GdPicture Tesseract Plugin.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<returns>
  0 if no rotation have been detected, 90 if the document has a 90° rotation, 180 if the document has a 180° rotation or 270 if the document has a 270° rotation.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Determines the orientation of a document
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
      Dim rotation As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ocrRotateFileType = oGdPictureImaging.OCRTesseractGetOrientation(ImageID, "eng", "c:\\Dictionaries")
      MsgBox "This page has a rotation of " + str(rotation) + " deg."
 
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractGetOrientation(System.Int32,System.String,System.String,System.Single)">
	<summary>
  Tries to determine the orientation of a GdPicture image using the GdPicture Tesseract Plugin. This
  function allows to define a level of accuracy.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Dictionary">A string defining the prefix of the dictionary file to use. IE: "spa" for spain, "eng" for english, "fra" for french...
  The name of a dictionary file has a predefined structure: [AAA].traineddata, where [AAA] define the language. 
  Some dictionary files are available from the installation folder of GdPicture.NET in Commons\\OCR .
  To get all supported languages files, you have to download the language pack from http://www.gdpicture.com/download/ocr_language_pack.zip </param>
	<param name="DictionaryPath">The path into which the engine can find the dictionary files. </param>
	<param name="AccuracyLevel">Level of accuracy from 0 (Poor accuracy, hight speed) to 10 (best
                              accuracy, low speed). Default value is 3. </param>
	<returns>
  0 if no rotation have been detected, 90 if the document has a 90° rotation, 180 if the document has a 180° rotation or 270 if the document has a 270° rotation.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Determines the orientation of a document
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
      Dim rotation As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ocrRotateFileType = oGdPictureImaging.OCRTesseractGetOrientation(ImageID, "eng", "c:\\Dictionaries")
      MsgBox "This page has a rotation of " + str(rotation) + " deg."
 
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractClear">
	<summary>
  this function to release from memory all information about the last OCR process done by the
  OCRTesseractDoOCR() function.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<remarks>
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>                                                                                           \
 <example>
  Using OCR and drawing rectangles around Text areas
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.OCRTesseractReinit()
        oGdPictureImaging.OCRTesseractSetPassCount(1)
        sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "c:\\Dictionaries", "")
        If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
            MsgBox("Needed dictionary is not into the specified path! ")
        Else
            If CheckBox1.Checked = False Then
                For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
                    Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
                                                                    oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
                                                                    1, oGdPictureImaging.ARGB(255,255,0,0), False)
                Next ncpt
            End If
 
      oGdPictureImaging.OCRTesseractClear()
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractSetPassCount(System.Int32)">
	<summary>
  Set the number of 'learning pass' for each recognition process (1 by default).
  
  A value between 2 and 5 can increase quality of recognition.
  
  A value of 2 is recommended for full page OCR process.
  </summary>
	<param name="PassCount">The number of pass. Must be a value greater than 0 otherwise 1 will be used.</param>
	<remarks>
  This function has impact on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
  &amp; OCRTesseractDoOCR.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCR and drawing rectangles around Text areas
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.OCRTesseractReinit()
        oGdPictureImaging.OCRTesseractSetPassCount(1)
        sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "c:\\Dictionaries", "")
        If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
            MsgBox("Needed dictionary is not into the specified path! ")
        Else
            If CheckBox1.Checked = False Then
                For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
                    Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
                                                                    oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
                                                                    1, oGdPictureImaging.ARGB(255,255,0,0), False)
                Next ncpt
            End If
 
      oGdPictureImaging.OCRTesseractClear()
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractSetMinCharHeight(System.Int32)">
	<summary>
  Defines a minimum height for recognized characters.
  </summary>
	<param name="MinCharHeight">The minimum height. Use 0 for no filter.</param>
	<remarks>
  This function has impact on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
  &amp; OCRTesseractDoOCR.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCRTesseractSetMinCharHeight
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      oGdPictureImaging.OCRTesseractSetMinCharHeight(26)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractSetMinCharWidth(System.Int32)">
	<summary>
  Defines a minimum width for recognized characters.
  </summary>
	<param name="MinCharWidth">The minimum width. Use 0 for no filter.</param>
	<remarks>
  This function has impact on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
  &amp; OCRTesseractDoOCR.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCRTesseractSetMinCharWidth
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      oGdPictureImaging.OCRTesseractSetMinCharWidth(26)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractSetMaxCharHeight(System.Int32)">
	<summary>
  Defines a maximum height for recognized characters.
  </summary>
	<param name="MaxCharHeight">The maximum height. Use 0 for no filter.</param>
	<remarks>
  This function has impact on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
  &amp; OCRTesseractDoOCR.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCRTesseractSetMaxCharHeight
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      oGdPictureImaging.OCRTesseractSetMaxCharHeight(26)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractSetMaxCharWidth(System.Int32)">
	<summary>
  Defines a maximum height for recognized characters.
  </summary>
	<param name="MaxCharWidth">The maximum width. Use 0 for no filter.</param>
	<remarks>
  This function has impact on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
  &amp; OCRTesseractDoOCR.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCRTesseractSetMaxCharWidth
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      oGdPictureImaging.OCRTesseractSetMaxCharWidth(26)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.OCRTesseractReinit">
	<summary>
  The tesseract engine is based on a learning algorithm. Therefore, accuracy of a character recognition
  process can depend on previous OCR process.
  
  Call this function to reinitialize the Tesseract engine in its default configuration and clear the adaptive data.
  </summary>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.OCRTesseractDoOCR(System.Int32,System.String,System.String,System.String)"/>
	<remarks>
  This function has impact on SaveAsPDFOCR, PdfAddGdPictureImageToPdfOCR, PdfOCRCreateFromMultipageTIFF
  &amp; OCRTesseractDoOCR.
  
  This function requires the optional GdPicture Tesseract Plugin. This Plugin must be unlocked with the
  SetLicenseNumberOCRTesseract() function. 
  </remarks>
	<example>
  Using OCR and drawing rectangles around Text areas
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ncpt As Integer
      Dim sOCR As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.OCRTesseractReinit()
        oGdPictureImaging.OCRTesseractSetPassCount(1)
        sOCR = oGdPictureImaging.OCRTesseractDoOCR(m_ImageID, "eng", "c:\\Dictionaries", "")
        If oGdPictureImaging.GetStat = GdPictureStatus.OCRDictionaryNotFound Then
            MsgBox("Needed dictionary is not into the specified path! ")
        Else
            If CheckBox1.Checked = False Then
                For ncpt = 1 To oGdPictureImaging.OCRTesseractGetCharCount
                    Call oGdPictureImaging.DrawRectangle(ImageID, oGdPictureImaging.OCRTesseractGetCharLeft(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharTop(ncpt) ,
                                                                    oGdPictureImaging.OCRTesseractGetCharRight(ncpt) - oGdPictureImaging.OCRTesseractGetCharLeft(ncpt),
                                                                    oGdPictureImaging.OCRTesseractGetCharBottom(ncpt) - oGdPictureImaging.OCRTesseractGetCharTop(ncpt),
                                                                    1, oGdPictureImaging.ARGB(255,255,0,0), False)
                Next ncpt
            End If
 
      oGdPictureImaging.OCRTesseractClear()
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetPixelArrayByte8bpp(System.Int32,System.Byte[]@,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Stores into an array of bytes the pixel indexes of an area of a paletized 8bpp GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Output parameter. Array of pixel indexes. each entry of the array is a
                         reference to a palette index [0 - 255]. </param>
	<param name="SrcLeft">The left source pixel of the area. </param>
	<param name="SrcTop">The top source pixel of the area. </param>
	<param name="Width">The width of the area in pixel. </param>
	<param name="Height">The height of the area in pixel. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetPixelArrayByte8bpp(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<remarks>
  This function works only with 8bpp image.
  </remarks>
	<example>
  usage of GetPixelArrayByte8bpp() and SetPixelArrayByte8bpp() functions to apply negative effect on a
  8bpp grayscale GdPicture image.
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim arPixel() As Byte
  Dim X As Integer
  Dim Y As Integer
  Dim ImageID As Integer
  Dim ImageHeight As Integer
  Dim ImageWidth As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("8bppimage.tif")
  ImageHeight = oGdPictureImaging.GetHeight(ImageID)
  ImageWidth = oGdPictureImaging.GetWidth(ImageID)
  
  ReDim arPixel(ImageWidth * ImageHeight)
  oGdPictureImaging.GetPixelArrayByte8bpp(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  
  For X = 0 To ImageWidth - 1
     For Y = 0 To ImageHeight - 1
        arPixel((Y * ImageWidth) + X) = Not arPixel((Y * ImageWidth) + X)
     Next Y
  Next X
  oGdPictureImaging.SetPixelArrayByte8bpp(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  oGdPictureImaging.SaveAsTIFF(ImageID, "8bppimageneg.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetPixelArrayByte8bpp(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Set pixel indexes from an array of bytes to an area of a paletized 8bpp GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Array of pixel indexes. each entry of the array is a reference to a
                         palette index [0 - 255]. </param>
	<param name="SrcLeft">The left source pixel of the area. </param>
	<param name="SrcTop">The top source pixel of the area. </param>
	<param name="Width">The width of the area in pixel. </param>
	<param name="Height">The height of the area in pixel. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetPixelArrayByte8bpp(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<remarks>
  This function works only with 8bpp image.
  </remarks>
	<example>
  usage of GetPixelArrayByte8bpp() and SetPixelArrayByte8bpp() functions to apply negative effect on a
  8bpp grayscale GdPicture image.
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim arPixel() As Byte
  Dim X As Integer
  Dim Y As Integer
  Dim ImageID As Integer
  Dim ImageHeight As Integer
  Dim ImageWidth As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("8bppimage.tif")
  ImageHeight = oGdPictureImaging.GetHeight(ImageID)
  ImageWidth = oGdPictureImaging.GetWidth(ImageID)
  
  ReDim arPixel(ImageWidth * ImageHeight)
  oGdPictureImaging.GetPixelArrayByte8bpp(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  
  For X = 0 To ImageWidth - 1
     For Y = 0 To ImageHeight - 1
        arPixel((Y * ImageWidth) + X) = Not arPixel((Y * ImageWidth) + X)
     Next Y
  Next X
  oGdPictureImaging.SetPixelArrayByte8bpp(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  oGdPictureImaging.SaveAsTIFF(ImageID, "8bppimageneg.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetPixelArrayInteger(System.Int32,System.Int32[]@,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Stores into an array of Integer the ARGB pixel values of an area of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Output parameter. Array of pixel data. </param>
	<param name="SrcLeft">The left source pixel of the area. </param>
	<param name="SrcTop">The top source pixel of the area. </param>
	<param name="Width">The width of the area in pixel. </param>
	<param name="Height">The height of the area in pixel. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetPixelArrayInteger(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<example>
  usage of GetPixelArrayInteger() and SetPixelArrayInteger() functions to apply negative effect on a
  GdPicture image
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  
  Dim arPixel() As Integer
  Dim X As Integer
  Dim Y As Integer
  Dim ImageID As Integer
  Dim ImageHeight As Integer
  Dim ImageWidth As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
  ImageHeight = oGdPictureImaging.GetHeight(ImageID)
  ImageWidth = oGdPictureImaging.GetWidth(ImageID)
  
  ReDim arPixel(ImageWidth * ImageHeight)
  oGdPictureImaging.GetPixelArrayInteger(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  
  For X = 0 To ImageWidth - 1
      For Y = 0 To ImageHeight - 1
          arPixel((Y * ImageWidth) + X) = Not arPixel((Y * ImageWidth) + X)
      Next Y
  Next X
  oGdPictureImaging.SetPixelArrayInteger(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  oGdPictureImaging.SaveAsTIFF(ImageID, "imageneg.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetPixelArrayInteger(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Changes the pixel values contained into an area of a GdPicture image from an array which contains
  Integer ARBG color values.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Array of pixel data. </param>
	<param name="DstLeft">The left destination pixel of the area. </param>
	<param name="DstTop">The top destination pixel of the area. </param>
	<param name="Width">The width of the destination area in pixel. </param>
	<param name="Height">The height of the destination area in pixel. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetPixelArrayInteger(System.Int32,System.Int32[]@,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<example>
  usage of GetPixelArrayInteger() and SetPixelArrayInteger() functions to apply negative effect on a
  GdPicture image
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  
  Dim arPixel() As Integer
  Dim X As Integer
  Dim Y As Integer
  Dim ImageID As Integer
  Dim ImageHeight As Integer
  Dim ImageWidth As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
  ImageHeight = oGdPictureImaging.GetHeight(ImageID)
  ImageWidth = oGdPictureImaging.GetWidth(ImageID)
  
  ReDim arPixel(ImageWidth * ImageHeight)
  oGdPictureImaging.GetPixelArrayInteger(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  
  For X = 0 To ImageWidth - 1
      For Y = 0 To ImageHeight - 1
          arPixel((Y * ImageWidth) + X) = Not arPixel((Y * ImageWidth) + X)
      Next Y
  Next X
  oGdPictureImaging.SetPixelArrayInteger(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  oGdPictureImaging.SaveAsTIFF(ImageID, "imageneg.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetPixelArrayByte(System.Int32,System.Byte[]@,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Stores into an array of byte each Blue, Green, Red and Alpha components of the pixel contained into
  an area of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Output parameter. Array of pixel data. </param>
	<param name="SrcLeft">The left source pixel of the area. </param>
	<param name="SrcTop">The top source pixel of the area. </param>
	<param name="Width">The width of the area in pixel. </param>
	<param name="Height">The height of the area in pixel. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.SetPixelArrayByte(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<returns>
  A member of the GdPictureStatus enumeration.
  
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  usage of GetPixelArrayByte() and SetPixelArrayByte() functions to apply negative effect on a
  GdPicture image
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim arPixel() As Byte
  Dim X As Integer
  Dim Y As Integer
  Dim ImageID As Integer
  Dim ImageHeight As Integer
  Dim ImageWidth As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
  ImageHeight = oGdPictureImaging.GetHeight(ImageID)
  ImageWidth = oGdPictureImaging.GetWidth(ImageID)
  
  ReDim arPixel(ImageWidth * ImageHeight * 4)
  oGdPictureImaging.GetPixelArrayByte(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  
  For X = 0 To ImageWidth - 1
      For Y = 0 To ImageHeight - 1
          arPixel((Y * 4 * ImageWidth) + X * 4) = Not arPixel((Y * 4 * ImageWidth) + X * 4) 'Blue channel
          arPixel((Y * 4 * ImageWidth) + X * 4 + 1) = Not arPixel((Y * 4 * ImageWidth) + X * 4 + 1) 'Green channel
          arPixel((Y * 4 * ImageWidth) + X * 4 + 2) = Not arPixel((Y * 4 * ImageWidth) + X * 4 + 2) 'Red channel
          arPixel((Y * 4 * ImageWidth) + X * 4 + 3) = 255 'Alpha chanel. Set 255 for full opacity
      Next Y
  Next X
  oGdPictureImaging.SetPixelArrayByte(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  oGdPictureImaging.SaveAsTIFF(ImageID, "imageneg.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetPixelArrayByte(System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Changes the pixel values contained into an area of a GdPicture image from an array which contains
  each each Blue, Green, Red and Alpha components of pixel.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Array of pixel data. </param>
	<param name="DstLeft">The left destination pixel of the area. </param>
	<param name="DstTop">The top destination pixel of the area. </param>
	<param name="Width">The width of the destination area in pixel. </param>
	<param name="Height">The height of the destination area in pixel. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetPixelArrayByte(System.Int32,System.Byte[]@,System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<example>
  usage of GetPixelArrayByte() and SetPixelArrayByte() functions to apply negative effect on a
  GdPicture image
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim arPixel() As Byte
  Dim X As Integer
  Dim Y As Integer
  Dim ImageID As Integer
  Dim ImageHeight As Integer
  Dim ImageWidth As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
  ImageHeight = oGdPictureImaging.GetHeight(ImageID)
  ImageWidth = oGdPictureImaging.GetWidth(ImageID)
  
  ReDim arPixel(ImageWidth * ImageHeight * 4)
  oGdPictureImaging.GetPixelArrayByte(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  
  For X = 0 To ImageWidth - 1
      For Y = 0 To ImageHeight - 1
          arPixel((Y * 4 * ImageWidth) + X * 4) = Not arPixel((Y * 4 * ImageWidth) + X * 4) 'Blue channel
          arPixel((Y * 4 * ImageWidth) + X * 4 + 1) = Not arPixel((Y * 4 * ImageWidth) + X * 4 + 1) 'Green channel
          arPixel((Y * 4 * ImageWidth) + X * 4 + 2) = Not arPixel((Y * 4 * ImageWidth) + X * 4 + 2) 'Red channel
          arPixel((Y * 4 * ImageWidth) + X * 4 + 3) = 255 'Alpha chanel. Set 255 for full opacity
      Next Y
  Next X
  oGdPictureImaging.SetPixelArrayByte(ImageID, arPixel, 0, 0, ImageWidth, ImageHeight)
  oGdPictureImaging.SaveAsTIFF(ImageID, "imageneg.tif", TiffCompression.TiffCompressionAUTO)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PixelGetColor(System.Int32,System.Int32,System.Int32)">
	<summary>
  Gets the color of a specified pixel in a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="SrcLeft">Value that specifies the x-coordinate (column) of the pixel. </param>
	<param name="SrcTop">Value that specifies the y-coordinate (row) of the pixel. </param>
	<returns>
  Color. Color Object. You can build a Color Object using the ARGB() function. Color of the selected
  pixel. 
  </returns>
	<example>
  Retrieving a certain pixel's color.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim PixelColor As Color
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      PixelColor = oGdPictureImaging.PixelGetColor(ImageID, 50, 75)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PixelSetColor(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
  Sets the color of a specified pixel in a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Value that specifies the x-coordinate (column) of the pixel. </param>
	<param name="DstTop">Value that specifies the y-coordinate (row) of the pixel. </param>
	<param name="PixelColor">Color Object. You can build a Color Object using the ARGB() function. Color
                           of the selected pixel. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PixelGetColor(System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Setting an image's certain pixel's color.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      PixelColor = oGdPictureImaging.PixelSetColor(ImageID, 50, 75 , oGdPictureImaging.ARGB(255, 0, 255, 0))
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetStride(System.Int32)">
	<summary>
  Returns the width, in bytes, of a single row of pixel data of a GdPicture image.
  
  Also known as pitch or scan width, this width is a multiple, or possibly sub-multiple, of the pixel
  dimensions of the image and may be padded out to include a few more bytes.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  If success, non 0: a GdPicture image stride. If fail, 0: Use the GetStat() function to determine the
  reason this function failed.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<example>
  Retrieving the image's stride..
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ImgStride As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ImgStride = oGdPictureImaging.GetStride(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetBits(System.Int32)">
	<summary>
  Returns a pointer to the data-bits of a GdPicture Image.
  
  It is up to you to interpret these bytes correctly, according to the results of GetBitDepth() and
  GetStride() functions.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  If success, non 0: A pointer to the data-bits of the bitmap. If fail, 0: Use the GetStat() function
  to determine the reason this function failed.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStride(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GetBitDepth(System.Int32)"/>
	<example>
  Retrieving the image bits..
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ImgBits As IntPtr
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ImgBits = oGdPictureImaging.GetBits(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetScanLines(System.Int32)">
	<summary>
  Returns an array of pointers of all GdPicture Image scanlines.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  An array of bitmap scanlines pointer; First entry is the top scanline and latest is the bottom.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStride(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.GetBitDepth(System.Int32)"/>
	<example>
  Retrieving the image Array of IntPtr to scanlines..
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ScanLines() As IntPtr
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ScanLines = oGdPictureImaging.GetScanLines(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetColorMode">
	<summary>
  Returns the active printer color Mode.
  </summary>
	<returns>
  A member of the PrinterColorMode enumeration.
  </returns>
	<example>
  Obtaining the active color mode
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim PrinterClrMod As PrinterColorMode
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      PrinterClrMod = oGdPictureImaging.PrintGetColorMode()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetColorMode(GdPicture.PrinterColorMode)">
	<summary>
  Sets to the active printer the color mode for the print process.
  </summary>
	<param name="ColorMode">A member of the PrinterColorMode enumeration.</param>
	<example>
  Setting the Printing Color Mode to Gray.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetColorMode(PrinterColorMode.PrinterColorModeGray)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetDocumentName">
	<summary>
  Gets the document name to display during the next print process (for example, in a print status
  dialog box or printer queue) while printing the document.
  </summary>
	<returns>
  The document name to display.
  </returns>
	<example>
  Obtaining the Document Name
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim DocumentName As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      DocumentName = oGdPictureImaging.PrintGetDocumentName()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetDocumentName(System.String)">
	<summary>
  Sets the document name to display during the next print process (for example, in a print status
  dialog box or printer queue) while printing the document.
  </summary>
	<param name="DocumentName">The document name to display.</param>
	<example>
  Setting Document name and printing it.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetDocumentName("GdPicture Document")
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetShowPrintingProgress(System.Boolean)">
	<summary>
  Tells the component to show or hide progress indicator during printing (showed by default).
  </summary>
	<param name="Show">True to show progress indicators printing, else False.</param>
	<example>
  Hiding Printing Progress during printing.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetShowPrintingProgress(False)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetPaperBin(System.Int32)">
	<summary>
  Sets the paper bin to be used by the active printer.
  </summary>
	<param name="PaperBin">The paper bin to use.</param>
	<returns>
  True if the paper bin has been selected else false (unsupported paper bin). Standard values are:
  
  1 - Upper
  
  2 - Lower
  
  3 - Middle
  
  4 - Manual
  
  5 - Envelope
  
  6 - ManualFeed
  
  7 - AutomaticFeed
  
  8 - TractorFeed
  
  9 - SmallFormat
  
  10 - LargeFormat
  
  11 - LargeCapacity
  
  14 - Cassette
  
  15 - FormSource
  
  256 or larger - Custom 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetPaperBin(System.Drawing.Printing.PaperSource)">
	<summary>
  Sets the paper bin to be used by the active printer.
  </summary>
	<param name="PaperBin">The paper bin to use. A PaperSource object. </param>
	<returns>
  True if the paper bin has been selected else false (unsupported paper bin).
  </returns>
	<example>
  Retrieve information about all paper sources available in the current printer.
  <code lang="vb.net">
  Private prn As New Printing.PrintDocument
  
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      For n As Integer = 0 To prn.DefaultPageSettings.PrinterSettings.PaperSources.Count - 1
          MsgBox(prn.DefaultPageSettings.PrinterSettings.PaperSources(n).ToString)
      Next
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetPaperBin">
	<summary>
  Returns the paperbin used by the active printer.
  </summary>
	<returns>
  The paperbin used.
  
  Standard values are:
  
  1 - Upper
  
  2 - Lower
  
  3 - Middle
  
  4 - Manual
  
  5 - Envelope
  
  6 - ManualFeed
  
  7 - AutomaticFeed
  
  8 - TractorFeed
  
  9 - SmallFormat
  
  10 - LargeFormat
  
  11 - LargeCapacity
  
  14 - Cassette
  
  15 - FormSource
  
  256 or larger - Custom
  </returns>
	<example>
  Obtaining the Paper Bin
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Bin As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      Bin = oGdPictureImaging.PrintGetPaperBin()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetFromToPage(System.Int32,System.Int32)">
	<summary>
  Ask to the component for the next print process to print a range of page with multipage tif image.
  </summary>
	<param name="FromPage">First page to print. </param>
	<param name="ToPage">Last page to print.</param>
	<example>
  Setting the range of the pages to print.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetFromToPage(2, 5)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetQuality">
	<summary>
  Returns the current quality of the active printer.
  </summary>
	<returns>
  A member of the PrintQuality enumeration.
  </returns>
	<example>
  Obtaining the PrintQuality
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Quality As PrintQuality
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      Quality = oGdPictureImaging.PrintGetQuality()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetQuality(GdPicture.PrintQuality)">
	<summary>
  Sets the quality of the active printer.
  </summary>
	<param name="Quality">A member of the PrintQuality enumeration.</param>
	<example>
  Setting the printing quality to High Resolution.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetQuality(PrintQuality.PrintQualityHightResolution)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetStat">
	<summary>
  Returns the last Printer status.
  </summary>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetCopies(System.Int16)">
	<summary>
  Tell to the active printer the number of copies to print.
  </summary>
	<param name="Copies">The number of copies to print.</param>
	<example>
  Setting the number of copies to print
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetCopies(2)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetCopies">
	<summary>
  Returns the number of copies to print with the selected printer.
  </summary>
	<returns>
  Number of copies to print.
  </returns>
	<example>
  Obtaining the number of copies to print
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Copies As Short
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      Copies = oGdPictureImaging.PrintGetCopies()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetDuplexMode(System.Drawing.Printing.Duplex)">
	<summary>
  Sets duplex mode for the selected printer.
  </summary>
	<param name="DuplexMode">A member of the Duplex enumeration.</param>
	<example>
  Setting the number of copies to print
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetDuplexMode(Printing.Duplex.Horizontal)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetDuplexMode">
	<summary>
  Returns the print duplex mode for the selected printer.
  </summary>
	<returns>
  A member of the Duplex enumeration.
  </returns>
	<example>
  Obtaining the duplex mode for the selected printer
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim DuplexMod As Printing.Duplex
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      DuplexMod = oGdPictureImaging.PrintGetDuplexMode()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetOrientation(GdPicture.PrinterOrientation)">
	<summary>
  Defines the page orientation when printing.
  </summary>
	<param name="Orientation">A member of the PrinterOrientation enumeration.</param>
	<example>
  Setting the print orientation
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetOrientation(PrinterOrientation.PrinterOrientationLandscape)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetOrientation">
	<summary>
  Returns the page orientation when printing.
  </summary>
	<returns>
  A member of the PrinterOrientation enumeration.
  </returns>
	<example>
  Obtaining the orientation of the page when printing
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Orientation As PrinterOrientation
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      Orientation = oGdPictureImaging.PrintGetOrientation()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetActivePrinter">
	<summary>
  Returns the selected printer name.
  </summary>
	<returns>
  The name of the selected printer.
  </returns>
	<example>
  Obtaining the active printer's name
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim sPrinter As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      sPrinter = oGdPictureImaging.PrintGetActivePrinter()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetActivePrinter(System.String)">
	<summary>
  Changes the active printer.
  </summary>
	<param name="PrinterName">The name of the new active printer. </param>
	<returns>
  True if success, else False.
  </returns>
	<example>
  Setting the active Printer
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim sPrinter As String
      Dim ActiveFound As Boolean
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      sPrinter = "GdPicture Printer"
      ActiveFound = oGdPictureImaging.PrintSetActivePrinter(sPrinter)
      If ActiveFound = False Then
        MsgBox("Printer Not Found")
      End If
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetPrinterSettings(System.Drawing.Printing.PrinterSettings)">
	<summary>
  Sets the current printer settings.
  </summary>
	<param name="PS">A System.Drawing.Printing.PrinterSettings object. The printer settings.</param>
	<example>
  Setting printer settings
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetPrinterSettings(Drawing.Printing.PrinterSettings.PaperSizeCollection)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetPrinterSettings">
	<summary>
  Returns the current printer settings.
  </summary>
	<returns>
  A System.Drawing.Printing.PrinterSettings object. The current printer settings.
  </returns>
	<example>
  Obtaining the current Printer's settings
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim pSettings As Drawing.Printing.PrinterSettings
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      pSettings = oGdPictureImaging.PrintGetPrinterSettings()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetPrintersCount">
	<summary>
  Returns the number of available printers.
  </summary>
	<returns>
  Number of copies.
  </returns>
	<example>
  Obtaining the number of available printers
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim PrintersCount As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      PrintersCount = oGdPictureImaging.PrintGetPrintersCount()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetPrinterName(System.Int32)">
	<summary>
  Returns the name of an available printer.
  </summary>
	<param name="PrinterNo">Value between 1 and printer count. </param>
	<returns>
  The name of the printer.
  </returns>
	<example>
  Obtaining the name of an available printer
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim PrinterName As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      PrinterName = oGdPictureImaging.PrintGetPrinterName(3)
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintDialog(System.Int32)">
	<summary>
  Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
  prints a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  True if success, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetStat"/>
	<example>
  Displaying Windows Printer Dialog
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintDialog(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintDialog(System.Int32,System.Windows.Forms.IWin32Window)">
	<summary>
  Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
  prints a GdPicture image.
  
  This function allows to specify the top-level window that will own the modal dialog box.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="owner">Represents the top-level window that will own the modal dialog box. </param>
	<returns>
  True if success, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetStat"/>
	<example>
  Displaying Windows Printer Dialog
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintDialog(ImageID, Me)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintDialogFit(System.Int32)">
	<summary>
  Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
  prints a GdPicture image adjusting the picture size to the default paper size.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  True if success, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetStat"/>
	<example>
  Using PrintDialogFit
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintDialogFit(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintDialogFit(System.Int32,System.Windows.Forms.IWin32Window)">
	<summary>
  Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
  prints a GdPicture image adjusting the picture size to the default paper size.
  
  This function allows to specify the top-level window that will own the modal dialog box.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="owner">Represents the top-level window that will own the modal dialog box. </param>
	<returns>
  True if success, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetStat"/>
	<example>
  Using PrintDialogFit
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintDialogFit(ImageID, Me)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintDialogBySize(System.Int32,System.Single,System.Single,System.Single,System.Single)">
	<summary>
  Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
  prints a GdPicture image with specific size and position.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate (in inches) of the upper-left corner of the image
                        into the paper. </param>
	<param name="DstTop">Specifies the y-coordinate (in inches) of the upper-left corner of the image
                       into the paper. </param>
	<param name="Width">Specifies the width (in inches) of image into the paper. </param>
	<param name="Height">Specifies the height (in inches) of image into the paper. </param>
	<returns>
  True if success, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetStat"/>
	<example>
  Using PrintDialogBySize
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintDialogBySize(ImageID, 200, 250, 450, 500)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintDialogBySize(System.Int32,System.Windows.Forms.IWin32Window,System.Single,System.Single,System.Single,System.Single)">
	<summary>
  Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
  prints a GdPicture image with specific size and position.
  
  This function allows to specify the top-level window that will own the modal dialog box.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="owner">Represents the top-level window that will own the modal dialog box. </param>
	<param name="DstLeft">Specifies the x-coordinate (in inches) of the upper-left corner of the image
                        into the paper. </param>
	<param name="DstTop">Specifies the y-coordinate (in inches) of the upper-left corner of the image
                       into the paper. </param>
	<param name="Width">Specifies the width (in inches) of image into the paper. </param>
	<param name="Height">Specifies the height (in inches) of image into the paper. </param>
	<returns>
  True if success, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetStat"/>
	<example>
  Using PrintDialogBySize
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintDialogBySize(ImageID, Me, 200, 250, 450, 500)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Print(System.Int32)">
	<summary>
  Prints a GdPicture image to the active printer.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetStat"/>
	<example>
  Printing an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintInterop(System.Int32)">
	<summary>
 This function is just a wrapper of the Print() function that is not supported under some legacy environments of development such as VB6.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.Print(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.PrintFit(System.Int32)">
	<summary>
  Prints a GdPicture image to the active printer. Adjusts the picture size to the default paper size.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetStat"/>
	<example>
  Printing to default paper size
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintFit(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintBySize(System.Int32,System.Single,System.Single,System.Single,System.Single)">
	<summary>
  Prints a GdPicture image to the active printer with specific size and position.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="DstLeft">Specifies the x-coordinate (in inches) of the upper-left corner of the image
                        into the paper. </param>
	<param name="DstTop">Specifies the y-coordinate (in inches) of the upper-left corner of the image
                       into the paper. </param>
	<param name="Width">Specifies the width (in inches) of image into the paper. </param>
	<param name="Height">Specifies the height (in inches) of image into the paper. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetStat"/>
	<example>
  Printing to specified size and position
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintBySize(ImageID, 0.0, 0.0, 200.0, 300.0)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetStdPaperSize(System.Int32)">
	<summary>
  Sets a standard paper size to use by the active printer.
  </summary>
	<param name="PaperSize">Paper size constant.Can be:0 - Custom1
                          - Letter2 - LetterSmall3 - Tabloid4
                          - Ledger5 - Legal6 - Statement7 -
                          Executive8 - A39 - A410 - A4Small11
                          - A512 - B413 - B514 - Folio15
                          - Quarto16 - Standard10x1417 - Standard11x1718
                          - Note19 - Number9Envelope20 - Number10Envelope21
                          - Number11Envelope22 - Number12Envelope23 -
                          Number14Envelope24 - CSheet25 - DSheet26
                          - ESheet27 - DLEnvelope28 - C5Envelope29
                          - C3Envelope30 - C4Envelope31 - C6Envelope32
                          - C65Envelope33 - B4Envelope34 - B5Envelope35
                          - B6Envelope36 - ItalyEnvelope37 -
                          MonarchEnvelope38 - PersonalEnvelope39 -
                          USStandardFanfold40 - GermanStandardFanfold41 -
                          GermanLegalFanfold42 - IsoB443 - JapanesePostcard44
                          - Standard9x1145 - Standard10x1146 -
                          Standard15x1147 - InviteEnvelope50 - LetterExtra51
                          - LegalExtra52 - TabloidExtra53 - A4Extra54
                          - LetterTransverse55 - A4Transverse56 -
                          LetterExtraTransverse57 - APlus58 - BPlus59
                          - LetterPlus60 - A4Plus61 - A5Transverse62
                          - B5Transverse63 - A3Extra64 - A5Extra65
                          - B5Extra66 - A267 - A3Transverse68
                          - A3ExtraTransverse69 - JapanesePostcard70 - A671
                          - JapaneseEnvelopeKakuNumber272 - JapaneseEnvelopeKakuNumber373
                          - JapaneseEnvelopeChouNumber374 - JapaneseEnvelopeChouNumber475
                          - LetterRotated76 - A3Rotated77 - A4Rotated78
                          - A5Rotated79 - B4JisRotated80 - B5JisRotated81
                          - JapanesePostcardRotated82 - JapaneseDoublePostcardRotated83
                          - A6Rotated84 - JapaneseEnvelopeKakuNumber2Rotated85
                          - JapaneseEnvelopeChouNumber3Rotated86 -
                          JapaneseEnvelopeChouNumber4Rotated87 -
                          JapaneseEnvelopeChouNumber4Rotated88 - B6Jis89 -
                          B6JisRotated90 - Standard12x1191 -
                          JapaneseEnvelopeYouNumber492 -
                          JapaneseEnvelopeYouNumber4Rotated93 - Prc16K94 -
                          Prc32K95 - Prc32KBig96 - PrcEnvelopeNumber197
                          - PrcEnvelopeNumber298 - PrcEnvelopeNumber399 -
                          PrcEnvelopeNumber4100 - PrcEnvelopeNumber5101 -
                          PrcEnvelopeNumber6102 - PrcEnvelopeNumber7103 -
                          PrcEnvelopeNumber8104 - PrcEnvelopeNumber9105 -
                          PrcEnvelopeNumber10106 - Prc16KRotated107 -
                          Prc32KRotated108 - Prc32KBigRotated109 -
                          PrcEnvelopeNumber1Rotated110 - PrcEnvelopeNumber2Rotated111
                          - PrcEnvelopeNumber3Rotated112 - PrcEnvelopeNumber4Rotated113
                          - PrcEnvelopeNumber5Rotated114 - PrcEnvelopeNumber6Rotated115
                          - PrcEnvelopeNumber7Rotated116 - PrcEnvelopeNumber8Rotated117
                          - PrcEnvelopeNumber9Rotated118 - PrcEnvelopeNumber10RotatedGreater
                          than 118 - A custom paper size</param>
	<example>
  Printing after seting PaperSize to Ledger
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetStdPaperSize(5)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetPaperSize(System.Drawing.Printing.PaperSize)">
	<summary>
  Sets the paper size to be used by the active printer.
  </summary>
	<param name="PaperSize">Paper size. A PaperSize object. </param>
	<example>
  Retrieve information about all paper formats available in the current printer.
  <code lang="vb.net">
  Private prn As New Printing.PrintDocument
  
  For n As Integer = 0 To prn.DefaultPageSettings.PrinterSettings.PaperSizes.Count - 1
      MsgBox(prn.DefaultPageSettings.PrinterSettings.PaperSizes(n).ToString)
  Next
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetUserPaperSize(System.Single,System.Single)">
	<summary>
  Sets a custom paper size to use by the active printer.
  </summary>
	<param name="PaperWidth">Custom paper width in Inches. </param>
	<param name="PaperHeight">Custom paper height in Inches.</param>
	<example>
  Printing after seting the height and the width of the printing
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetUserPaperSize(150.0, 300.0)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetPaperHeight">
	<summary>
  Gets the paper height used by the active printer.
  </summary>
	<returns>
  The paper height in Inches.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetPaperSize"/>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetPaperWidth"/>
	<example>
  Obtaining the height of the paper
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Height As Single
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      Height = oGdPictureImaging.PrintGetPaperHeight()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetPaperWidth">
	<summary>
  Gets the paper width used by the active printer.
  </summary>
	<returns>
  The paper width in Inches.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetPaperSize"/>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetPaperHeight"/>
	<example>
  Obtaining the width of the paper
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Width As Single
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      Width = oGdPictureImaging.PrintGetPaperWidth()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetAlignment">
	<summary>
  Gets the image alignment into the page during a print process.
  </summary>
	<returns>
  A member of the PrintAlignment enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintSetAlignment(GdPicture.PrintAlignment)"/>
	<example>
  Obtaining the alignment of the paper
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim pAlignment As PrintAlignment
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      pAlignment = oGdPictureImaging.PrintGetAlignment()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetAlignment(GdPicture.PrintAlignment)">
	<summary>
  Sets the image alignment into the page during a print process.
  </summary>
	<param name="Alignment">A member of the PrintAlignment enumeration. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetAlignment"/>
	<example>
  Printing after seting alignment to Bottom Center
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetAlignment(PrintAlignment.PrintAlignmentBottomCenter)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintSetAutoRotation(System.Boolean)">
	<summary>
  Determines if the object should rotate automatically the pages to fit on the output medium.
  </summary>
	<param name="AutoRotation">True for automatic rotation, else False.</param>
	<example>
  Setting AutoRotation for printing to true prior to printing document
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.PrintSetAutoRotation(True)
      oGdPictureImaging.Print(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetPaperSize">
	<summary>
  Returns the current paper size of the active printer.
  </summary>
	<returns>
  Paper size constant.
  
  Can be:
  
  1 - Letter
  
  2 - LetterSmall
  
  3 - Tabloid
  
  4 - Ledger
  
  5 - Legal
  
  6 - Statement
  
  7 - Executive
  
  8 - A3
  
  9 - A4
  
  10 - A4Small
  
  11 - A5
  
  12 - B4
  
  13 - B5
  
  14 - Folio
  
  15 - Quarto
  
  16 - Standard10x14
  
  17 - Standard11x17
  
  18 - Note
  
  19 - Number9Envelope
  
  20 - Number10Envelope
  
  21 - Number11Envelope
  
  22 - Number12Envelope
  
  23 - Number14Envelope
  
  24 - CSheet
  
  25 - DSheet
  
  26 - ESheet
  
  27 - DLEnvelope
  
  28 - C5Envelope
  
  29 - C3Envelope
  
  30 - C4Envelope
  
  31 - C6Envelope
  
  32 - C65Envelope
  
  33 - B4Envelope
  
  34 - B5Envelope
  
  35 - B6Envelope
  
  36 - ItalyEnvelope
  
  37 - MonarchEnvelope
  
  38 - PersonalEnvelope
  
  39 - USStandardFanfold
  
  40 - GermanStandardFanfold
  
  41 - GermanLegalFanfold
  
  42 - IsoB4
  
  43 - JapanesePostcard
  
  44 - Standard9x11
  
  45 - Standard10x11
  
  46 - Standard15x11
  
  47 - InviteEnvelope
  
  50 - LetterExtra
  
  51 - LegalExtra
  
  52 - TabloidExtra
  
  53 - A4Extra
  
  54 - LetterTransverse
  
  55 - A4Transverse
  
  56 - LetterExtraTransverse
  
  57 - APlus
  
  58 - BPlus
  
  59 - LetterPlus
  
  60 - A4Plus
  
  61 - A5Transverse
  
  62 - B5Transverse
  
  63 - A3Extra
  
  64 - A5Extra
  
  65 - B5Extra
  
  66 - A2
  
  67 - A3Transverse
  
  68 - A3ExtraTransverse
  
  69 - JapanesePostcard
  
  70 - A6
  
  71 - JapaneseEnvelopeKakuNumber2
  
  72 - JapaneseEnvelopeKakuNumber3
  
  73 - JapaneseEnvelopeChouNumber3
  
  74 - JapaneseEnvelopeChouNumber4
  
  75 - LetterRotated
  
  76 - A3Rotated
  
  77 - A4Rotated
  
  78 - A5Rotated
  
  79 - B4JisRotated
  
  80 - B5JisRotated
  
  81 - JapanesePostcardRotated
  
  82 - JapaneseDoublePostcardRotated
  
  83 - A6Rotated
  
  84 - JapaneseEnvelopeKakuNumber2Rotated
  
  85 - JapaneseEnvelopeChouNumber3Rotated
  
  86 - JapaneseEnvelopeChouNumber4Rotated
  
  87 - JapaneseEnvelopeChouNumber4Rotated
  
  88 - B6Jis
  
  89 - B6JisRotated
  
  90 - Standard12x11
  
  91 - JapaneseEnvelopeYouNumber4
  
  92 - JapaneseEnvelopeYouNumber4Rotated
  
  93 - Prc16K
  
  94 - Prc32K
  
  95 - Prc32KBig
  
  96 - PrcEnvelopeNumber1
  
  97 - PrcEnvelopeNumber2
  
  98 - PrcEnvelopeNumber3
  
  99 - PrcEnvelopeNumber4
  
  100 - PrcEnvelopeNumber5
  
  101 - PrcEnvelopeNumber6
  
  102 - PrcEnvelopeNumber7
  
  103 - PrcEnvelopeNumber8
  
  104 - PrcEnvelopeNumber9
  
  105 - PrcEnvelopeNumber10
  
  106 - Prc16KRotated
  
  107 - Prc32KRotated
  
  108 - Prc32KBigRotated
  
  109 - PrcEnvelopeNumber1Rotated
  
  110 - PrcEnvelopeNumber2Rotated
  
  111 - PrcEnvelopeNumber3Rotated
  
  112 - PrcEnvelopeNumber4Rotated
  
  113 - PrcEnvelopeNumber5Rotated
  
  114 - PrcEnvelopeNumber6Rotated
  
  115 - PrcEnvelopeNumber7Rotated
  
  116 - PrcEnvelopeNumber8Rotated
  
  117 - PrcEnvelopeNumber9Rotated
  
  118 - PrcEnvelopeNumber10Rotated
  
  Greater than 118 - A custom paper size
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetPaperWidth"/>
	<seealso cref="M:GdPicture.GdPictureImaging.PrintGetPaperHeight"/>
	<example>
  Obtaining the size of the paper
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Size As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      Size = oGdPictureImaging.PrintGetPaperSize()
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.PrintGetMargins(System.Single@,System.Single@)">
	<summary>
  Gets the physical margins of the active printer.
  </summary>
	<param name="LeftMargin">Returns the left physical margin in inches. </param>
	<param name="TopMargin">Returns the top physical margin in inches.</param>
	<example>
  Setting AutoRotation for printing to true prior to printing document
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim LeftMargin As Single
      Dim TopMargin As Single
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      oGdPictureImaging.PrintGetMargins(LeftMargin, TopMargin)
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Rotate(System.Int32,System.Drawing.RotateFlipType)">
	<summary>
  Rotates or flips a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Rotation">A member of the RotateFlipType enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.RotateAnglePreserveDimensions(System.Int32,System.Single)">
	<summary>
  Rotates clockwise a GdPicture by a specific angle keeping the originals width and height of the
  picture.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Rotating Image and perserving dimensions
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.RotateAnglePreserveDimensions(ImageID, 30.0)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.RotateAnglePreserveDimensionsBackColor(System.Int32,System.Single,System.Drawing.Color)">
	<summary>
  Rotates clockwise a GdPicture by a specific angle and specific back color keeping the originals width
  and height of the picture.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function.
                          Color of the background. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Rotating Image and perserving dimensions and specifying black color
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.RotateAnglePreserveDimensionsBackColor(ImageID, 30.0, oGdPictureImaging.ARGB(255, 0, 0, 0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.RotateAnglePreserveDimensionsCenter(System.Int32,System.Single)">
	<summary>
  Rotates clockwise a GdPicture by a specific from the center with a specific angle keeping the originals width and
  height of the picture.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Rotating Image from the center and perserving dimensions 
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.RotateAnglePreserveDimensionsCenter(ImageID, 30.0)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.RotateAnglePreserveDimensionsCenterBackColor(System.Int32,System.Single,System.Drawing.Color)">
	<summary>
  Rotates clockwise a GdPicture by a specific angle from the center with custom back color keeping the
  originals width and height of the picture.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function.
                          Color of the background. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Rotating Image from the center and specifying black color and perserving dimensions 
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.RotateAnglePreserveDimensionsCenterBackColor(ImageID, 30.0, oGdPictureImaging.ARGB(255, 0, 0, 0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.RotateAngle(System.Int32,System.Single)">
	<summary>
  Rotates clockwise a GdPicture by a specific angle.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Rotating Image 
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.RotateAngle(ImageID, 30.0)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.RotateAngleBackColor(System.Int32,System.Single,System.Drawing.Color)">
	<summary>
  Rotates clockwise a GdPicture by a specific angle and a custom back color.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Angle">Angle of rotation in degrees. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function.
                          Color of the background. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Rotating Image with specifying BackColor
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.RotateAngleBackColor(ImageID, 30.0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Resize(System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Resizes a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="NewImageWidth">New image width in pixel. </param>
	<param name="NewImageHeight">New image height in pixel. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Resizing Image 
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.Resize(ImageID, 50, 100, Drawing2D.InterpolationMode.Bicubic)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetResizedGdPictureImage(System.Int32,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Creates a resized GdPicture image from a GdPicture Image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to release.</param>
	<param name="NewImageWidth">New image width in pixel. </param>
	<param name="NewImageHeight">New image height in pixel. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  0: Failure. Use the GetStat() function to determine the reason this function failed.
  
  Non-zero: GdPicture Image Identifier. The created image.
  </returns>
	<example>
  Resizing Image's Width 
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ResizedImage As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ResizedImage = oGdPictureImaging.GetResizedGdPictureImage(ImageID, 50, 100, Drawing2D.InterpolationMode.Bicubic)
  
      oGdPictureImaging.SaveAsPNG(ResizedImage, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 oGdPictureImaging.ReleaseGdPictureImage(ResizedImage)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ResizeHeightRatio(System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Resizes a GdPicture image with custom height keeping the original aspect ratio for the new width
  value.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="NewImageHeight">The new height of the image in pixel. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Resizing Image's Height 
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.ResizeHeightRatio(ImageID, 50, Drawing2D.InterpolationMode.Bicubic)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ResizeWidthRatio(System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Resizes a GdPicture image with custom width keeping the original aspect ratio for the new height
  value.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="NewImageWidth">The new image width in pixel. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Resizing Image's Width 
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.ResizeWidthRatio(ImageID, 50, Drawing2D.InterpolationMode.Bicubic)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Scale(System.Int32,System.Single,System.Drawing.Drawing2D.InterpolationMode)">
	<summary>
  Resizes a GdPicture image image, keeping the same aspect ratio. The image is scaled by a percentage
  value.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ScalePercent">Scale percentage value. ie: if ScalePercent = 50, the image is
                             reduced to half size. </param>
	<param name="InterpolationMode">A member of the Drawing2D.InterPolationMode enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Scaling an Image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.Scale(ImageID, 50, Drawing2D.InterpolationMode.Bicubic)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AddBorders(System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
  Adds borders around a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BorderWidth">The width of the border in pixel. </param>
	<param name="BorderColor">Color Object. You can build a Color Object using the ARGB() function.
                            Color of the borders. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
  Adding Borders.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.AddBorders(ImageID, 5, oGdPictureImaging.ARGB(255, 0, 0, 0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AddBorderTop(System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
  Adds border to the top of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BorderHeight">The height of the border in pixel. </param>
	<param name="BorderColor">Color Object. You can build a Color Object using the ARGB() function.
                            Color of the border. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Adding Top Border.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.AddBorderTop(ImageID, 5, oGdPictureImaging.ARGB(255, 0, 0, 0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AddBorderBottom(System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
  Adds border to the bottom of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BorderHeight">The width of the border in pixel. </param>
	<param name="BorderColor">Color Object. You can build a Color Object using the ARGB() function.
                            Color of the border. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Adding Bottom Border.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.AddBorderBottom(ImageID, 5, oGdPictureImaging.ARGB(255, 0, 0, 0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AddBorderLeft(System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
  Adds border to the left of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BorderWidth">The width of the border in pixel. </param>
	<param name="BorderColor">Color Object. You can build a Color Object using the ARGB() function.
                            Color of the border. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Adding Left Border.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.AddBorderLeft(ImageID, 5, oGdPictureImaging.ARGB(255, 0, 0, 0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.AddBorderRight(System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
  Adds border to the right of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="BorderWidth">The width of the border in pixel. </param>
	<param name="BorderColor">Color Object. You can build a Color Object using the ARGB() function.
                            Color of the border. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Adding Right Border.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.AddBorderRight(ImageID, 5, oGdPictureImaging.ARGB(255, 0, 0, 0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetColorChannelFlagsC(System.Int32)">
	<summary>
 Returns a new GdPicture image based on the Cyan channel of the CMYK color space of a GdPicture
 image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 According to Wikipedia, CMYK (short for cyan, magenta, yellow, and key) is a subtractive color model
 used in color printing.
 
 This color model is based on mixing pigments of the following colors in order to make other colors:
 
   * C = Cyan.
   * M = Magenta.
   * Y = Yellow.
   * K = Key (Black).
 
 CMYK is the standard color model used in offset printing for full-color documents. CMYK, or
 four-color printing, generates a good final printout with excellent contrast. 
 </remarks>
	<example>
  Obtaining an image form the Cyan channel of the CMYK color profile of another
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ImageID2 As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      ImageID2 = oGdPictureImaging.GetColorChannelFlagsC(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetColorChannelFlagsM(System.Int32)">
	<summary>
 Returns a new GdPicture image based on the Magenta channel of the CMYK color space of a GdPicture
 image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 According to Wikipedia, CMYK (short for cyan, magenta, yellow, and key) is a subtractive color model
 used in color printing.
 
 This color model is based on mixing pigments of the following colors in order to make other colors:
 
   * C = Cyan.
   * M = Magenta.
   * Y = Yellow.
   * K = Key (Black).
 
 CMYK is the standard color model used in offset printing for full-color documents. CMYK, or
 four-color printing, generates a good final printout with excellent contrast. 
 </remarks>
	<example>
  Obtaining an image form Magneta channel of the CMYK color space of another
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ImageID2 As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      ImageID2 = oGdPictureImaging.GetColorChannelFlagsM(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetColorChannelFlagsY(System.Int32)">
	<summary>
 Returns a new GdPicture image based on the Yellow channel of the CMYK color space of a GdPicture
 image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 According to Wikipedia, CMYK (short for cyan, magenta, yellow, and key) is a subtractive color model
 used in color printing.
 
 This color model is based on mixing pigments of the following colors in order to make other colors:
 
   * C = Cyan.
   * M = Magenta.
   * Y = Yellow.
   * K = Key (Black).
 
 CMYK is the standard color model used in offset printing for full-color documents. CMYK, or
 four-color printing, generates a good final printout with excellent contrast. 
 </remarks>
	<example>
  Obtaining an image form Yellow channel of the CMYK color space of another
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ImageID2 As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      ImageID2 = oGdPictureImaging.GetColorChannelFlagsY(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetColorChannelFlagsK(System.Int32)">
	<summary>
 Returns a new GdPicture image based on the Key (Black) channel of the CMYK color space of a
 GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<remarks>
 According to Wikipedia, CMYK (short for cyan, magenta, yellow, and key) is a subtractive color model
 used in color printing.
 
 This color model is based on mixing pigments of the following colors in order to make other colors:
 
   * C = Cyan.
   * M = Magenta.
   * Y = Yellow.
   * K = Key (Black).
 
 CMYK is the standard color model used in offset printing for full-color documents. CMYK, or
 four-color printing, generates a good final printout with excellent contrast. 
 </remarks>
	<example>
  Obtaining an image form Black channel of the CMYK color space of another
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ImageID2 As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      ImageID2 = oGdPictureImaging.GetColorChannelFlagsK(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(ImageID2)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ICCSetRGBProfile(System.Int32,System.String)">
	<summary>
 Applies a specific RGB color profile to a GdPicture image without embedding the color profile
 information. Therefore, only image pixels will be modified according to the profile information. If
 you need to embed an ICC profile to an image file the ICCAddProfileToFile() function must be
 used.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ProfilePath">The path of the ICC profile file to apply. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
 Setting an ICC RGB Profile to the image and not embedding it.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ICCSetRGBProfile(ImageID, "profile.icc")
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.tiff")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ICCExportToFile(System.Int32,System.String)">
	<summary>
  Exports the ICC profile of a GdPicture image to a file.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">The path of the ICC profile file to create. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Exporting an ICC profile from an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      oGdPictureImaging.ICCExportToFile(ImageID, "profile.icc")
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ICCRemove(System.Int32)">
	<summary>
  Deletes the ICC profile embedded within a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Removing an ICC Profile.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ICCRemove(ImageID)
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ICCAddFromFile(System.Int32,System.String)">
	<summary>
  Adds an ICC profile from a file to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">The path of the ICC profile file. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Adding an ICC profile from its file path to the image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
      oGdPictureImaging.ICCAddFromFile(ImageID, "profile.icc")
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ICCImageHasProfile(System.Int32)">
	<summary>
  Asks if a GdPicture image gets an embedded ICC profile.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  True if a GdPicture image gets an embedded ICC profile, else False.
  </returns>
	<example>
 Determining whether an image gets an ICC Profile.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim HasProfile As Boolean
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     HasProfile = oGdPictureImaging.ICCImageHasProfile(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ICCRemoveProfileOfFile(System.String)">
	<summary>
  Removes the ICC profile embedded into a CMYK TIFF image file.
  </summary>
	<param name="FilePath">The path of the CMYK TIFF image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Removing an ICC Profile using the Image File path.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ICCRemoveProfileOfFile("test.tiff")
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.tiff")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ICCAddProfileToFile(System.String,System.String)">
	<summary>
  Adds/replaces an ICC profile of an existing image file. Supported formats are TIFF, JPEG and PNG images.
  </summary>
	<param name="ImagePath">The path of the TIFF, JPEG or PNG image. </param>
	<param name="ProfilePath">the path of the ICM color profil to add to the image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Apply specific ICC profile to a TIFF image &amp; decode it.
  <code lang="vb.net">
  oGdPictureImaging.ICCAddProfileToFile("myimage.tif", "profile.icc")
  Dim ImageID as Integer = oGdPictureImaging.CreateGdPictureImageFromFileICM ("myimage.tif")
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetColorRemap(System.Int32,System.Drawing.Imaging.ColorMap[])">
	<summary>
  Applies a color-remap table to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="RemapTable">Array which specifies the color remap table. Each entry is a
                           Imaging.ColorMap oGdPictureImaging. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Translate in one call, Blue color by Green, White by Black and Red by Yellow.
  <code lang="vb.net">
  Dim arcolor(3) As Imaging.ColorMap
  
  arcolor(0).OldColor = Color.Blue
  arcolor(0).NewColor = Color.Green
  arcolor(1).OldColor = Color.White
  arcolor(1).NewColor = Color.Black
  arcolor(2).OldColor = Color.Red
  arcolor(3).NewColor = Color.Yellow
  
  Dim ImageID as Integer = oGdPictureImaging.CreateGdPictureImageFromFile ("input.bmp")
  oGdPictureImaging.SetColorRemap(ImageID, arcolor)
  oGdPictureImaging.SaveAsBMP (ImageID, "output.bmp")
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetColorKey(System.Int32,System.Drawing.Color,System.Drawing.Color)">
	<summary>
  Sets the color key (transparency range) for a specified category on a GdPicture image.
  
  This function sets the high and low color-key values so that a range of colors can be made
  transparent.
  
  Any color that has each of its three components (red, green, blue) between the corresponding
  components of the high and low color keys is made transparent.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ColorLow">Color Object. You can build a Color Object using the ARGB() function.
                         Specifies the low color-key value. </param>
	<param name="ColorHigh">Color Object. You can build a Color Object using the ARGB() function.
                          Specifies the high color-key value. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<example>
 Making the values of the color channel green  between 50 and 120 transparent
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.SetColorKey(ImageID, oGdPictureImaging.ARGB(255,0,50,0),oGdPictureImaging.ARGB(255,0,120,0))
 
     oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.tiff")
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.HistogramGetRed(System.Int32,System.Int32[]@)">
	<summary>
  Computes the red channel histogram of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Output parameter. Array of 256 entries containing the red channel
                         histogram data. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
		<code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim arHistoR(255) As Integer
  Dim ImageID As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
  oGdPictureImaging.HistogramGetRed(ImageID, arHistoR)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.HistogramGetGreen(System.Int32,System.Int32[]@)">
	<summary>
  Computes the green channel histogram of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Output parameter. Array of 256 entries containing the green channel
                         histogram data. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
		<code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim arHistoG(255) As Integer
  Dim ImageID As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
  oGdPictureImaging.HistogramGetGreen(ImageID, arHistoG)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.HistogramGetBlue(System.Int32,System.Int32[]@)">
	<summary>
  Computes the blue channel histogram of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Output parameter. Array of 256 entries containing the blue channel
                         histogram data. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
		<code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim arHistoB(255) As Integer
  Dim ImageID As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
  oGdPictureImaging.HistogramGetBlue(ImageID, arHistoB)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.HistogramGetAlpha(System.Int32,System.Int32[]@)">
	<summary>
  Computes the alpha channel histogram of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Output parameter. Array of 256 entries containing the alpha channel
                         histogram data. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
		<code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim arHistoA(255) As Integer
  Dim ImageID As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
  oGdPictureImaging.HistogramGetAlpha(ImageID, arHistoA)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.HistogramGetARGB(System.Int32,System.Int32[]@,System.Int32[]@,System.Int32[]@,System.Int32[]@)">
	<summary>
  Computes in one call, alpha, red, green and blue channel histograms of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="HistoA">Output parameter. Array of 256 entries containing the alpha channel histogram
                         data. </param>
	<param name="HistoR">Output parameter. Array of 256 entries containing the red channel histogram
                         data. </param>
	<param name="HistoG">Output parameter. Array of 256 entries containing the green channel histogram
                         data. </param>
	<param name="HistoB">Output parameter. Array of 256 entries containing the blue channel histogram
                         data. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
		<code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim arHistoA(255) As Integer
  Dim arHistoR(255) As Integer
  Dim arHistoG(255) As Integer
  Dim arHistoB(255) As Integer
  Dim ImageID As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
  oGdPictureImaging.HistogramGetARGB(ImageID, arHistoA, arHistoR, arHistoG, arHistoB)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.HistogramGet8Bpp(System.Int32,System.Int32[]@)">
	<summary>
  Computes the colors histogram of a 8bpp indexed GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Output parameter. Array of 256 entries containing the color palette
                           histogram data. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  This function works only with 8bpp image.
  </remarks>
	<example>
		<code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim arHisto8(255) As Integer
  Dim ImageID As Integer
  

  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.tif")
  oGdPictureImaging.HistogramGet8Bpp(ImageID, arHisto8)
  oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsBMP(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as Windows or OS/2 Bitmap image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert JPG file to BMP file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.jpg")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsBMP (ImageID, "image.bmp")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsWBMP(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as wbmp (Wireless Bitmap) image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  WBMP format is a format used on WAP (Wireless Application Protocol).
  
  You can load WBMP images into mobile device which supports WAP (ie: cellular phones).
  
  This format supports only 1BPP image.
  
  
  </remarks>
	<example>
  How to convert JPG file to WBMP file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.jpg")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsWBBMP (ImageID, "image.wbmp")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsXPM(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as X11 Pixmap image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  This function works only with 8-bits and 24-bits images.
  
  
  </remarks>
	<example>
  How to convert JPG file to X11 Pixmap file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.jpg")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsXPM (ImageID, "image.xpm")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsICO(System.Int32,System.String,System.Drawing.Color)">
	<summary>
  Saves a GdPicture image as Window icon image format specifying a color to set as transparent.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. </param>
	<param name="TransparentColor">Color Object. You can build a Color Object using the ARGB() function.
                                 If bTransparentColor parameter is True, this parameter defines the
                                 transparent color of the ICON. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to Window icon file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsICO (ImageID, "icon.ico", Color.White)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsICO(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as Window icon image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to Window icon file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsICO (ImageID, "icon.ico")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsICO(System.Int32,System.String,GdPicture.IconSize)">
	<summary>
  Saves a GdPicture image as Window icon image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. </param>
	<param name="IconSize">A member of the IconSize enumeration. The icons size. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to Window icon file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsICO (ImageID, "icon.ico")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsICO(System.Int32,System.String,System.Drawing.Color,GdPicture.IconSize)">
	<summary>
  Saves a GdPicture image as Window icon image format specifying a color to set as transparent.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="TransparentColor">Color Object. You can build a Color Object using the ARGB() function.
                                 If bTransparentColor parameter is True, this parameter defines the
                                 transparent color of the ICON. </param>
	<param name="IconSize">A member of the IconSize enumeration. The icons size. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to Window icon file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsICO (ImageID, "icon.ico", Color.White)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsGIF(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as Graphics Interchange Format image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to Graphics Interchange Format file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsGIF (ImageID, "image.gif")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsPNG(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as Portable Network Graphics image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to Portable Network Graphics file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsPNG (ImageID, "image.png")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsJPEG(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as jpeg image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to JPEG file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsJPEG (ImageID, "image.jpg")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsJBIG2(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as JBIG2 image format with lossless compression.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to JBIG2 file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsJBIG2 (ImageID, "image.jb2")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
	<remarks>
  This method requires the optional GdPicture JBIG2 Encoder Plugin.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsJPEG(System.Int32,System.String,System.Int32)">
	<summary>
  Saves a GdPicture image as jpeg image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Quality">Defines the compression quality between 1 and 100. Usually 90. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to JPEG file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsJPEG (ImageID, "image.jpg", 90)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsJPEG(System.Int32,System.String,System.Int32,System.Boolean)">
	<summary>
  Saves a GdPicture image as jpeg image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Quality">Defines the compression quality between 1 and 100. Usually 90. </param>
	<param name="Progressive">If True, saves as a progressive JPEG. False by default.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to progressive JPEG file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsJPEG (ImageID, "image.jpg", 90, True)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsTGA(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as Truevision TARGA image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  This function works only with 8-bits, 16-bits, 24-bits and 32-bits images.
  
  Use the IsPixelFormatHasAlpha(ImageID) function to check if a GdPicture image has an alpha component.
  
  
  </remarks>
	<example>
  How to convert BMP file to Truevision TARGA image.
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsTGA (ImageID, "image.tga")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsPBM(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as Portable Bitmap image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  This function works only with 1-bit, 8-bits grayscale and 24-bits images.
  
  Use the IsPixelFormatHasAlpha(ImageID) function to check if a GdPicture image has an alpha component.
  
  
  </remarks>
	<example>
  How to convert BMP file to Portable Bitmap image.
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsPBM (ImageID, "image.pbm")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsWMF(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as WMF image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to WMF file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsWMF (ImageID, "image.wmf")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsEXR(System.Int32,System.String,GdPicture.ExrCompression)">
	<summary>
  Saves a GdPicture image in high dynamic-range image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Compression">A combination of members of the ExrCompression enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to high dynamic-range file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsEXR (ImageID, "image.exr", ExrCompression.ExrCompressionDefault)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsJ2K(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as JPEG-2000 codestream image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  This function works only with 8-bits grayscale images, 24-bits images and 32-bits images
  
  
  </remarks>
	<example>
  How to convert BMP file to JPEG 2000 codestream file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsJ2K (ImageID, "image.j2k")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsJ2K(System.Int32,System.String,System.Int32)">
	<summary>
  Saves a GdPicture image as JPEG-2000 codestream image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Rate">Defines compression rate Between [1(MaxQuality - Lossless) ... 512(Poor
                     quality)]. Usually 16. 1 results in a lossless compression.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  This function works only with 8-bits grayscale images, 24-bits images and 32-bits images
  </remarks>
	<example>
  How to convert BMP file to JPEG 2000 codestream file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsJ2K (ImageID, "image.j2k", 16)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsJP2(System.Int32,System.String)">
	<summary>
  Saves a GdPicture image as JPEG-2000 File image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<remarks>
  This function works only with 8-bits grayscale images, 24-bits images and 32-bits images
  
  
  </remarks>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  How to convert BMP file to JPEG 2000 file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsJP2 (ImageID, "image.jp2")
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsJP2(System.Int32,System.String,System.Int32)">
	<summary>
  Saves a GdPicture image as JPEG-2000 File image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Rate">Defines compression rate Between [1(MaxQuality - Lossless) ... 512(Poor
                     quality)]. Usually 16. 1 results in a lossless compression. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  This function works only with 8-bits grayscale images, 24-bits images and 32-bits images
  </remarks>
	<example>
  How to convert BMP file to JPEG 2000 file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsJP2 (ImageID, "image.jp2", 16)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveToFTP(System.Int32,GdPicture.DocumentFormat,System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
	<summary>
  Saves a GdPicture image into a FTP server.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ImageFormat">A member of the DocumentFormat enumeration.Currently
                            supported format are: DocumentFormatBMP, DocumentFormatJPEG,
                            DocumentFormatPNG, DocumentFormatTIFF, DocumentFormatGIF,
                            DocumentFormatPDF </param>
	<param name="EncoderParameter">Can be jpeg quality between 1 and 100 for "jpg" image.Can
                                 be compression value for tif image: 6:None, 5:RLE, 4:CCITT4,
                                 3:CCITT3, 2:LZW.For other image format set this
                                 parameter to 0. </param>
	<param name="Host">The host server ie: ftp.com </param>
	<param name="Path">The image file path to create into the distant server ie:
                     /images/nature.jpg </param>
	<param name="Login">User Login. </param>
	<param name="Password">User Password. </param>
	<param name="FTPPort">The FTP port number used. Usually 21 </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.SaveToHTTP(System.Int32,GdPicture.DocumentFormat,System.Int32,System.String)">
	<summary>
  Saves a GdPicture image into a HTTP server.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ImageFormat">A member of the DocumentFormat enumeration.Currently
                            supported format are: DocumentFormatBMP, DocumentFormatJPEG,
                            DocumentFormatPNG, DocumentFormatTIFF, DocumentFormatGIF,
                            DocumentFormatPDF </param>
	<param name="EncoderParameter">Can be jpeg quality between 1 and 100 for "jpg" image.Can
                                 be compression value for tif image: 6:None, 5:RLE, 4:CCITT4,
                                 3:CCITT3, 2:LZW.For other image format set this
                                 parameter to 0. </param>
	<param name="Address">Address of destination. IE:
                        http://www.google.com/uploads/myimage.jpg </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.SaveToHTTP(System.Int32,GdPicture.DocumentFormat,System.Int32,System.String,System.String,System.String)">
	<summary>
  Saves a GdPicture image into a HTTP server using authentication.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ImageFormat">A member of the DocumentFormat enumeration.Currently
                            supported format are: DocumentFormatBMP, DocumentFormatJPEG,
                            DocumentFormatPNG, DocumentFormatTIFF, DocumentFormatGIF,
                            DocumentFormatPDF </param>
	<param name="EncoderParameter">Can be jpeg quality between 1 and 100 for "jpg" image.Can
                                 be compression value for tif image: 6:None, 5:RLE, 4:CCITT4,
                                 3:CCITT3, 2:LZW.For other image format set this
                                 parameter to 0. </param>
	<param name="Address">Address of destination. IE:
                        http://www.google.com/uploads/myimage.jpg </param>
	<param name="Login">User Login. </param>
	<param name="Password">User Password. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsTIFF(System.Int32,System.String,GdPicture.TiffCompression)">
	<summary>
  Saves a GdPicture image as Tagged Image File Format.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  If the specified GdPicture image is an editable multipage tiff image, this function will save only
  the selected page.
  
  To save an editable multipage tiff image use the TiffSaveMultiPageToFile() function.
  </remarks>
	<example>
  How to convert BMP file to Tif file
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsTIFF (ImageID, "image.tif", TiffCompression.TiffCompressionAUTO)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsTIFF(System.Int32,System.String,GdPicture.TiffCompression,System.Int32)">
	<summary>
  Saves a GdPicture image as Tagged Image File Format.
  
  This functions takes a jpeg quality parameter.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<param name="JpegQuality">Defines the compression quality between 1 and 100. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  If the specified GdPicture image is an editable multipage tiff image, this function will save only
  the selected page.
  
  To save an editable multipage tiff image use the TiffSaveMultiPageToFile() function.
  </remarks>
	<example>
  How to convert BMP file to Tif file using JPEG compression
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsTIFF (ImageID, "image.tif", TiffCompression.TiffCompressionJPEG, 90)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsTIFF(System.Int32,System.String,System.Boolean,GdPicture.TiffCompression)">
	<summary>
  Saves a GdPicture image as Tagged Image File Format.
  
  This functions takes a parameter to save tiff in CMYK color space.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="CMYKMode">Set True to save tiff in CMYK color space, else False. </param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  If the specified GdPicture image is an editable multipage tiff image, this function will save only
  the selected page.
  
  To save an editable multipage tiff image use the TiffSaveMultiPageToFile() function.
  </remarks>
	<example>
  How to convert BMP file to CMYK Tif file using JPEG compression
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsTIFF (ImageID, "imagecmyk.tif", True, TiffCompression.TiffCompressionJPEG, 90)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsTIFF(System.Int32,System.String,System.Boolean,GdPicture.TiffCompression,System.Int32)">
	<summary>
  Saves a GdPicture image as Tagged Image File Format.
  
  This functions takes a parameter to save tiff in CMYK color space and another parameter to defines jpeg quality .
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="FilePath">A string that contains the name of the file to which to save the image. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="CMYKMode">Set True to save tiff in CMYK color space, else False. </param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<param name="JpegQuality">Defines the compression quality between 1 and 100. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  If the specified GdPicture image is an editable multipage tiff image, this function will save only
  the selected page.
  
  To save an editable multipage tiff image use the TiffSaveMultiPageToFile() function.
  </remarks>
	<example>
  How to convert BMP file to CMYK Tif file using JPEG compression
  <code lang="vb.net">
  Dim ImageID As Integer
  
  ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("image.bmp")
  If ImageID &lt;&gt; 0 Then
     oGdPictureImaging.SaveAsTIFF (ImageID, "imagecmyk.tif", True, TiffCompression.TiffCompressionJPEG, 90)
     oGdPictureImaging.ReleaseGdPictureImage (ImageID)
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsByteArray(System.Int32,System.Byte[]@,System.Int32@,GdPicture.DocumentFormat,System.Int32)">
	<summary>
  Saves a GdPicture image to a byte array.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Data">Output parameter. The image data. </param>
	<param name="BytesRead">Output parameter. The number of bytes wrote into the Data array. </param>
	<param name="ImageFormat">A member of the DocumentFormat enumeration.Currently
                            supported format are:- DocumentFormatBMP,-
                            DocumentFormatJPEG,- DocumentFormatPNG,-
                            DocumentFormatTIFF (single page &amp; editable multipage tiff image),-
                            DocumentFormatGIF.</param>
	<param name="EncoderParameter">Compression or encoding quality to use.- For JPEG
                                 format defines the quality between 1 (lower) and 100 (higher).-
                                 For TIFF format defines the compression scheme to be used: 6 for
                                 None, 5 for RLE, 4 for CCITT4, 3 for CCITT3, 2 for LZW and 65536 for
                                 automatic compression adjustment (recommended !).- Use
                                 0 for other image format. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Saving an image into an array of bytes
  <code lang="vb.net">
  Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
  Dim ImageBytes As Byte() = Nothing
  Dim BytesRead As Integer
  
  oGdPictureImaging.SaveAsByteArray(ImageID, ImageBytes, BytesRead, DocumentFormat.DocumentFormatJPEG, 90)
  </code>
	</example>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromByteArray(System.Byte[])"/>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsStream(System.Int32,System.IO.Stream,GdPicture.DocumentFormat,System.Int32)">
	<summary>
  Saves a GdPicture image to a stream.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Stream">The strem objet to save the image. </param>
	<param name="ImageFormat">A member of the DocumentFormat enumeration.Currently
                            supported format are:- DocumentFormatBMP,-
                            DocumentFormatJPEG,- DocumentFormatPNG,-
                            DocumentFormatTIFF (single page &amp; editable multipage tiff image),-
                            DocumentFormatGIF.</param>
	<param name="EncoderParameter">Compression or encoding quality to use.- For JPEG
                                 format defines the quality between 1 (lower) and 100 (higher).-
                                 For TIFF format defines the compression scheme to be used: 6 for
                                 None, 5 for RLE, 4 for CCITT4, 3 for CCITT3, 2 for LZW and 65536 for
                                 automatic compression adjustment (recommended !).- Use
                                 0 for other image format. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Saving an image to a System.IO.Stream
  <code lang="vb.net">
  Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("test.tif")
  Dim MyStream As System.IO.Stream = New MemoryStream
  
  oGdPictureImaging.SaveAsStream(ImageID, MyStream, DocumentFormat.DocumentFormatJPEG, 90)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsIStream(System.Int32,System.Runtime.InteropServices.ComTypes.IStream,GdPicture.DocumentFormat,System.Int32)">
	<summary>
  Saves a GdPicture image to an Istream object.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Stream">The IStream objet to save the image. </param>
	<param name="ImageFormat">A member of the DocumentFormat enumeration.Currently
                            supported format are:- DocumentFormatBMP,-
                            DocumentFormatJPEG,- DocumentFormatPNG,-
                            DocumentFormatTIFF (single page &amp; editable multipage tiff image),-
                            DocumentFormatGIF.</param>
	<param name="EncoderParameter">Compression or encoding quality to use.- For JPEG
                                 format defines the quality between 1 (lower) and 100 (higher).-
                                 For TIFF format defines the compression scheme to be used: 6 for
                                 None, 5 for RLE, 4 for CCITT4, 3 for CCITT3, 2 for LZW and 65536 for
                                 automatic compression adjustment (recommended !).- Use
                                 0 for other image format. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.SaveAsString(System.Int32,GdPicture.DocumentFormat,System.Int32)">
	<summary>
  Saves a GdPicture image to a string.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="ImageFormat">A member of the DocumentFormat enumeration.Currently
                            supported format are:- DocumentFormatBMP,-
                            DocumentFormatJPEG,- DocumentFormatPNG,-
                            DocumentFormatTIFF (single page &amp; editable multipage tiff image),-
                            DocumentFormatGIF.</param>
	<param name="EncoderParameter">Compression or encoding quality to use.- For JPEG
                                 format defines the quality between 1 (lower) and 100 (higher).-
                                 For TIFF format defines the compression scheme to be used: 6 for
                                 None, 5 for RLE, 4 for CCITT4, 3 for CCITT3, 2 for LZW and 65536 for
                                 automatic compression adjustment (recommended !).- Use
                                 0 for other image format. </param>
	<returns>
  A string (encoding 1252) containing the saved image.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.GetHBitmapFromGdPictureImage(System.Int32)">
	<summary>
 Exports a GdPicture image to a HBitmap.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as HBitmap. </param>
	<returns>
 A new HBitmap handle which will contain the specified GdPicture image data.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ReleaseHBitmap(System.IntPtr)"/>
	<remarks>
 Use the GetStat() function to see if this function Succeeded.
 
 DO NOT FORGET to release the HBitmap object with the ReleaseHBitmap() function. 
 </remarks>
	<example>
 How to import/export  a GdPicture Image from/to HBITMAP
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim HBitmap As IntPtr
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     HBitmap = oGdPictureImaging.GetHBitmapFromGdPictureImage(ImageID)
     ResImg = oGdPictureImaging.CreateGdPictureImageFromHBitmap(HBitmap)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetHICONFromGdPictureImage(System.Int32)">
	<summary>
  Exports a GdPicture image as HICON.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as HICON. </param>
	<returns>
  A new HICON handle which will contains the specified GdPicture image data as icon.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ReleaseHICON(System.IntPtr)"/>
	<remarks>
  DO NOT FORGET to release the HICON object with the ReleaseHICON() function. 
  </remarks>
	<example>
 How to import/export  a GdPicture Image from/to HICON
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim HICON As IntPtr
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     HICON = oGdPictureImaging.GetHICONFromGdPictureImage(ImageID)
     ResImg = oGdPictureImaging.CreateGdPictureImageFromHICON(HBitmap)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ReleaseHBitmap(System.IntPtr)">
	<summary>
 This function deletes an HBitmap from the memory.
 </summary>
	<param name="HBitmap">The HBitmap handle to delete. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.GetHBitmapFromGdPictureImage(System.Int32)"/>
	<remarks>
 Use the GetStat() function to see if this function Succeeded. 
 </remarks>
	<example>
 How to import/export  a GdPicture Image from/to HBITMAP
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim HBitmap As IntPtr
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     HBitmap = oGdPictureImaging.GetHBitmapFromGdPictureImage(ImageID)
     ResImg = oGdPictureImaging.CreateGdPictureImageFromHBitmap(HBitmap)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     oGdPictureImaging.ReleaseGdPictureImage(HBitmap)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ReleaseHICON(System.IntPtr)">
	<summary>
 This function deletes a HICON from the memory.
 </summary>
	<param name="HICON">The HICON handle to delete. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.GetHICONFromGdPictureImage(System.Int32)"/>
	<remarks>
 Use the GetStat() function to see if this function Succeeded. 
 </remarks>
	<example>
 How to import/export  a GdPicture Image from/to HICON
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim HICON As IntPtr
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     HICON = oGdPictureImaging.GetHICONFromGdPictureImage(ImageID)
     ResImg = oGdPictureImaging.CreateGdPictureImageFromHICON(HBitmap)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetDCFromGdPictureImage(System.Int32)">
	<summary>
 Gets a handle to the device context (DC) associated with a GdPicture Image.
 
 The created display device context will be used by GDI functions to draw data on it.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The Image from the device context will be created. </param>
	<returns>
 Handle to the device context associated with this GdPicture Image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.ReleaseGdPictureImageDC(System.IntPtr)"/>
	<remarks>
 Each call to the GetDCFromGdPictureImage() function should be paired with a call to the
 ReleaseGdPictureImageDC() function. 
 </remarks>
	<example>
 How to retreive DC from a GdPicture Image.
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim DC As IntPtr
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     DC = oGdPictureImaging.GetDCFromGdPictureImage(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetGraphicsFromGdPictureImage(System.Int32)">
	<summary>
 Gets the graphics object associated with a GdPicture Image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The Image from the graphics will be associated. </param>
	<returns>
 A Graphics Object associated with this GdPicture Image. 
 </returns>
	<example>
 How to retreive Graphics Object from a GdPicture Image.
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Graph As Drawing.Graphics
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     Graph = oGdPictureImaging.GetGraphicsFromGdPictureImage(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ReleaseGdPictureImageDC(System.IntPtr)">
	<summary>
 Releases a device context handle obtained by a previous call to the GetDCFromGdPictureImage()
 function.
 </summary>
	<param name="hdc">Handle to a device context obtained by a previous to the GetDCFromGdPictureImage()
                   function. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetDCFromGdPictureImage(System.Int32)"/>
	<example>
 How to retreive DC from a GdPicture Image.
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim DC As IntPtr
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     DC = oGdPictureImaging.GetDCFromGdPictureImage(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     oGdPictureImaging.ReleaseGdPictureImageDC(DC)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetDibFromGdPictureImage(System.Int32)">
	<summary>
 Exports a GdPicture image as Dib (Device Independent Bitmap).
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as Dib.</param>
	<returns>
 A new dib based on a GdPicture image.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ReleaseDib(System.IntPtr)"/>
	<remarks>
 Use the GetStat() function to see if this function success.
 
 DO NOT FORGET to release the dib with the ReleaseDib() function. 
 </remarks>
	<example>
  How to import/export image from/to DIB.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ResImage As Integer
     Dim Dib As IntPtr
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Dib = oGdPictureImaging.GetDibFromGdPictureImage(ImageID)
     ResImage = oGdPictureImaging.CreateGdPictureImageFromDIB(Dib)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ReleaseDib(System.IntPtr)">
	<summary>
  Deletes a Dib from memory.
  </summary>
	<param name="Dib">The Dib to release. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.GetDibFromGdPictureImage(System.Int32)"/>
	<example>
  How to import/export image from/to DIB.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ResImage As Integer
     Dim Dib As IntPtr
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Dib = oGdPictureImaging.GetDibFromGdPictureImage(ImageID)
     ResImage = oGdPictureImaging.CreateGdPictureImageFromDIB(Dib)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     oGdPictureImaging.ReleaseDib(Dib)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetGdiplusImageFromGdPictureImage(System.Int32)">
	<summary>
 Returns a gdiplus image handle from a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as gdiplus image
                       handle. </param>
	<returns>
 The exported gdiplus image handle.
 </returns>
	<remarks>
 The exported gdiplus image will have the same pixel source as the GdPicture image passed as a
 parameter.
 
 Therefore, if you remove the specified GdPicture image from memory you will remove at same time the
 exported gdiplus image data. 
 </remarks>
	<example>
 How to import/export  a GdPicture Image from/to GdiPlus Image
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim GdiImg As IntPtr
     Dim ResImg As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     GdiImg = oGdPictureImaging.GetGdiplusImageFromGdPictureImage(ImageID)
     ResImg = oGdPictureImaging.CreateGdPictureImageFromGdiplusImage(GdiImg)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetBitmapFromGdPictureImage(System.Int32)">
	<summary>
 Returns a Bitmap object from a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The GdPicture image to export as Bitmap. </param>
	<returns>
 Bitmap. The exported Bitmap image.
 </returns>
	<remarks>
 The exported Bitmap object will have the same pixel source as a GdPicture image.
 
 Therefore, if you remove the GdPicture image from memory you will remove at same time the exported
 Bitmap data. 
 </remarks>
	<example>
 How to import/export Gdpicture Image from/to Bitmap
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ResImage As Integer
     Dim Bm As Bitmap
     
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Bm = oGdPictureImaging.GetBitmapFromGdPictureImage(ImageID)
     ResImage = oGdPictureImaging.CreateGdPictureImageFromBitmap(Bm)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateThumbnail(System.Int32,System.Int32,System.Int32)">
	<summary>
  Creates thumbnail of custom size from a GdPicture Image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image from which the thumbnail must be
                        done. </param>
	<param name="Width">The width of the thumbnail to create. </param>
	<param name="Height">The height of the thumbnail to create. </param>
	<remarks>
  If both of Width and Height parameters are 0, a system-defined size is used.
  </remarks>
	<returns>
  GdPicture Image Identifier. The thumbnail Image.
  </returns>
	<example>
  Creating a thumbnail from an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ThumbnailImg As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ThumbnailImg = oGdPictureImaging.CreateThumbnail(ImageID, 20, 20)
  
      oGdPictureImaging.SaveAsPNG(ThumbnailImg, "c:\\thumbnail.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateThumbnailHQ(System.Int32,System.Int32,System.Int32)">
	<summary>
  Creates a High Quality thumbnail of custom size from a GdPicture Image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image from which the HQ thumbnail must be
                        done. </param>
	<param name="Width">The width of the thumbnail to create. </param>
	<param name="Height">The height of the thumbnail to create. </param>
	<returns>
  GdPicture Image Identifier. The thumbnail Image.
  </returns>
	<example>
  Creating a High Quality thumbnail from an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ThumbnailImg As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ThumbnailImg = oGdPictureImaging.CreateThumbnailHQ(ImageID, 20, 20)
  
      oGdPictureImaging.SaveAsPNG(ThumbnailImg, "c:\\thumbnail.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateThumbnailHQ(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Creates a High Quality thumbnail of custom size from a GdPicture Image.
  
  This function fits the image thumbnail within a rectangle of specified dimensions having a specified
  background color.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image from which the HQ thumbnail must be
                        done. </param>
	<param name="Width">The width of the thumbnail to create. </param>
	<param name="Height">The height of the thumbnail to create. </param>
	<param name="BackColor">Color value. You can obtain a suitable value by using the ARGBI() function.
                          Background color of the thumbnail. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<returns>
  GdPicture Image Identifier. The thumbnail Image.
  </returns>
	<example>
  Creating a High Quality thumbnail from an image with specifying back color as Red.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ThumbnailImg As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ThumbnailImg = oGdPictureImaging.CreateThumbnailHQ(ImageID, 20, 20, oGdPictureImaging.ARGBI(255, 255, 0, 0))
  
      oGdPictureImaging.SaveAsPNG(ThumbnailImg, "c:\\thumbnail.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CreateThumbnailHQ(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
  Creates a High Quality thumbnail of custom size from a GdPicture Image.
  
  This function fits the image thumbnail within a rectangle of specified dimensions having a specified
  background color.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. The image from which the HQ thumbnail must be
                        done. </param>
	<param name="Width">The width of the thumbnail to create. </param>
	<param name="Height">The height of the thumbnail to create. </param>
	<param name="BackColor">Color Object. You can build a Color Object using the ARGB() function.
                          Background color of the thumbnail. </param>
	<returns>
  GdPicture Image Identifier. The thumbnail Image.
  </returns>
	<example>
  Creating a High Quality thumbnail from an image with specifying back color as Red.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ThumbnailImg As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ThumbnailImg = oGdPictureImaging.CreateThumbnailHQ(ImageID, 20, 20, oGdPictureImaging.ARG(255, 0, 0))
  
      oGdPictureImaging.SaveAsPNG(ThumbnailImg, "c:\\thumbnail.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
      oGdPictureImaging.ReleaseGdPictureImage(ThumbnailImg)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagGetXMLPacket(System.Int32)">
	<summary>
  Returns the XML Packet tag (code 700 (hex 0x02BC)) of a GdPicture Image as string.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  The XML tag content.
  </returns>
	<example>
  Getting XML tag content.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim XMLContent As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      XMLContent = oGdPictureImaging.TagGetXMLPacket(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagSetXMLPacket(System.Int32,System.String)">
	<summary>
  Writes the XML Packet tag (code 700 (hex 0x02BC)) of a GdPicture Image as string.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="XMLPacket">The XML packet tag value as string</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TagsSetPreserve(System.Boolean)">
	<summary>
  Asks to the component to preserve or not the tags when a GdPicture image is edited.
  </summary>
	<param name="Preserve">True to preserve tags else False.</param>
</member><member name="M:GdPicture.GdPictureImaging.TagCount(System.Int32)">
	<summary>
  Returns the number of Tags (Exif, Extra, Thumbnails &amp; GPS) attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  The number of tags attached to a GdPicture image.
  </returns>
	<remarks>
  Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
  Thumbnail related TAGs and Gps TAGs 
  </remarks>
	<example>
 Retrieving the number of Tags attached to an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim TagNo As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      TagNo = oGdPictureImaging.TagDelete(ImageID
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IPTCCount(System.Int32)">
	<summary>
  Returns the number of IPTC Tags attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  Number of IPTC tag 
  </returns>
	<example>
  Getting IPTC Count.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim IPTCCount As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      IPTCCount = oGdPictureImaging.IPTCCount(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagDelete(System.Int32,System.Int32)">
	<summary>
  Deletes a Tag attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to a
                      GdPicture image. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TagCount(System.Int32)"/>
	<remarks>
  Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
  Thumbnail related TAGs and Gps TAGs 
  </remarks>
	<example>
 Deleting a certain Tag attacked to an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.TagDelete(ImageID, 3)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagDeleteAll(System.Int32)">
	<summary>
  Deletes all Tags attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.TagCount(System.Int32)"/>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
  Thumbnail related TAGs and Gps TAGs 
  </remarks>
	<example>
 Deleting all Tags attached to an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.TagDeleteAll(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagGetID(System.Int32,System.Int32)">
	<summary>
  Returns a Tag ID attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to a
                      GdPicture image. </param>
	<returns>
  A member of the Tags enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TagCount(System.Int32)"/>
	<remarks>
  Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
  Thumbnail related TAGs and Gps TAGs 
  </remarks>
	<example>
 Retrieving a certain tag's id
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim TagID As Tags
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      TagID = oGdPictureImaging.TagGetID(ImageID, 3)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IPTCGetID(System.Int32,System.Int32)">
	<summary>
  Returns an IPTC Tag ID attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to a
                      GdPicture image. </param>
	<returns>
  The IPTC tag ID. A member of the IPTCTags enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.IPTCCount(System.Int32)"/>
	<example>
 Retrieving an IPTC tag's id
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim IPTCID As IPTCTags
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      IPTCID = oGdPictureImaging.IPTCGetID(ImageID, 3)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IPTCGetLength(System.Int32,System.Int32)">
	<summary>
 Returns the length in bytes of an IPTC tag attached to a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to a
                     GdPicture image. </param>
	<returns>
 the length of the tag.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.IPTCCount(System.Int32)"/>
	<example>
 Retrieving the length in bytes of a certain IPTC tag
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Length As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Length = oGdPictureImaging.IPTCGetLength(ImageID, 3)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagGetLength(System.Int32,System.Int32)">
	<summary>
 Returns the length in bytes of a tag attached to a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to a
                     GdPicture image. </param>
	<returns>
 the length of the tag.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TagCount(System.Int32)"/>
	<example>
 Retrieving the length in bytes of a certain tag
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Length As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Length = oGdPictureImaging.TagGetLength(ImageID, 3)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagGetName(System.Int32,System.Int32)">
	<summary>
  Returns as string a Tag name attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to a
                      GdPicture image. </param>
	<returns>
  The name of the tag.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TagCount(System.Int32)"/>
	<remarks>
  Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
  Thumbnail related TAGs and Gps TAGs 
  </remarks>
	<example>
 Retrieving the name of a certain tag attached to an image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim TagName As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      TagName = oGdPictureImaging.TagGetName(ImageID, 3)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagGetType(System.Int32,System.Int32)">
	<summary>
  Returns the type of a Tag attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to a
                      GdPicture image. </param>
	<returns>
  A member of the TagType enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TagCount(System.Int32)"/>
	<remarks>
  Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
  Thumbnail related TAGs and Gps TAGs 
  </remarks>
	<example>
 Retrieving the type of a certain tag attached to an image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Type As TagType
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      Type = oGdPictureImaging.TagGetType(ImageID, 3)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IPTCGetType(System.Int32,System.Int32)">
	<summary>
  Returns the type of an IPTC Tag attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to a
                      GdPicture image. </param>
	<returns>
  A member of the TagType enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.IPTCCount(System.Int32)"/>
	<example>
 Retrieving the type of an IPTC tag attached to an image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Type As TagType
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      Type = oGdPictureImaging.IPTCGetType(ImageID, 3)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagGetValueString(System.Int32,System.Int32)">
	<summary>
 Returns as string, the value of a Tag attached to a GdPicture image.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to a
                     GdPicture image. </param>
	<returns>
 The value of the tag.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TagCount(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TagSetValueString(System.Int32,GdPicture.Tags,GdPicture.TagType,System.String)"/>
	<remarks>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs
 </remarks>
	<example>
 Retrieving the Value of a tag attached to an image as a String
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim ValueString As String
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     ValueString = oGdPictureImaging.TagGetValueString(ImageID, 3)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IPTCGetValueString(System.Int32,System.Int32)">
	<summary>
  Returns as string, the value of an IPTC Tag attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to a
                      GdPicture image. </param>
	<returns>
  The value of the tag.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.IPTCCount(System.Int32)"/>
	<example>
 Retrieving the Value of an IPTC tag attached to an image
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ValueString As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ValueString = oGdPictureImaging.IPTCGetValueString(ImageID, 3)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagGetValueBytes(System.Int32,System.Int32,System.Byte[]@)">
	<summary>
  Returns as bytes, the value of a Tag attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to a
                      GdPicture image. </param>
	<param name="Data">Output parameter. Array where the tag value data will be stored. </param>
	<returns>
  The number of element (byte) stored into the arTagData array.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TagCount(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TagSetValueBytes(System.Int32,GdPicture.Tags,GdPicture.TagType,System.Byte[])"/>
	<remarks>
  Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
  Thumbnail related TAGs and Gps TAGs 
  </remarks>
	<example>
 Retrieving the Value of a tag attached to an image in bytes
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim Value As Integer
      Dim arTagData(3) As Byte
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      Value = oGdPictureImaging.IPTCGetValueString(ImageID, 3, arTagData)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IPTCGetValueBytes(System.Int32,System.Int32,System.Byte[]@)">
	<summary>
  Returns as bytes, the value of an IPTC Tag attached to a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to a
                      GdPicture image. </param>
	<param name="Data">Output parameter. Array where the tag value data will be stored. </param>
	<returns>
  The number of element (byte) stored into the arTagData array.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.IPTCCount(System.Int32)"/>
	<example>
 Retrieving the Value of an IPTC tag attached to an image in bytes
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim ValueString As String
      Dim arTagData(3) As Byte
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ValueString = oGdPictureImaging.IPTCGetValueString(ImageID, 3, arTagData)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TagSetValueBytes(System.Int32,GdPicture.Tags,GdPicture.TagType,System.Byte[])">
	<summary>
  Writes a tag from data stored within an array of bytes.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagID">A member of the Tags enumeration. </param>
	<param name="TagType">Type of the tag to write. A member of the TagType enumeration.You
                        can check the exif specifications to use the good type of tag.The
                        EXIF specifications can be found at: http://www.exif.org </param>
	<param name="Data">Array where the tag value data are stored. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TagGetValueBytes(System.Int32,System.Int32,System.Byte[]@)"/>
	<remarks>
  Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
  Thumbnail related TAGs and Gps TAGs 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TagSetValueString(System.Int32,GdPicture.Tags,GdPicture.TagType,System.String)">
	<summary>
  Writes a tag from data stored within formatted string.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="TagID">A member of the Tags enumeration. </param>
	<param name="TagType">Type of the tag to write. A member of the TagType enumeration.You
                        can check the exif specifications to use the good type of tag.The
                        EXIF specifications can be found at: http://www.exif.org </param>
	<param name="TagData">The formatted tag value.Notes for BYTE tags:BYTE
                        tags will have this mask: "#,#,...,#".[#] : A component
                        as unsigned 8-bit integer with a value between 0 and 255.[,] :
                        A component delimiter.Notes for SHORT
                        tags:SHORT tags will have this mask: "#,#,...,#".[#]
                        : A component as unsigned 16-bit integer with a value between 0 and 65535.[,]
                        : A component delimiter.Notes for
                        Integer tags:Integer tags will have this mask: "#,#,...,#".[#]
                        : A component as unsigned 32-bit integer with a value between 0 and
                        4294967295.[,] : A component delimiter.Notes
                        for SInteger tags:SInteger tags will have this mask: "#,#,...,#".[#]
                        : A component as signed 32-bit integer with a value between -2147483648 and
                        2147483647.[,] : A component delimiter.Notes
                        for RATIONAL tags:RATIONAL tags will have this mask: "#/#,#/#,...,#/#".[#/#]
                        : A component will consist of two unsigned 32-bit integers denoting the
                        enumerator and denominator. Each integer will have a value between 0 and
                        4294967295.[,] : A component delimiter.Notes
                        for SRATIONAL tags:RATIONAL tags will have this mask: "#/#,#/#,...,#/#".[#/#]
                        : A component will consist of two signed 32-bit integers denoting the
                        enumerator and denominator. Each integer will have a value between -2147483648
                        and 2147483647.[,] : A component delimiter. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TagGetValueString(System.Int32,System.Int32)"/>
	<remarks>
  Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
  Thumbnail related TAGs and Gps TAGs
  </remarks>
	<example>
		<code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      ''' Write SoftwareUsed tag
      oGdPictureImaging.TagSetValueString(ImageID, Tags.TagSoftwareUsed, TagType.TagTypeASCII, "mysoftware Vers. 1.2")
      ''' Write Artist tag
      oGdPictureImaging.TagSetValueString(ImageID, Tags.TagArtist, TagType.TagTypeASCII, "MyCompany GmbH")
  
      ''' Writes X &amp; Y resolution Tags (300 DPI)
      oGdPictureImaging.TagSetValueString(ImageID, Tags.tagXResolution, TagType.TagTypeRational, "300/1")
      oGdPictureImaging.TagSetValueString(ImageID, Tags.tagYResolution, TagType.TagTypeRational, "300/1")
  
  
      oGdPictureImaging.SaveAsTIFF(ImageID, "c:\\test.tif", TiffCompression.TiffCompressionAUTO)
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableBarCodeTypeCount">
	<summary>
  If barcode detection is available, returns the number of bar code types that can be detected.
  </summary>
	<returns>
  If Success, non zero: the number of bar code types that can be detected. Else 0 if fail. Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableBarCodeTypeNo(System.Int32)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableBarCodeTypeNo(System.Int32)">
	<summary>
  Returns a supported bar code type which can be detected by the opened source.
  </summary>
	<param name="Number">Index of the available bar code type. Must be a value between 1 and
                       TwainGetAvailableBarCodeTypeCount() returned value. </param>
	<returns>
  A member of the TwainBarCodeType enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableBarCodeTypeCount"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainBarCodeGetCount">
	<summary>
  If barcode detection is enabled, returns the number of bar codes found on the last acquired image.
  </summary>
	<returns>
  The number of bar codes found on the document image.
  
  A value of 0 means the bar code engine was enabled but that no bar codes were found.
  
  A value of -1 means the bar code engine was not enabled.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)"/>
	<remarks>
  Before using this function make sure that the barcode detection was enabled by the
  TwainSetBarcodeDetection() function.
  
  Use the TwainBarCodeGetCount() function to determine how many barcodes have been detected on the last
  acquired image.
  </remarks>
	<example>
  Acquire single image and detect its barcodes
  <code lang="vb.net">
      Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
          Dim ImageID As Integer
          Dim oGdPictureImaging As New GdPicture.GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
                  oGdPictureImaging.TwainSetBarcodeDetection(True)
                  ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
                  If ImageID &lt;&gt; 0 Then
                      Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
  
                      MsgBox(Str(BarCodeCount) + " barcode have been found in the scanned image")
  
                      For i As Integer = 1 To BarCodeCount
                          MsgBox("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
                          MsgBox("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
                      Next
  
                      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
                  End If
              Else
                  MsgBox("Error: Barcode detection is not available on this scanner")
              End If
  
              oGdPictureImaging.TwainCloseSource()
              MsgBox("Done !")
          Else
              MsgBox("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainBarCodeGetValue(System.Int32)">
	<summary>
  Returns the text of a bar code found on the last acquired image.
  </summary>
	<param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
                          barcodes. </param>
	<returns>
  The barcode text.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainBarCodeGetCount"/>
	<remarks>
  Before using this function make sure that the barcode detection was enabled by the
  TwainSetBarcodeDetection() function.
  
  Use the TwainBarCodeGetCount() function to determine how many barcodes have been detected on the last
  acquired image.
  </remarks>
	<example>
  Acquire single image and detect its barcodes
  <code lang="vb.net">
      Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
          Dim ImageID As Integer
          Dim oGdPictureImaging As New GdPicture.GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
                  oGdPictureImaging.TwainSetBarcodeDetection(True)
                  ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
                  If ImageID &lt;&gt; 0 Then
                      Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
  
                      MsgBox(Str(BarCodeCount) + " barcode have been found in the scanned image")
  
                      For i As Integer = 1 To BarCodeCount
                          MsgBox("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
                          MsgBox("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
                      Next
  
                      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
                  End If
              Else
                  MsgBox("Error: Barcode detection is not available on this scanner")
              End If
  
              oGdPictureImaging.TwainCloseSource()
              MsgBox("Done !")
          Else
              MsgBox("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainBarCodeGetType(System.Int32)">
	<summary>
  Returns the type of a bar code found on the last acquired image.
  </summary>
	<param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
                          barcodes. </param>
	<returns>
  A member of the TwainBarCodeType enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainBarCodeGetCount"/>
	<remarks>
  Before using this function make sure that the barcode detection was enabled by the
  TwainSetBarcodeDetection() function.
  
  Use the TwainBarCodeGetCount() function to determine how many barcodes have been detected on the last
  acquired image.
  </remarks>
	<example>
  Acquire single image and detect its barcodes
  <code lang="vb.net">
      Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
          Dim ImageID As Integer
          Dim oGdPictureImaging As New GdPicture.GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
                  oGdPictureImaging.TwainSetBarcodeDetection(True)
                  ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
                  If ImageID &lt;&gt; 0 Then
                      Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
  
                      MsgBox(Str(BarCodeCount) + " barcode have been found in the scanned image")
  
                      For i As Integer = 1 To BarCodeCount
                          MsgBox("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
                          MsgBox("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
                      Next
  
                      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
                  End If
              Else
                  MsgBox("Error: Barcode detection is not available on this scanner")
              End If
  
              oGdPictureImaging.TwainCloseSource()
              MsgBox("Done !")
          Else
              MsgBox("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainBarCodeGetXPos(System.Int32)">
	<summary>
  Returns the X coordinate of a bar code found on the last acquired image.
  </summary>
	<param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
                          barcodes. </param>
	<returns>
  The barcode X coordinate. Return -1 if current source does not support X coordinate reporting.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainBarCodeGetCount"/>
	<remarks>
  Before using this function make sure that the barcode detection was enabled by the
  TwainSetBarcodeDetection() function.
  
  Use the TwainBarCodeGetCount() function to determine how many barcodes have been detected on the last
  acquired image.
  </remarks>
	<example>
  Acquire single image and detect its barcodes
  <code lang="vb.net">
      Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
          Dim ImageID As Integer
          Dim oGdPictureImaging As New GdPicture.GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
                  oGdPictureImaging.TwainSetBarcodeDetection(True)
                  ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
                  If ImageID &lt;&gt; 0 Then
                      Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
  
                      MsgBox(Str(BarCodeCount) + " barcode have been found in the scanned image")
  
                      For i As Integer = 1 To BarCodeCount
                          MsgBox("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
                          MsgBox("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
                      Next
  
                      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
                  End If
              Else
                  MsgBox("Error: Barcode detection is not available on this scanner")
              End If
  
              oGdPictureImaging.TwainCloseSource()
              MsgBox("Done !")
          Else
              MsgBox("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainBarCodeGetYPos(System.Int32)">
	<summary>
  Returns the Y coordinate of a bar code found on the last acquired image.
  </summary>
	<param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
                          barcodes. </param>
	<returns>
  The barcode Y coordinate. Return -1 if current source does not support Y coordinate reporting.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainBarCodeGetCount"/>
	<remarks>
  Before using this function make sure that the barcode detection was enabled by the
  TwainSetBarcodeDetection() function.
  
  Use the TwainBarCodeGetCount() function to determine how many barcodes have been detected on the last
  acquired image.
  </remarks>
	<example>
  Acquire single image and detect its barcodes
  <code lang="vb.net">
      Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
          Dim ImageID As Integer
          Dim oGdPictureImaging As New GdPicture.GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
                  oGdPictureImaging.TwainSetBarcodeDetection(True)
                  ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
                  If ImageID &lt;&gt; 0 Then
                      Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
  
                      MsgBox(Str(BarCodeCount) + " barcode have been found in the scanned image")
  
                      For i As Integer = 1 To BarCodeCount
                          MsgBox("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
                          MsgBox("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
                      Next
  
                      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
                  End If
              Else
                  MsgBox("Error: Barcode detection is not available on this scanner")
              End If
  
              oGdPictureImaging.TwainCloseSource()
              MsgBox("Done !")
          Else
              MsgBox("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainBarCodeGetConfidence(System.Int32)">
	<summary>
  Returns the degree of certainty of a bar code the engine has in the accuracy of the information
  obtained on the last acquired image.
  </summary>
	<param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
                          barcodes. </param>
	<returns>
  The barcode confidence. From 0 (no confidence) to 100 (supreme confidence). Return -1 if current
  source does not support confidence reporting.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainBarCodeGetCount"/>
	<remarks>
  Before using this function make sure that the barcode detection was enabled by the
  TwainSetBarcodeDetection() function.
  
  Use the TwainBarCodeGetCount() function to determine how many barcodes have been detected on the last
  acquired image.
  </remarks>
	<example>
  Acquire single image and detect its barcodes
  <code lang="vb.net">
      Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
          Dim ImageID As Integer
          Dim oGdPictureImaging As New GdPicture.GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
                  oGdPictureImaging.TwainSetBarcodeDetection(True)
                  ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
                  If ImageID &lt;&gt; 0 Then
                      Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
  
                      MsgBox(Str(BarCodeCount) + " barcode have been found in the scanned image")
  
                      For i As Integer = 1 To BarCodeCount
                          MsgBox("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
                          MsgBox("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
                      Next
  
                      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
                  End If
              Else
                  MsgBox("Error: Barcode detection is not available on this scanner")
              End If
  
              oGdPictureImaging.TwainCloseSource()
              MsgBox("Done !")
          Else
              MsgBox("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainBarCodeGetRotation(System.Int32)">
	<summary>
  Returns the orientation of a bar code found on the last acquired image.
  </summary>
	<param name="BarCodeNo">The barcode number. Must be value between 1 and the number of detected
                          barcodes. </param>
	<returns>
  A member of the TwainBarCodeRotation enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainBarCodeGetCount"/>
	<remarks>
  Before using this function make sure that the barcode detection was enabled by the
  TwainSetBarcodeDetection() function.
  
  Use the TwainBarCodeGetCount() function to determine how many barcodes have been detected on the last
  acquired image.
  </remarks>
	<example>
  Acquire single image and detect its barcodes
  <code lang="vb.net">
      Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
          Dim ImageID As Integer
          Dim oGdPictureImaging As New GdPicture.GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
                  oGdPictureImaging.TwainSetBarcodeDetection(True)
                  ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
                  If ImageID &lt;&gt; 0 Then
                      Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
  
                      MsgBox(Str(BarCodeCount) + " barcode have been found in the scanned image")
  
                      For i As Integer = 1 To BarCodeCount
                          MsgBox("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
                          MsgBox("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
                      Next
  
                      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
                  End If
              Else
                  MsgBox("Error: Barcode detection is not available on this scanner")
              End If
  
              oGdPictureImaging.TwainCloseSource()
              MsgBox("Done !")
          Else
              MsgBox("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainAcquireToGdPictureImage(System.IntPtr)">
	<summary>
  Acquires a single image, from the currently selected Data Source.
  </summary>
	<remarks>
  If success, set the created GdPicture Image as a GdPicture image.
  
  
  
  By default, the default data source (DS) is opened, displays its dialog, and determines all the
  parameters of the acquisition and transfer.
  
  If you want to (try to) hide the DS dialog, see TwainSetHideUI.
  
  
  
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  To set the TWAIN state to 4, use the TwainOpenDefaultSource() or TwainOpenSource() function.
  </remarks>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  0: The image could not created. Use the GetStat(), TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error.
  
  Non-zero: GdPicture Image Identifier. The created image.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainLastXferFail"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainUserClosedSource"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetHideUI(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainOpenDefaultSource(System.IntPtr)"/>
	<example>
  Acquire multiple image from the document feeder to a multipage tiff image
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim bContinue As Boolean = True
  Dim MultipageHandle As Integer
  Dim ImageCount As Integer
  

  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True) 'Enable AutoFeed
  oGdPictureImaging.TwainSetAutoScan(True) 'To  achieve the maximum scanning rate
  oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_BW) '1 bit bw image
  oGdPictureImaging.TwainEnableDuplex(True) 'Duplex acquisition if supported
  oGdPictureImaging.TwainSetHideUI(True) 'Asks to the device to hide his GUI
  
  ImageCount = 0
  Do
      ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
      If ImageID &lt;&gt; 0 Then
          ImageCount = ImageCount + 1
          If ImageCount = 1 Then
              MultipageHandle = ImageID
              oGdPictureImaging.TiffSaveAsMultiPageFile(MultipageHandle, "multipage.tif", TiffCompression.TiffCompressionAUTO)
          Else
              oGdPictureImaging.TiffAddToMultiPageFile(MultipageHandle, ImageID)
              oGdPictureImaging.ReleaseGdPictureImage(ImageID)
          End If
      End If
  Loop While oGdPictureImaging.TwainGetState() \&gt; TwainStatus.TWAIN_SOURCE_ENABLED
  oGdPictureImaging.TiffCloseMultiPageFile(MultipageHandle)
  oGdPictureImaging.ReleaseGdPictureImage(MultipageHandle)
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainAcquireToGdPictureImage(System.Int32)">
	<summary>
  Acquires a single image, from the currently selected Data Source.
  </summary>
	<remarks>
  If success, set the created GdPicture Image as a GdPicture image.
  
  
  
  By default, the default data source (DS) is opened, displays its dialog, and determines all the
  parameters of the acquisition and transfer.
  
  If you want to (try to) hide the DS dialog, see TwainSetHideUI.
  
  
  
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  To set the TWAIN state to 4, use the TwainOpenDefaultSource() or TwainOpenSource() function.
  </remarks>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  0: The image could not created. Use the GetStat(), TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error.
  
  Non-zero: GdPicture Image Identifier. The created image.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainLastXferFail"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainUserClosedSource"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetHideUI(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainOpenDefaultSource(System.IntPtr)"/>
	<example>
  Acquire multiple image from the document feeder to a multipage tiff image
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim bContinue As Boolean = True
  Dim MultipageHandle As Integer
  Dim ImageCount As Integer
  

  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True) 'Enable AutoFeed
  oGdPictureImaging.TwainSetAutoScan(True) 'To  achieve the maximum scanning rate
  oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_BW) '1 bit bw image
  oGdPictureImaging.TwainEnableDuplex(True) 'Duplex acquisition if supported
  oGdPictureImaging.TwainSetHideUI(True) 'Asks to the device to hide his GUI
  
  ImageCount = 0
  Do
      ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
      If ImageID &lt;&gt; 0 Then
          ImageCount = ImageCount + 1
          If ImageCount = 1 Then
              MultipageHandle = ImageID
              oGdPictureImaging.TiffSaveAsMultiPageFile(MultipageHandle, "multipage.tif", TiffCompression.TiffCompressionAUTO)
          Else
              oGdPictureImaging.TiffAddToMultiPageFile(MultipageHandle, ImageID)
              oGdPictureImaging.ReleaseGdPictureImage(ImageID)
          End If
      End If
  Loop While oGdPictureImaging.TwainGetState() \&gt; TwainStatus.TWAIN_SOURCE_ENABLED
  oGdPictureImaging.TiffCloseMultiPageFile(MultipageHandle)
  oGdPictureImaging.ReleaseGdPictureImage(MultipageHandle)
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainAcquireToDib(System.IntPtr)">
	<summary>
  Acquires a single image, from the currently selected Data Source to a DIB handle.
  
  
  </summary>
	<remarks>
  By default, the default data source (DS) is opened, displays its dialog, and determines all the
  parameters of the acquisition and transfer.
  
  If you want to (try to) hide the DS dialog, see TwainSetHideUI.
  
  
  
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  To set the TWAIN state to 4, use the TwainOpenDefaultSource() or TwainOpenSource() function.
  </remarks>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  0: The bitmap could not created. Use the GetStat(), TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error.
  
  Non-zero: DIB handle.
  
  
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.GetStat"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainLastXferFail"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainUserClosedSource"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetHideUI(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainOpenDefaultSource(System.IntPtr)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainAcquireToFile(System.String,System.IntPtr)">
	<summary>
  Acquires a single image, from the currently selected Data Source to a file.
  
  This function uses only the File transfer mode.
  
  The disk file mode is ideal when transferring large images that might encounter memory limitations
  with Native or memory mode.
  
  However, Disk File mode is a bit slower than other transfer mode.
  
  
  
  -\&gt; The output image format should be negotiated with the TwainSetImageFileFormat() function.
  
  -\&gt; The output image compression should be negotiated with the TwainSetCompression() function.
  </summary>
	<remarks>
  By default, the default data source (DS) is opened, displays its dialog, and determines all the
  parameters of the acquisition and transfer.
  
  If you want to (try to) hide the DS dialog, see TwainSetHideUI.
  
  
  
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  To set the TWAIN state to 4, use the TwainOpenDefaultSource() or TwainOpenSource() function.
  
  
  
  Warning: To works, this function requires that the current Data source allows file transfer mode.
  
  Use the TwainIsFileTransferModeAvailable() to check if the source support this mode of transfer.
  </remarks>
	<param name="FilePath">The path of the image file to create. </param>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
                       on Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainLastXferFail"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainUserClosedSource"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetHideUI(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainOpenDefaultSource(System.IntPtr)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImageFileFormat(GdPicture.TwainImageFileFormats)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCompression(GdPicture.TwainCompression)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsFileTransferModeAvailable"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainAcquireToFile(System.String,System.Int32)">
	<summary>
  Acquires a single image, from the currently selected Data Source to a file.
  
  This function uses only the File transfer mode.
  
  The disk file mode is ideal when transferring large images that might encounter memory limitations
  with Native or memory mode.
  
  However, Disk File mode is a bit slower than other transfer mode.
  
  
  
  -\&gt; The output image format should be negotiated with the TwainSetImageFileFormat() function.
  
  -\&gt; The output image compression should be negotiated with the TwainSetCompression() function.
  </summary>
	<remarks>
  By default, the default data source (DS) is opened, displays its dialog, and determines all the
  parameters of the acquisition and transfer.
  
  If you want to (try to) hide the DS dialog, see TwainSetHideUI.
  
  
  
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  To set the TWAIN state to 4, use the TwainOpenDefaultSource() or TwainOpenSource() function.
  
  
  
  Warning: To works, this function requires that the current Data source allows file transfer mode.
  
  Use the TwainIsFileTransferModeAvailable() to check if the source support this mode of transfer.
  </remarks>
	<param name="FilePath">The path of the image file to create. </param>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
                       on Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainLastXferFail"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainUserClosedSource"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetHideUI(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainOpenDefaultSource(System.IntPtr)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImageFileFormat(GdPicture.TwainImageFileFormats)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCompression(GdPicture.TwainCompression)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsFileTransferModeAvailable"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainLogStart(System.String)">
	<summary>
  Starts to log twain operations into file.
  </summary>
	<param name="LogPath">The path of the log file to create / append. </param>
	<returns>
  True if success, else False (can't create or access to the log file).
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainLogStop">
	<summary>
  Stops to log twain operations previously started by the TwainLogStart() function.
  </summary>
</member><member name="M:GdPicture.GdPictureImaging.TwainSaveConfiguration(System.String)">
	<summary>
  Saves to a file the current settings of the opened source, e.g. DPI, paper size, color format.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainLoadConfiguration(System.String)"/>
	<param name="FilePath">The file to save the current device configuration. </param>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<example>
  Open device &amp; save its current configuration to a file
  <code lang="vb.net">
      Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
          Dim oGdPictureImaging As New GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If Not oGdPictureImaging.TwainSaveConfiguration("config1.cdd") = True Then
                  MsgBox("Can't save current configuration. This capability is probably unsupported by the TWAIN device")
              End If
          Else
              MsgBox("Can't open default source")
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainSaveConfiguration(System.Byte[]@)">
	<summary>
  Saves to an array of bytes the current settings of the opened source, e.g. DPI, paper size, color format.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainLoadConfiguration(System.String)"/>
	<param name="Data">The array of bytes save the current device configuration. </param>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<example>
  Open device &amp; save its current configuration to an array of bytes
  <code lang="vb.net">
      Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
          Dim oGdPictureImaging As New GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
               Dim Data() as Byte = Nothing
              If Not oGdPictureImaging.TwainSaveConfiguration(Data) = True Then
                  MsgBox("Can't save current configuration. This capability is probably unsupported by the TWAIN device")
              End If
          Else
              MsgBox("Can't open default source")
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainLoadConfiguration(System.String)">
	<summary>
  Loads from a file, settings of the opened source, e.g. DPI, paper size, color format.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSaveConfiguration(System.String)"/>
	<param name="FilePath">The file containing the current device configuration data. </param>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<example>
  Open device &amp; load previously saved configuration from file
  <code lang="vb.net">
      Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
          Dim oGdPictureImaging As New GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If Not oGdPictureImaging.TwainLoadConfiguration("config1.cdd") = True Then
                  MsgBox("Can't load current configuration. This capability is probably unsupported by the TWAIN device")
              End If
  
              ''' You can start acquisition process here !
          Else
              MsgBox("Can't open default source")
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainLoadConfiguration(System.Byte[])">
	<summary>
  Loads from an array of bytes, settings of the opened source, e.g. DPI, paper size, color format.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSaveConfiguration(System.String)"/>
	<param name="Data">The array of bytes containing the current device configuration data. </param>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<example>
  Open device &amp; load previously saved configuration from file
  <code lang="vb.net">
      Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
          Dim oGdPictureImaging As New GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If Not oGdPictureImaging.TwainLoadConfiguration(Data) = True Then
                  MsgBox("Can't load current configuration. This capability is probably unsupported by the TWAIN device")
              End If
  
              ''' You can start acquisition process here !
          Else
              MsgBox("Can't open default source")
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainCloseSource">
	<summary>
 Closes the open Data Source, if any.
 
 If the source is enabled, disables it first.
 </summary>
	<returns>
 True if success, else False. If there is not an open source, does nothing and returns TRUE.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
 This function should be called only if the TWAIN state is 4 (TWAIN_SOURCE_OPEN) or 5
 (TWAIN_SOURCE_ENABLED).
 
 If success, the TWAIN state must be &lt;= 3 (TWAIN_SM_OPEN).
 
 To get the TWAIN state, use the TwainGetState() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainCloseSourceManager(System.IntPtr)">
	<summary>
 Closes the Data Source Manager.
 
 If a source is open, disables and closes it as needed.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                      Citrix and WTS, this must be a top-level window or a child of a top level
                      window. </param>
	<returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 functions for diagnosing the error.
 
 If the Source Manager is not open, does nothing and returns TRUE.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
 If success, the twain state must be &lt;= 2 (TWAIN_SM_LOADED).
 
 To get the TWAIN state, use the TwainGetState() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainCloseSourceManager(System.Int32)">
	<summary>
 Closes the Data Source Manager.
 
 If a source is open, disables and closes it as needed.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                      Citrix and WTS, this must be a top-level window or a child of a top level
                      window. </param>
	<returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 functions for diagnosing the error.
 
 If the Source Manager is not open, does nothing and returns TRUE.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
 If success, the twain state must be &lt;= 2 (TWAIN_SM_LOADED).
 
 To get the TWAIN state, use the TwainGetState() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetAutoSourceClose(System.Boolean)">
	<summary>
  Tells to the control to close or not the opened source after a scan process.
  </summary>
	<param name="AutoSourceClose">Set True to tell to the control to close the opened source after an
                                scan process, else False. </param>
	<remarks>
  By default, the opened source is closed after a scan process. TwainSetAutoSourceClose(False) to
  change this Behavior.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainDisableSource">
	<summary>
  Disables the open Data Source, if any.
  
  This closes the source's user interface.
  </summary>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  
  If there is not an enabled source, does nothing and returns TRUE.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is 5 (TWAIN_SOURCE_ENABLED).
  
  If success, the twain state must be 4 (TWAIN_SOURCE_OPEN).
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainEnableDuplex(System.Boolean)">
	<summary>
  Asks to the opened source to enable or disable the duplex scanning mode.
  </summary>
	<param name="Duplex">Set True to enable duplex mode else False. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetDuplexMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsDuplexEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN).
  
  To get the back of the acquired image, just another time an acquisition function.
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<example>
		<code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageSide1 As Integer, ImageSide2 As Integer
  

  
  oGdPictureImaging.TwainSelectSource(Me.Handle)
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  If oGdPictureImaging.TwainEnableDuplex(True) Then
     ImageSide1 = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
     oGdPictureImaging.SaveAsTIFF(ImageSide1, "side1.tif", TiffCompression.TiffCompressionAUTO)
     oGdPictureImaging.ReleaseGdPictureImage(ImageSide1)
     ImageSide2 = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
     oGdPictureImaging.SaveAsTIFF(ImageSide2, "side2.tif", TiffCompression.TiffCompressionAUTO)
     oGdPictureImaging.ReleaseGdPictureImage(ImageSide2)
  Else
      MsgBox("Duplex Scanning mode is not supported!")
  End If
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)">
	<summary>
 Ask to the opened source to enable or not imprinter capability.
 </summary>
	<returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 functions for diagnosing the error.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
 Before using this function check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN). To get the
 TWAIN state, use the TwainGetState() function. 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetApplicationInfo(System.Int32,System.Int32,GdPicture.TwainLanguage,GdPicture.TwainCountry,System.String,System.String,System.String,System.String)">
	<summary>
 Asks to the component to register your application into TWAIN.
 </summary>
	<param name="MajorNumVersion">Your application major number version. </param>
	<param name="MinorNumVersion">Your application minor number version. </param>
	<param name="LanguageID">The language ID of your application. </param>
	<param name="CountryID">The country ID of your application. </param>
	<param name="VersionInfo">\Version informations of your application. </param>
	<param name="CompanyName">The company name which provides the application. </param>
	<param name="ProductFamily">The product family name. </param>
	<param name="ProductName">The product name. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
 this function only if Twain state &lt; 3 (TWAIN_SM_OPEN) 
 </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainUserClosedSource">
	<summary>
  Asks if during the last acquisition process the user asked to close the device.
  </summary>
	<returns>
  True if during the last acquisition process the user asked to close the device, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainLastXferFail"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainLastXferFail">
	<summary>
  Asks if the last acquisition process failed.
  </summary>
	<returns>
  True if the last acquisition process failed , else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainUserClosedSource"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainEndAllXfers">
	<summary>
  Signals the Data Source to stop all the transfers.
  </summary>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is 7 (TWAIN_TRANSFERRING) or 6
  (TWAIN_TRANSFER_READY).
  
  If success, the twain state must be 5 (TWAIN_SOURCE_ENABLED).
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainEndXfer">
	<summary>
  Signals the Data Source to stop the current transfer.
  
  Go to either State 6 (TWAIN_TRANSFER_READY) if it has more transfers ready, or to State 5
  (TWAIN_SOURCE_ENABLED) if it does not.
  </summary>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is 7 (TWAIN_TRANSFERRING).
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainStopFeeder">
	<summary>
  If auto scan is turned ON, this command will stop the operation of the scanner’s automatic feeder. No
  other action is taken. The application may then continue to transfer any images that have been
  captured by the scanner.
  </summary>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoScan(System.Boolean)"/>
	<remarks>
  Before using this function check that the TWAIN state is 6 (TWAIN_TRANSFER_READY).
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount">
	<summary>
  Returns the number of available printer mode.
  </summary>
	<returns>
  If Success, non zero: The number of available printer mode. Else 0 if fail. Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)">
	<summary>
  Returns an available printer mode which can be used by the opened source in its current configuration.
  </summary>
	<param name="Number">Index of the available printer mode. Must be a value between 1 and
                       TwainGetAvailableImprinterModeCount() returned value. </param>
	<returns>
  If fail, returns -1 else if success, The selected file format value. A member of the
  TwainPrinterModes enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)">
	<summary>
  Sets the current imprinter mode, if supported.
  Top/Bottom refer to duplex devices, and indicate if the printer is writing on the top or the bottom of the sheet of paper. 
  Simplex devices use the top settings.
  Before/After indicates whether printing occurs before or after the sheet of paper has been scanned.
  </summary>
	<param name="PrinterMode">Printer mode. A member of the TwainPrinterMode enumeration. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetImprinterMode">
	<summary>
  Returns the current imprinter mode, if any.
  Top/Bottom refer to duplex devices, and indicate if the printer is writing on the top or the bottom of the sheet of paper. 
  Simplex devices use the top settings.
  Before/After indicates whether printing occurs before or after the sheet of paper has been scanned.
  </summary>
	<returns>
  A member of the TwainPrinterMode enumeration. If TWPR_UNSUPPORTED is returned, the capability is probably not supported by the current device -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled">
	<summary>
  Ask to the opened source if imprinter capability is currently enabled or not.
  </summary>
	<returns>
  True if imprinter is currently enabled else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable">
	<summary>
  Ask to the opened source if imprinter capability is supported or not.
  </summary>
	<returns>
  True if imprinter is supported else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex">
	<summary>
  Returns the starting page number with the current imprinter mode.
  </summary>
	<returns>
  The starting page number.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)">
	<summary>
  Defines the starting page number with the current imprinter mode.
  </summary>
	<param name="Index">The starting page for the current imprinter mode. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)">
	<summary>
  Specifies the string that shall be used as suffix with the current imprinter mode.
  </summary>
	<param name="Suffix">The suffix to be used.</param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix">
	<summary>
  Returns the string that shall be used as suffix with the current imprinter mode.
  </summary>
	<returns>
  The string to be used as suffix with the current imprinter mode.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)">
	<summary>
  Specifies the string that shall be used for printing with the current imprinter mode.
  </summary>
	<param name="Suffix">The string to be used for printing.</param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterString"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetImprinterString">
	<summary>
  Returns the string that shall be used for printing with the current imprinter mode.
  </summary>
	<returns>
  The string to be used for printing with the current imprinter mode.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableImprinter(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImprinterModeCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsImprinterEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterMode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterMode(GdPicture.TwainPrinterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterString(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterSuffix"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterSuffix(System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImprinterIndex(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImprinterIndex"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN).
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableImageFileFormatCount">
	<summary>
  Returns the number of available file format values which can be used by the opened source in its
  current configuration for file transfer mode.
  </summary>
	<returns>
  If Success, non zero: The number of available file format values. Else 0 if fail. Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImageFileFormatNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableImageFileFormatNo(System.Int32)">
	<summary>
  Returns an available image file format value which can be used by the opened source in its current
  configuration for file transfer mode.
  </summary>
	<param name="Number">Index of the available file format value. Must be a value between 1 and
                       TwainGetAvailableImageFileFormatCount() returned value. </param>
	<returns>
  If fail, returns -1 else if success, The selected file format value. A member of the
  TwainImageFileFormats enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableImageFileFormatCount"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetImageFileFormat(GdPicture.TwainImageFileFormats)">
	<summary>
  Tries to set the current image file format to use by the selected twain source for file transfer
  mode.
  </summary>
	<param name="ImageFileFormat">Image file format. A member of the TwainImageFileFormats enumeration. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImageFileFormat"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetImageFileFormat">
	<summary>
  Returns the current image file format used by the selected twain source for file transfer mode.
  </summary>
	<returns>
  If fail, TWFF_UNSUPPORTED : probably not supported by the current device -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  
  If success, Current file format to use in file transfer mode. A member of the GdPicture enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImageFileFormat(GdPicture.TwainImageFileFormats)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetBitDepthReduction(GdPicture.TwainBitDepthReduction)">
	<summary>
  Tries to specifies the Reduction Method the Source should use to reduce the bit depth of the data.
  </summary>
	<param name="BitDepthReduction">Bit Depth reduction. A member of the TwainBitDepthReduction
                                  enumeration. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetBitDepthReduction"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetBitDepthReduction">
	<summary>
  Returns Reduction Method the Source should use to reduce the bit depth of the data.
  </summary>
	<returns>
  Bit Depth reduction. A member of the TwainBitDepthReduction enumeration. TWBR_UNSUPPORTED If it is
  not supported by the current device (Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.)
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetBitDepthReduction(GdPicture.TwainBitDepthReduction)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetCompression(GdPicture.TwainCompression)">
	<summary>
  Tries to set the current image compression to use by the selected twain source for file transfer
  mode.
  
  Since only certain file formats support compression, this capability must be negotiated after setting
  the desired file format with the TwainSetImageFileFormat() function.
  </summary>
	<param name="Compression">Image compression. A member of the TwainCompression enumeration. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCompression"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImageFileFormat(GdPicture.TwainImageFileFormats)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetCompression">
	<summary>
  Returns the current image compression used by the selected twain source for file transfer mode.
  </summary>
	<returns>
  Current file format to use in file transfer mode. A member of the TwainCompression enumeration.
  TWCP_UNSUPPORTED If it is not supported by the current device (Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error.)
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCompression(GdPicture.TwainCompression)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableCompressionCount">
	<summary>
  Returns the number of available compression values which can be used by the opened source in its
  current configuration for file transfer mode.
  </summary>
	<returns>
  If Success, non zero: The number of available compression values. Else 0 if fail. Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableCompressionNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableCompressionNo(System.Int32)">
	<summary>
  Returns an available compression value which can be used by the opened source in its current
  configuration for file transfer mode.
  </summary>
	<param name="Number">Index of the available file format value. Must be a value between 1 and
                       TwainGetAvailableCompressionCount() returned value. </param>
	<returns>
  If fail, returns -1 else if success, The selected compression value. A member of the TwainCompression
  enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableCompressionCount"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableBrightnessCount">
	<summary>
  Returns the number of available brightness values which can be used by the opened source in its
  current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of available brightness values. Else 0 if fail. Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableBrightnessNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableBrightnessNo(System.Int32)">
	<summary>
  Returns an available brightness value which can be used by the opened source in its current
  configuration.
  </summary>
	<param name="Number">Index of the available brightness value. Must be a value between 1 and
                       TwainGetAvailableBrightnessCount() returned value. </param>
	<returns>
  The selected brightness value. Else 0 if fail.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableBrightnessCount"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableContrastCount">
	<summary>
  Returns the number of available contrast values which can be used by the opened source in its
  current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of available contrast values. Else 0 if fail -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableContrastNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableContrastNo(System.Int32)">
	<summary>
  Returns an available contrast value which can be used by the opened source in its current
  configuration.
  </summary>
	<param name="Number">Index of the available contrast value. Must be a value between 1 and
                       TwainGetAvailableContrastCount() returned value. </param>
	<returns>
  The selected contrast value.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableContrastCount"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableBitDepthCount">
	<summary>
  Returns the number of available bit depths values which can be used by the opened source in its
  current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of available bit depths values. Else 0 if fail -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableBitDepthNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableBitDepthNo(System.Int32)">
	<summary>
  Returns an available bit depth value which can be used by the opened source in its current
  configuration.
  </summary>
	<param name="Number">Index of the available bit depth value. Must be a value between 1 and
                       TwainGetAvailableBitDepthCount() returned value. </param>
	<returns>
  The selected bit depth value.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableBitDepthCount"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailablePixelTypeCount">
	<summary>
  Returns the number of available pixel types values which can be used by the opened source in its
  current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of available pixel types values. Else 0 if fail -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailablePixelTypeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailablePixelTypeNo(System.Int32)">
	<summary>
  Returns an available pixel type value which can be used by the opened source in its current
  configuration.
  </summary>
	<param name="Number">Index of the available pixel type value. Must be a value between 1 and
                       TwainGetAvailablePixelTypeCount() returned value. </param>
	<returns>
  TwainPixelType. The selected pixel type value. A member of the TwainPixelType enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailablePixelTypeCount"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableXResolutionCount">
	<summary>
  Returns the number of available X Resolutions values which can be used by the opened source in its
  current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of available X Resolutions values. Else 0 if fail -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableXResolutionNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableXResolutionNo(System.Int32)">
	<summary>
  Returns an available X Resolution value which can be used by the opened source in its current
  configuration.
  </summary>
	<param name="No">Index of the available X Resolution. Must be a value between 1 and TwainGetAvailableXResolutionCount() returned value. </param>
	<returns>
  The X Resolution.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableXResolutionCount"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableYResolutionCount">
	<summary>
  Returns the number of available Y Resolutions values which can be used by the opened source in its
  current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of available Y Resolutions values. Else 0 if fail -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableYResolutionNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableYResolutionNo(System.Int32)">
	<summary>
  Returns an available Y Resolution value which can be used by the opened source in its current
  configuration.
  </summary>
	<param name="No">Index of the available Y Resolution. Must be a value between 1 and TwainGetAvailableYResolutionCount() returned value. </param>
	<returns>
  The X Resolution.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableYResolutionCount"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture.TwainCapabilities)">
	<summary>
  Returns the number of available values for the selected TWAIN capability which can be used with it
  by the opened source in its current configuration.
  </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<returns>
  If Success, non zero: Number of values available for the selected TWAIN capability. Else 0 if fail -\&gt;
  Use TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValueNoNumeric(GdPicture.TwainCapabilities,System.Int32)">
	<summary>
  Returns an available numeric value for the selected TWAIN capability which can be used by the opened
  source in its current configuration.
  
  This function should be used to determine what are the supported value which can be used with the
  TwainSetCapCurrentNumeric() function.
  </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<param name="Number">Index of the available value. Must be a value between 1 and
                       TwainGetAvailableCapValuesCount() returned value. </param>
	<returns>
  The selected available value of the selected TWAIN capability.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  
  
  This function can be used to set the following types of capabilities: TWTY_INT8 , TWTY_INT16,
  TWTY_INT32, TWTY_UINT8, TWTY_UINT16, TWTY_UINT32, TWTY_BOOL, TWTY_FIX32, TWTY_FRAME.
  
  You can determine the type of each TWAIN capability using the TwainGetCapItemType function or looking
  the twain references from http://www.twain.org
  </remarks>
	<example>
  List all supported X resolution of the default source
  <code lang="vb.net">
  Dim i As Integer
  Dim AvailableCapValue As Double
  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  For i = 1 To oGdPictureImaging.TwainGetAvailableCapValuesCount(TwainCapabilities.ICAP_XRESOLUTION)
      AvailableCapValue = oGdPictureImaging.TwainGetAvailableCapValueNoNumeric(TwainCapabilities.ICAP_XRESOLUTION, i)
      MsgBox("Supported value no: " + Str(i) + " is: " + Str(AvailableCapValue))
  Next i
  
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValueNoString(GdPicture.TwainCapabilities,System.Int32)">
	<summary>
  Returns an available string value for the selected TWAIN capability which can be used by the opened
  source in its current configuration.
  
  This function should be used to determine what are the supported value which can be used with the
  TwainSetCapCurrentString() function.
  </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<param name="Number">Index of the available value. Must be a value between 1 and
                       TwainGetAvailableCapValuesCount() returned value. </param>
	<returns>
  The selected available value of the selected TWAIN capability.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCapCurrentString(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  
  
  This function can be used to set the following types of capabilities: TWTY_STR32, TWTY_STR64,
  TWTY_STR128, TWTY_STR255 .
  
  You can determine the type of each TWAIN capability using the TwainGetCapItemType function or looking
  the twain references from http://www.twain.org
  </remarks>
	<example>
  list names of the halftone patterns supported by the default source
  <code lang="vb.net">
  Dim i As Integer
  Dim AvailableCapValue As Double
  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  For i = 1 To oGdPictureImaging.TwainGetAvailableCapValuesCount(TwainCapabilities.ICAP_HALFTONES)
      AvailableCapValue = oGdPictureImaging.TwainGetAvailableCapValueNoString(TwainCapabilities.ICAP_HALFTONES, i)
      MsgBox("Supported value no: " + Str(i) + " is: " + Str(AvailableCapValue))
  Next i
  
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetCapQuerySupport(GdPicture.TwainCapabilities,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
	<summary>
  Returns the Source’s support status of a specific TWAIN capability.
  </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration.</param>
	<param name="SupportGet">Returns if the source supports Get query with the specified capability.See TwainGetCapCurrentNumeric() and TwainGetCapCurrentString()</param>
	<param name="SupportSet">Returns if the source supports Set query with the specified capability. See TwainSetCapCurrentNumeric() and TwainSetCapCurrentString()</param>
	<param name="SupportGetDefault">Returns if the source supports GetDefault query with the specified capability.  See TwainGetCapDefaultNumeric() and TwainGetCapDefaultString()</param>
	<param name="SupportGetCurrent">Returns if the source supports GetCurrent query with the specified capability. See TwainGetCapCurrentNumeric() and TwainGetCapCurrentString()</param>
	<param name="SupportReset">Returns if the source supports Reset query with the specified capability. See: TwainResetCap()</param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetCapCurrentNumeric(GdPicture.TwainCapabilities,System.Double@)">
	<summary>
 Returns as numeric, the current value of a TWAIN capability.
 </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<param name="CurrentValue">Returns the current value of the specified TWAIN capability. </param>
	<returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 functions for diagnosing the error.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
 Before using this function check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 
 To get the TWAIN state, use the TwainGetState() function.
 
 
 
 This function can be used to retrieve the following types of capabilities: TWTY_INT8 , TWTY_INT16,
 TWTY_INT32, TWTY_UINT8, TWTY_UINT16, TWTY_UINT32, TWTY_BOOL, TWTY_FIX32, TWTY_FRAME.
 
 You can determine the type of each TWAIN capability using the TwainGetCapItemType function or looking
 the twain references from http://www.twain.org
 </remarks>
	<example>
 Catch the acquisition bit depth used by the default source
 <code lang="vb.net">
 Dim CurrentCapValue As Double
 
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainGetCapCurrentNumeric(TwainCapabilities.ICAP_BITDEPTH, CurrentCapValue)
 MsgBox "The current bit depth is: " + str(CurrentCapValue)
 oGdPictureImaging.TwainCloseSource()
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetCapDefaultNumeric(GdPicture.TwainCapabilities,System.Double@)">
	<summary>
 Returns as numeric, the default value of a TWAIN capability.
 </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<param name="CurrentValue">Returns the default value of the specified TWAIN capability. </param>
	<returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 functions for diagnosing the error.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
 Before using this function check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 
 To get the TWAIN state, use the TwainGetState() function.
 
 
 
 This function can be used to retrieve the following types of capabilities: TWTY_INT8 , TWTY_INT16,
 TWTY_INT32, TWTY_UINT8, TWTY_UINT16, TWTY_UINT32, TWTY_BOOL, TWTY_FIX32, TWTY_FRAME.
 
 You can determine the type of each TWAIN capability using the TwainGetCapItemType function or looking
 the twain references from http://www.twain.org
 </remarks>
	<example>
 Gets the default the acquisition bit depth used by the default source
 <code lang="vb.net">
 Dim DefaultCapValue As Double
 
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 oGdPictureImaging.TwainGetCapDefaultNumeric(TwainCapabilities.ICAP_BITDEPTH, DefaultCapValue)
 MsgBox "The default bit depth is: " + str(DefaultCapValue)
 oGdPictureImaging.TwainCloseSource()
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetCapRangeNumeric(GdPicture.TwainCapabilities,System.Double@,System.Double@,System.Double@)">
	<summary>
  Returns the three parameters that define a Range for a TWAIN capability. Many capabilities allow
  users to select their current value from a range of regularly spaced values. The capability can
  specify the minimum and maximum acceptable values and the incremental step size between values. For
  example, resolution might be supported from 100 to 600 in steps of 50 (100, 150, 200, ..., 550,
  600).
  </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<param name="nMinValue">Output parameter. Starting value in the range. </param>
	<param name="nMaxValue">Output parameter. Final value in the range. </param>
	<param name="nStepValue">Output parameter. Increment from nMinValue to nMaxValue. </param>
	<returns>
  True if success, else False -\&gt; use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  
  
  This function can be used to set the following types of capabilities: TWTY_INT8 , TWTY_INT16,
  TWTY_INT32, TWTY_UINT8, TWTY_UINT16, TWTY_UINT32, TWTY_BOOL, TWTY_FIX32, TWTY_FRAME.
  
  You can determine the type of each TWAIN capability using the TwainGetCapItemType function or looking
  the twain references from http://www.twain.org
  </remarks>
	<example>
  Gets supported Brightness values
  <code lang="vb.net">
  Dim bSuccess As Boolean
  Dim MinValue As Double, MaxValue As Double, StepValue As Double
  Dim i As Integer
  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  bSuccess = oGdPictureImaging.TwainGetCapRangeNumeric(TwainCapabilities.ICAP_BRIGHTNESS, MinValue, MaxValue, StepValue)
  If bSuccess Then
      For i = CInt(MinValue) To CInt(MaxValue) Step CInt(StepValue)
  'Here, you can catch &amp; store the i value somewhere
  MsgBox("A supported value is: " + Str(i))
      Next i
  End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetCapCurrentString(GdPicture.TwainCapabilities,System.String@)">
	<summary>
 Returns as string, the current value of a TWAIN capability.
 </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<param name="CurrentValue">Returns the current value of the specified TWAIN capability. </param>
	<returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 functions for diagnosing the error.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCapCurrentString(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
 Before using this function check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 
 To get the TWAIN state, use the TwainGetState() function.
 
 
 
 This function can be used to retrieve the following types of capabilities: TWTY_STR32, TWTY_STR64,
 TWTY_STR128, TWTY_STR255 .
 
 You can determine the type of each TWAIN capability using the TwainGetCapItemType function or looking
 the twain references from http://www.twain.org
 </remarks>
	<example>
 Gets the current halftone pattern used by the default source
 <code lang="vb.net">
 Dim CurrentCapValue As String=""
 
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 
 oGdPictureImaging.TwainGetCapCurrentString(TwainCapabilities.ICAP_HALFTONES, CurrentCapValue)
 MsgBox "The current halftone pattern used: " + CurrentCapValue
 
 oGdPictureImaging.TwainCloseSource()
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetCapDefaultString(GdPicture.TwainCapabilities,System.String@)">
	<summary>
 Returns as string, the default value of a TWAIN capability.
 </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<param name="CurrentValue">Returns the default value of the specified TWAIN capability. </param>
	<returns>
 True if success, else False -&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
 functions for diagnosing the error.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCapCurrentString(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.String)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
 Before using this function check that the TWAIN state is &gt;= 4 (TWAIN_SOURCE_OPEN)
 
 To get the TWAIN state, use the TwainGetState() function.
 
 
 
 This function can be used to retrieve the following types of capabilities: TWTY_STR32, TWTY_STR64,
 TWTY_STR128, TWTY_STR255 .
 
 You can determine the type of each TWAIN capability using the TwainGetCapItemType function or looking
 the twain references from http://www.twain.org
 </remarks>
	<example>
 Gets the default halftone pattern used by the default source
 <code lang="vb.net">
 Dim DefaultCapValue As String=""
 
 oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
 
 oGdPictureImaging.TwainGetCapDefaultString(TwainCapabilities.ICAP_HALFTONES, DefaultCapValue)
 MsgBox "The default halftone pattern used: " + DefaultCapValue
 
 oGdPictureImaging.TwainCloseSource()
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainHasFeeder">
	<summary>
  Asks to the opened source if it has a document feeder.
  </summary>
	<returns>
  True if the source indicates it has a document feeder else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  This function can returns FALSE with HP scanners with ADF. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainHasFlatBed">
	<summary>
  Asks to the opened source if it has a flatbed.
  </summary>
	<returns>
  True if the source indicates it has a flatbed else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsFeederSelected">
	<summary>
  Asks to the opened source if the document feeder is selected.
  </summary>
	<returns>
  True if the document feeder is selected, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsDeviceOnline">
	<summary>
  Returns the online statue of the current data source.
  If TRUE, the physical hardware (e.g., scanner, digital camera, image database, etc.) that
  represents the image source is attached, powered on, and communicating. 
  </summary>
	<returns>
  True if the current data source is powered on and communicating, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  This method can be issued at any time to determine the availability of the image source
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSelectFeeder(System.Boolean)">
	<summary>
  Asks to the opened source to select or deselect the document feeder.
  </summary>
	<param name="SelectFeeder">If TRUE, Source must acquire data from the document feeder acquire area.If
                             FALSE, Source must acquire data from the non-feeder acquire area like
                             flatbed area. </param>
	<returns>
  True if success, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsFeederSelected"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsFeederLoaded">
	<summary>
  Asks to the opened source if there are documents in the feeder.
  </summary>
	<returns>
  True if there are documents, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSelectFeeder(System.Boolean)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  The document feeder must be selected to use this function. To enable the document feeder you need to
  TwainSelectFeeder(True). 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.Double)">
	<summary>
  Changes the current value of a TWAIN capability from a numeric value.
  
  The TwainGetAvailableCapValueNoNumeric() function should be used to determine what are the supported
  value which can be used with this function.
  </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<param name="ItemType">A member of the TwainItemTypes enumeration.You can determine the
                         type of each TWAIN capability using the TwainGetCapItemType function or
                         looking the twain references from http://www.twain.org </param>
	<param name="NewValue">New value (as numeric) to set to the selected TWAIN capability. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValueNoNumeric(GdPicture.TwainCapabilities,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapCurrentNumeric(GdPicture.TwainCapabilities,System.Double@)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  
  </remarks>
	<example>
  To set the X resolution to 100 DPI
  <code lang="vb.net">
                bSuccess = oGdPictureImaging.TwainSetCapCurrentNumeric(TwainCapabilities.ICAP_XRESOLUTION, oGdPictureImaging.TwainGetCapItemType(TwainCapabilities.ICAP_XRESOLUTION), 100)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetCapCurrentString(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.String)">
	<summary>
  Changes the current value of a TWAIN capability.
  </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<param name="ItemType">A member of the TwainItemTypes enumeration.You can determine the
                         type of each TWAIN capability using the TwainGetCapItemType function or
                         looking the twain references from http://www.twain.org </param>
	<param name="NewValue">New value to set to the selected TWAIN capability. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValueNoString(GdPicture.TwainCapabilities,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapCurrentString(GdPicture.TwainCapabilities,System.String@)"/>
	<example>
  To set the ORDERED halftone mode
  <code lang="vb.net">
  bSuccess = oGdPictureImaging.TwainSetCapCurrentString(TwainCapabilities.ICAP_HALFTONES, oGdPictureImaging.TwainGetCapItemType(TwainCapabilities.ICAP_HALFTONES), "ORDERED")
  </code>
	</example>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  
  
  This function can be used to set the following types of capabilities: TWTY_STR32, TWTY_STR64,
  TWTY_STR128, TWTY_STR255. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainResetCap(GdPicture.TwainCapabilities)">
	<summary>
  Sets the current TWAIN capability value to default value.
  </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValuesCount(GdPicture.TwainCapabilities)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailableCapValueNoNumeric(GdPicture.TwainCapabilities,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetCapCurrentNumeric(GdPicture.TwainCapabilities,System.Double@)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetCapItemType(GdPicture.TwainCapabilities)">
	<summary>
  Returns the Item type used by a TWAIN capability.
  </summary>
	<param name="Cap">A member of the TwainCapabilities enumeration. </param>
	<returns>
  A member of the Tags enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetCapCurrentNumeric(GdPicture.TwainCapabilities,GdPicture.TwainItemTypes,System.Double)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetBitDepth">
	<summary>
  Returns the pixel bit depths for the Current value of PixelType. For example, when using
  TwainSetPixelType(TWPT_GRAY), this capability specifies whether this is 8-bit gray or 4-bit gray.
  </summary>
	<returns>
  If success: bit depth value. Else 0 if fail -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Only available with 1bpp image (PixelType == TWPT_BW)
  
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetThreshold">
	<summary>
  Returns the dividing line between black and white. This is the value the Source will use to
  threshold, if needed, when scanning B&amp;W image.
  </summary>
	<returns>
  Current threshold value between 0 and 255. -1 If it is not supported by the current device (Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.)
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetThreshold(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetThreshold(System.Int32)">
	<summary>
  Try to specify the dividing line between black and white. This is the value the Source will use to
  threshold, if needed, when scanning B&amp;W image.
  </summary>
	<param name="Threshold">Threshold value between 0 and 255. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetThreshold"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainHasCameraPreviewUI">
	<summary>
  Queries the current device for UI support for preview mode.
  </summary>
	<returns>
  True if the Source supports preview UI else False: Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetPlanarChunky">
	<summary>
  Returns the color data formats There are two Options, "planar" And "chunky."
  </summary>
	<returns>
  0 for Chunky or 1 for planar. -1 If it is not supported by the current device -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetPlanarChunky(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetPlanarChunky(System.Int32)">
	<summary>
  Try to specify the color data formats There are two Options, "planar" And "chunky".
  </summary>
	<param name="PlanarChunky">0 for Chunky or 1 for Planar. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetPlanarChunky"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetPixelFlavor">
	<summary>
  Returns the pixel 'flavor' (0 is black or white).
  
  CHOCOLATE means this pixel represents the darkest data value that can be generated by the device (the
  darkest available optical value may measure greater than 0).
  
  VANILLA means this pixel represents the lightest data value that can be generated by the device (the
  lightest available optical value may measure greater than 0).
  </summary>
	<returns>
  A member of the TwainPixelFlavor enumeration. returns TwainPixelFlavorUndefined (-1) if it is not
  supported by the current device -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetPixelFlavor(GdPicture.TwainPixelFlavor)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetPixelFlavor(GdPicture.TwainPixelFlavor)">
	<summary>
  Try to specify the pixel 'flavor' (0 is black or white).
  
  CHOCOLATE means this pixel represents the darkest data value that can be generated by the device (the
  darkest available optical value may measure greater than 0).
  
  VANILLA means this pixel represents the lightest data value that can be generated by the device (the
  lightest available optical value may measure greater than 0).
  </summary>
	<param name="PixelFlavor">A member of the TwainPixelFlavor enumeraion. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetPixelFlavor"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetBrightness">
	<summary>
  Returns the current brightness.
  </summary>
	<returns>
  If success: The TWAIN standard *says* that the range for this cap is -1000 ... +1000. If fail,
  Returns -99999 -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode() functions for
  diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetContrast">
	<summary>
  Returns the current contrast.
  </summary>
	<returns>
  If Success: The TWAIN standard *says* that the range for this cap is -1000 ... +1000. If fail,
  Returns -99999 -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode() functions for
  diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetPixelType">
	<summary>
  Asks the source for the current pixel type.
  </summary>
	<returns>
  TwainPixelType. A member of the TwainPixelType enumeration. -1 If fail -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsPixelTypeAvailable(GdPicture.TwainPixelType)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetPixelType(GdPicture.TwainPixelType)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetResolution">
	<summary>
  Returns the current resolution in Dot per inch of the selected scanner.
  </summary>
	<returns>
  If success, non-zero value. If fail, -1 -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetCurrentSourceName(System.IntPtr)">
	<summary>
  Returns the name of the opened source.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  The current source name.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetCurrentSourceName(System.Int32)">
	<summary>
  Returns the name of the opened source.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  The current source name.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetDefaultSourceName(System.IntPtr)">
	<summary>
  Returns the name of the default TWAIN source into the dialog of source selection.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. Returns the name of the default source: the source selected in the
                       Select Source dialog. </param>
	<returns>
  The default source name.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetDefaultSourceName(System.Int32)">
	<summary>
  Returns the name of the default TWAIN source into the dialog of source selection.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. Returns the name of the default source: the source selected in the
                       Select Source dialog. </param>
	<returns>
  The default source name.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetDuplexMode">
	<summary>
  Returns the duplex scanning support.
  </summary>
	<returns>
  Can be:
  
  0 = no support (or error) -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode() functions
  for diagnosing the error.
  
  1 = 1-pass duplex
  
  2 = 2-pass duplex
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableDuplex(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsDuplexEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetHideUI">
	<summary>
  Asks if the user interface should be hidden or not during an acquisition process.
  </summary>
	<returns>
  True if the user interface is hidden, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetHideUI(System.Boolean)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetModalUI">
	<summary>
  Asks if the TWAIN Source's GUI runs as modal or modeless.
  </summary>
	<returns>
  True if the TWAIN Source's GUI runs as modal else False (modless).
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetModalUI(System.Boolean)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode">
	<summary>
  Returns the last condition code from the last message sent to TWAIN.
  </summary>
	<returns>
  A member of the TwainConditionCode enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetLastResultCode">
	<summary>
  Returns the last result code from the last message sent to TWAIN.
  </summary>
	<returns>
  A member of the TwainResultCode enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  If the result is not TWRC_SUCCESS, you can use the TwainGetLastConditionCode() function to check the
  reason on this result.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetPaperSize">
	<summary>
  Gets the current paper size.
  </summary>
	<returns>
  A member of the TwainPaperSize enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetPaperSize(GdPicture.TwainPaperSize)"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  NONE (0) indicates that the maximum image size supported by the device is to be used.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetPendingXfersCount">
	<summary>
  Gets the the number of pending transfers from the current TWAIN device.
  </summary>
	<returns>
  The number of pending transfers from the TWAIN device.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailablePaperSizeCount">
	<summary>
  Returns the number of available paper size values which can be used by the opened source.
  </summary>
	<returns>
  If Success, non zero: The number of available paper size values. Else 0 if fail -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailablePaperSizeNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastConditionCode"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetLastResultCode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetAvailablePaperSizeNo(System.Int32)">
	<summary>
  Returns an available paper size value which can be used by the opened source.
  </summary>
	<param name="Number">Index of the available paper size value. Must be a value between 1 and
                       TwainGetAvailablePaperSizeCount() returned value. </param>
	<returns>
  A member of the TwainPaperSize enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetAvailablePaperSizeCount"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetPhysicalHeight">
	<summary>
  Returns the maximum height of the scanning area (in inches).
  </summary>
	<returns>
  Double.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetPhysicalWidth">
	<summary>
  Returns the maximum width of the scanning area (in inches).
  </summary>
	<returns>
  Double.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetSourceCount(System.IntPtr)">
	<summary>
  Returns the number of sources available.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  Number of sources available.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetSourceName(System.IntPtr,System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetSourceCount(System.Int32)">
	<summary>
  Returns the number of sources available.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  Number of sources available.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetSourceName(System.IntPtr,System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetSourceName(System.IntPtr,System.Int32)">
	<summary>
 Returns the name of an available TWAIN source.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
                      on Citrix and WTS, this must be a top-level window or a child of a top level
                      window. </param>
	<param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
                        return. If the value provided in not in the expected range a TwainError
                        status is returned by a subsequent call of the GetStat() function.</param>
	<returns>
 The name of the source.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetSourceCount(System.IntPtr)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetSourceName(System.Int32,System.Int32)">
	<summary>
 Returns the name of an available TWAIN source.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
                      on Citrix and WTS, this must be a top-level window or a child of a top level
                      window. </param>
	<param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
                        return. If the value provided in not in the expected range a TwainError
                        status is returned by a subsequent call of the GetStat() function. </param>
	<returns>
 The name of the source.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetSourceCount(System.IntPtr)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetSourceFamily(System.IntPtr,System.Int32)">
	<summary>
 Returns the family name of an available TWAIN source.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
                      on Citrix and WTS, this must be a top-level window or a child of a top level
                      window. </param>
	<param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
                        return. If the value provided in not in the expected range a TwainError
                        status is returned by a subsequent call of the GetStat() function. </param>
	<returns>
 The name of the source.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetSourceCount(System.IntPtr)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetSourceFamily(System.Int32,System.Int32)">
	<summary>
 Returns the family name of an available TWAIN source.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
                      on Citrix and WTS, this must be a top-level window or a child of a top level
                      window. </param>
	<param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
                        return. If the value provided in not in the expected range a TwainError
                        status is returned by a subsequent call of the GetStat() function. </param>
	<returns>
 The name of the source.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetSourceCount(System.IntPtr)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetSourceManufacturer(System.IntPtr,System.Int32)">
	<summary>
 Returns the manufacturer of an available TWAIN source.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
                      on Citrix and WTS, this must be a top-level window or a child of a top level
                      window. </param>
	<param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
                        return. If the value provided in not in the expected range a TwainError
                        status is returned by a subsequent call of the GetStat() function. </param>
	<returns>
 The name of the source.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetSourceCount(System.IntPtr)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetSourceManufacturer(System.Int32,System.Int32)">
	<summary>
 Returns the manufacturer of an available TWAIN source.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
                      on Citrix and WTS, this must be a top-level window or a child of a top level
                      window. </param>
	<param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
                        return. If the value provided in not in the expected range a TwainError
                        status is returned by a subsequent call of the GetStat() function. </param>
	<returns>
 The name of the source.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetSourceCount(System.IntPtr)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetSourceVersionInfo(System.IntPtr,System.Int32,System.Int32@,System.Int32@,GdPicture.TwainLanguage@,GdPicture.TwainCountry@,System.String@)">
	<summary>
 Returns the version information of an available TWAIN source.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
                      on Citrix and WTS, this must be a top-level window or a child of a top level
                      window. </param>
	<param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
                        return. If the value provided in not in the expected range a TwainError
                        status is returned by a subsequent call of the GetStat() function.</param>
	<param name="MajorNum">Returns Major revision number of the software.</param>
	<param name="MinorNum">Incremental revision number of the software.</param>
	<param name="Language">Returns the language of the driver. A member of the TwainLanguage
                        enumeration.</param>
	<param name="Country">Returns the origin country of the diver. A member of the TwainCountry
                       enumeration.</param>
	<param name="Info">Returns the driver info. IE: "1.0b3 Beta release".</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetSourceCount(System.IntPtr)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetSourceVersionInfo(System.Int32,System.Int32,System.Int32@,System.Int32@,GdPicture.TwainLanguage@,GdPicture.TwainCountry@,System.String@)">
	<summary>
 Returns the version information of an available TWAIN source.
 </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but
                      on Citrix and WTS, this must be a top-level window or a child of a top level
                      window. </param>
	<param name="SourceNo">The number of the source. Must be value between 1 and TwainGetSourceCount()
                        return. If the value provided in not in the expected range a TwainError
                        status is returned by a subsequent call of the GetStat() function.</param>
	<param name="MajorNum">Returns Major revision number of the software.</param>
	<param name="MinorNum">Incremental revision number of the software.</param>
	<param name="Language">Returns the language of the driver. A member of the TwainLanguage
                        enumeration.</param>
	<param name="Country">Returns the origin country of the diver. A member of the TwainCountry
                       enumeration.</param>
	<param name="Info">Returns the driver info. IE: "1.0b3 Beta release".</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetSourceCount(System.IntPtr)"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetState">
	<summary>
  Returns the last Twain status.
  </summary>
	<returns>
  A member of the TwainStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAvailable">
	<summary>
  This function find out if TWAIN is installed on the system.
  
  It takes a little time on the first call.
  </summary>
	<returns>
  True if twain is available else False
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsDuplexEnabled">
	<summary>
  Ask to the opened source if duplex scanning is currently enabled or not.
  </summary>
	<returns>
  True if duplex is currently enabled else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainEnableDuplex(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetDuplexMode"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsFileTransferModeAvailable">
	<summary>
  Asks to the opened source if the current data source supports file transfer mode.
  </summary>
	<returns>
  True if the current data source supports file transfer, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainAcquireToFile(System.String,System.IntPtr)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsPixelTypeAvailable(GdPicture.TwainPixelType)">
	<summary>
  Ask to the opened source if the device supports a kind of pixel type.
  </summary>
	<param name="PixelType">A member of the TwainPixelType enumeration. </param>
	<returns>
  True if the (PixelType) pixel type is available else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetPixelType(GdPicture.TwainPixelType)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetPixelType"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainOpenDefaultSource(System.IntPtr)">
	<summary>
  This opens the source selected in the Select Source dialog.
  
  If some source is already open, does nothing and returns TRUE.
  
  Call this function for each scanning process or to set the TWAIN state to 4 (TWAIN_SOURCE_OPEN) when
  the TWAIN state is 3 (TWAIN_SM_OPEN) or 2 (TWAIN_SM_LOADED) or 1 (TWAIN_PRESESSION).
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetDefaultSourceName(System.IntPtr)"/>
	<remarks>
  If this returns TRUE, TWAIN is in STATE 4 (TWAIN_SOURCE_OPEN).
  </remarks>
	<example>
  Acquire multiple image from the document feeder to a multipage tiff image
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim bContinue As Boolean = True
  Dim MultipageHandle As Integer
  Dim ImageCount As Integer
  

  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True) 'Enable AutoFeed
  oGdPictureImaging.TwainSetAutoScan(True) 'To  achieve the maximum scanning rate
  oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_BW) '1 bit bw image
  oGdPictureImaging.TwainEnableDuplex(True) 'Duplex acquisition if supported
  oGdPictureImaging.TwainSetHideUI(True) 'Asks to the device to hide his GUI
  
  ImageCount = 0
  Do
      ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
      If ImageID &lt;&gt; 0 Then
          ImageCount = ImageCount + 1
          If ImageCount = 1 Then
              MultipageHandle = ImageID
              oGdPictureImaging.TiffSaveAsMultiPageFile(MultipageHandle, "multipage.tif", TiffCompression.TiffCompressionAUTO)
          Else
              oGdPictureImaging.TiffAddToMultiPageFile(MultipageHandle, ImageID)
              oGdPictureImaging.ReleaseGdPictureImage(ImageID)
          End If
      End If
  Loop While oGdPictureImaging.TwainGetState() \&gt; TwainStatus.TWAIN_SOURCE_ENABLED
  oGdPictureImaging.TiffCloseMultiPageFile(MultipageHandle)
  oGdPictureImaging.ReleaseGdPictureImage(MultipageHandle)
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainOpenDefaultSource(System.Int32)">
	<summary>
  This opens the source selected in the Select Source dialog.
  
  If some source is already open, does nothing and returns TRUE.
  
  Call this function for each scanning process or to set the TWAIN state to 4 (TWAIN_SOURCE_OPEN) when
  the TWAIN state is 3 (TWAIN_SM_OPEN) or 2 (TWAIN_SM_LOADED) or 1 (TWAIN_PRESESSION).
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetDefaultSourceName(System.IntPtr)"/>
	<remarks>
  If this returns TRUE, TWAIN is in STATE 4 (TWAIN_SOURCE_OPEN).
  </remarks>
	<example>
  Acquire multiple image from the document feeder to a multipage tiff image
  <code lang="vb.net">
  Dim oGdPictureImaging As New GdPictureImaging
  Dim ImageID As Integer
  Dim bContinue As Boolean = True
  Dim MultipageHandle As Integer
  Dim ImageCount As Integer
  

  
  oGdPictureImaging.TwainOpenDefaultSource(Me.Handle)
  oGdPictureImaging.TwainSetAutoFeed(True) 'Enable AutoFeed
  oGdPictureImaging.TwainSetAutoScan(True) 'To  achieve the maximum scanning rate
  oGdPictureImaging.TwainSetPixelType(TwainPixelType.TWPT_BW) '1 bit bw image
  oGdPictureImaging.TwainEnableDuplex(True) 'Duplex acquisition if supported
  oGdPictureImaging.TwainSetHideUI(True) 'Asks to the device to hide his GUI
  
  ImageCount = 0
  Do
      ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
      If ImageID &lt;&gt; 0 Then
          ImageCount = ImageCount + 1
          If ImageCount = 1 Then
              MultipageHandle = ImageID
              oGdPictureImaging.TiffSaveAsMultiPageFile(MultipageHandle, "multipage.tif", TiffCompression.TiffCompressionAUTO)
          Else
              oGdPictureImaging.TiffAddToMultiPageFile(MultipageHandle, ImageID)
              oGdPictureImaging.ReleaseGdPictureImage(ImageID)
          End If
      End If
  Loop While oGdPictureImaging.TwainGetState() \&gt; TwainStatus.TWAIN_SOURCE_ENABLED
  oGdPictureImaging.TiffCloseMultiPageFile(MultipageHandle)
  oGdPictureImaging.ReleaseGdPictureImage(MultipageHandle)
  oGdPictureImaging.TwainCloseSource()
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainOpenSource(System.IntPtr,System.String)">
	<summary>
  Opens the source with the given name.
  
  If another source is open, closes it and attempts to open the specified source.
  
  First this function for each scanning process or to set the TWAIN state to 4 (TWAIN_SOURCE_OPEN) when
  the TWAIN state is 3 (TWAIN_SM_OPEN) or 2 (TWAIN_SM_LOADED) or 1 (TWAIN_PRESESSION).
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing
                       but on Citrix and WTS, this must be a top-level window or a child of a top
                       level window. </param>
	<param name="SourceName">The name of the source to open. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetDefaultSourceName(System.IntPtr)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetDSMPath(System.String)"/>
	<remarks>
  If this returns TRUE, TWAIN is in STATE 4 (TWAIN_SOURCE_OPEN).
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainOpenSource(System.Int32,System.String)">
	<summary>
  Opens the source with the given name.
  
  If another source is open, closes it and attempts to open the specified source.
  
  First this function for each scanning process or to set the TWAIN state to 4 (TWAIN_SOURCE_OPEN) when
  the TWAIN state is 3 (TWAIN_SM_OPEN) or 2 (TWAIN_SM_LOADED) or 1 (TWAIN_PRESESSION).
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing
                       but on Citrix and WTS, this must be a top-level window or a child of a top
                       level window. </param>
	<param name="SourceName">The name of the source to open. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetDefaultSourceName(System.IntPtr)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetDSMPath(System.String)"/>
	<remarks>
  If this returns TRUE, TWAIN is in STATE 4 (TWAIN_SOURCE_OPEN).
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainResetImageLayout">
	<summary>
  Asks to the opened device to reset the area to scan, sometimes called the ROI (Region of Interest).
  </summary>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImageLayout(System.Double,System.Double,System.Double,System.Double)"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSelectSource(System.IntPtr)">
	<summary>
  Select twain device for capture. This function posts the Source Manager's Select Source dialog box.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  True if success, else False.
  
  False indicates:
  
  1- The user canceled the dialog.
  
  2- The Source Manager found no data sources installed.
  
  3- There was a failure before the Select Source dialog could be posted. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSelectSource(System.Int32)">
	<summary>
  Select twain device for capture. This function posts the Source Manager's Select Source dialog box.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  True if success, else False.
  
  False indicates:
  
  1- The user canceled the dialog.
  
  2- The Source Manager found no data sources installed.
  
  3- There was a failure before the Select Source dialog could be posted. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetAutoBrightness(System.Boolean)">
	<summary>
  Try to enable or disable autobrightness scanning.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoBrightnessAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoBrightnessEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<param name="AutoBrightness">True to enable autobrightness, else False. </param>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetAutoFeed(System.Boolean)">
	<summary>
  Try to enable or disable the Source’s automatic document feeding process.
  
  If you enable auto feed scanning, this function selects the feeder.
  
  So to start scanning pages from an ADF, just do: TwainSetAutoFeed(TRUE).
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoScan(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoFeedEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoFeedAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoFeed(System.Boolean)"/>
	<remarks>
  This function can returns FALSE with HP scanners with ADF.
  
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<param name="AutoFeed">True to enable automatic document feeding, else False. </param>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetAutomaticBorderDetection(System.Boolean)">
	<summary>
  If this option is available on opened source, try to enable or disable the automatic border
  detection. It reduces or removes the border generated around an image by the scanner scanning its own
  platen (the area not covered by the paper).
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticBorderDetectionAvailable"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<param name="AutoBorderDetect">True to enable automatic border detection, else False. </param>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutoSizeAvailable">
	<summary>
  Asks to the opened source if she can support the auto-size images capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoSize(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoSizeEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support the auto-size images, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsRotationAvailable">
	<summary>
  Asks to the opened source if she can support the image rotation capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetRotation(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetRotation"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support image rotation, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetRotation(System.Int32)">
	<summary>
  Asks to the opened source to rotate the scanned image data prior to transfer. 
  </summary>
	<param name="Rotation">The angle of rotation in degrees. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsRotationAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetRotation"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if success, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetRotation">
	<summary>
  Asks to the opened source for current rotation to apply to the scanned image data prior to transfer. 
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsRotationAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetRotation(System.Int32)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  The image rotation in degrees. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsOrientationAvailable">
	<summary>
  Asks to the opened source if she can support the image orientation capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetOrientation(GdPicture.TwainOrientation)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetOrientation"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support image rotation, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetOrientation(GdPicture.TwainOrientation)">
	<summary>
  Asks to the opened source to define which edge of the “paper” the image’s “top” is aligned with.
  This information is used to adjust the frames to match the scanning orientation of the paper.
  </summary>
	<param name="Orientation">The image orientation mode. A member of the TwainOrientation enumeration.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsOrientationAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetOrientation"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if success, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetOrientation">
	<summary>
  Asks to the opened source which edge of the “paper” the image’s “top” is aligned with.
  
  This information is used to adjust the frames to match the scanning orientation of the paper.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsOrientationAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetOrientation(GdPicture.TwainOrientation)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  The image orientation mode. A member of the TwainOrientation enumeration. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutoSizeEnabled">
	<summary>
  Asks to the opened source if the auto-size images capability is enabled or not.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoSize(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoSizeAvailable"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if the auto-size images is enabled, FALSE otherwise. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetAutoSize(System.Boolean)">
	<summary>
  If this option is available on opened source, try to enable or disable the auto-size images.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoSizeAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoSizeEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<param name="AutoSize">True to enable auto-size images, else False. </param>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetXScaling">
	<summary>
  Asks to the opened source for current horizontal scaling to apply to the scanned image.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsXScalingAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetXScaling(System.Double)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  The image horizontal scaling. A value of ‘1.0’ is equivalent to 100% scaling. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsXScalingAvailable">
	<summary>
  Asks to the opened source if she can support the image horizontal scaling capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetXScaling(System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetXScaling"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support image XScaling, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetXScaling(System.Double)">
	<summary>
  Tries to set the current image horizontal scaling factor for the selected twain source.
  </summary>
	<param name="XScaling">The image horizontal scaling. A value of ‘1.0’ is equivalent to 100% scaling. Do not use values less than or equal to zero.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsXScalingAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetXScaling"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if success, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetNoiseFilter">
	<summary>
  Asks to the opened source for current algorithm used to remove noise for the selected twain source.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsNoiseFilterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetNoiseFilter(GdPicture.TwainNoiseFilterMode)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  The noise filter mode. A member of the TwainNoiseFilterMode enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsNoiseFilterAvailable">
	<summary>
  Asks to the opened source if she can support the noise filter capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetNoiseFilter(GdPicture.TwainNoiseFilterMode)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetNoiseFilter"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support image Noise Filter, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetNoiseFilter(GdPicture.TwainNoiseFilterMode)">
	<summary>
  Tries to set the current  algorithm used to remove noise for the selected twain source.
  </summary>
	<param name="NoiseFilter">The noise filter mode. A member of the TwainNoiseFilterMode enumeration.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsNoiseFilterAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetNoiseFilter"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if success, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetYScaling">
	<summary>
  Asks to the opened source for current vertical scaling to apply to the scanned image.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsYScalingAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetYScaling(System.Double)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  The image vertical scaling. A value of ‘1.0’ is equivalent to 100% scaling. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsYScalingAvailable">
	<summary>
  Asks to the opened source if she can support the image vertical scaling capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetYScaling(System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetYScaling"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support image YScaling, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetYScaling(System.Double)">
	<summary>
  Tries to set the current image vertical scaling factor for the selected twain source.
  </summary>
	<param name="YScaling">The image vertical scaling. A value of ‘1.0’ is equivalent to 100% scaling. Do not use values less than or equal to zero.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsYScalingAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetYScaling"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if success, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetGamma">
	<summary>
  Asks to the opened source for current Gamma correction value to apply to the scanned image.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsGammaAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetGamma(System.Double)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  Gamma correction value for the image data. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsGammaAvailable">
	<summary>
  Asks to the opened source if she can support the gamma correction capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetGamma(System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetGamma"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support gamma correction, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetGamma(System.Double)">
	<summary>
  Tries to set the current gamma correction value for the selected twain source.
  </summary>
	<param name="Gamma">Gamma correction value for the image data. Default value is 2.2</param>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsGammaAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetGamma"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if success, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutomaticBorderDetectionAvailable">
	<summary>
  Asks to the opened source if she can support the Automatic border detection capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutomaticBorderDetection(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticBorderDetectionEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support the Automatic border detection, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutomaticBorderDetectionEnabled">
	<summary>
  Asks to the opened source if the Automatic border detection capability is enabled or not.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutomaticBorderDetection(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticBorderDetectionAvailable"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if the automatic border detection is enabled, FALSE otherwise. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)">
	<summary>
  If this option is available on opened source, try to enable or disable the barcode detection.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionAvailable"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<param name="bBarcodeDetection">Boolean. True to enable barcode detection, else False. </param>
	<returns>
  Boolean. TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetAutomaticDeskew(System.Boolean)">
	<summary>
  If this option is available on opened source, try to enable or disable the automatic deskew
  correction of an image. It may also affect the dimensions of the image.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticDeskewAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticDeskewEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<param name="AutoDeskew">True to enable automatic deskew, else False. </param>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutomaticDeskewAvailable">
	<summary>
  Asks to the opened source if she can support the Automatic Deskew capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutomaticDeskew(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticDeskewEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support the Automatic Deskew, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsEndorserAvailable">
	<summary>
  Asks to the opened source if she can support endorser / imprinter capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetEndorserNumber(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetEndorserNumber"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support endorser / imprinter, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetEndorserNumber(System.Int32)">
	<summary>
  Tries to specify the starting endorser / imprinter number for the next acquisition. All other
  endorser/imprinter properties should be handled through the data source’s user interface.
  </summary>
	<param name="Number">The starting number for the endorser. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsEndorserAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetEndorserNumber"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetEndorserNumber">
	<summary>
  Returns the starting endorser / imprinter number for the next acquisition.
  </summary>
	<returns>
  The starting number for the endorser. -999999 If it is not supported by the current device -\&gt; Use
  TwainGetLastResultCode() and TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsEndorserAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetEndorserNumber(System.Int32)"/>
	<remarks>
  Before using this function check that the TWAIN state is \&gt;= 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutomaticDeskewEnabled">
	<summary>
  Asks to the opened source if the Automatic Deskew capability is enabled or not.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutomaticDeskew(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticDeskewAvailable"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if the automatic deskew is enabled, FALSE otherwise. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesAvailable">
	<summary>
  Asks to the opened source if she can support the Automatic discard blank images capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutomaticDiscardBlankPages(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support the Automatic discard blank images, FALSE otherwise -\&gt; Use TwainGetLastResultCode()
  and TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesEnabled">
	<summary>
  Asks to the opened source if the Automatic discard blank images capability is enabled or not.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutomaticDiscardBlankPages(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesAvailable"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if automatic discard blank page is enabled, FALSE otherwise. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetAutomaticDiscardBlankPages(System.Boolean)">
	<summary>
  If this option is available on opened source, try to enable or disable the automatic discard blank
  page capability.
  </summary>
	<param name="AutoDiscard">True to enable automatic discard blank images capability, else False. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticDiscardBlankPagesEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetAutomaticRotation(System.Boolean)">
	<summary>
  If this option is available on opened source, try to enable or disable the automatic rotation of
  image capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticRotationAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticRotationEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  There are no criteria for how this automatic rotation is determined. A Source may use a field of
  text, or some distinguishing non-text field, such as a barcode or a logo, or it may rely on form
  recognition to help rotate the document.
  </remarks>
	<param name="AutoRotate">True to enable automatic rotation, else False. </param>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutomaticRotationAvailable">
	<summary>
  Asks to the opened source if she can support the Automatic rotation of images capability.
  
  This capability depends on intelligent features within the Source to automatically rotate the image
  to the correct position.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutomaticRotation(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticRotationEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support the Automatic rotation, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutomaticRotationEnabled">
	<summary>
  Asks to the opened source if the automatic rotation of images capability is enabled or not.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutomaticRotationAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutomaticRotation(System.Boolean)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if the automatic rotation is enabled, FALSE otherwise. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutoScanAvailable">
	<summary>
  Asks to the opened source if she can support the automatic scan capability.
  
  This capability is intended to boost the performance of a Source.
  
  The fundamental assumption behind AutoScan is that the device is able to capture images without
  waiting for the Application to request the image transfers.
  
  The default behavior is undefined, because some high volume devices are capable of anything but
  TwainIsAutoScanAvailable() return value being equal to TRUE.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoScanEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoScan(System.Boolean)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support the automatic scan, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutoScanEnabled">
	<summary>
  Asks to the opened source if the automatic scan capability is enabled or not.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoScanAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoScan(System.Boolean)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if the automatic scan is enabled, FALSE otherwise. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionAvailable">
	<summary>
  Asks to the opened source if she can support the barcode detection capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionEnabled"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  Boolean. TRUE if support the barcode detection, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error.
  </returns>
	<example>
  Acquire single image and detect its barcodes
  <code lang="vb.net">
      Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
          Dim ImageID As Integer
          Dim oGdPictureImaging As New GdPicture.GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
                  oGdPictureImaging.TwainSetBarcodeDetection(True)
                  ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
                  If ImageID &lt;&gt; 0 Then
                      Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
  
                      MsgBox(Str(BarCodeCount) + " barcode have been found in the scanned image")
  
                      For i As Integer = 1 To BarCodeCount
                          MsgBox("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
                          MsgBox("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
                      Next
  
                      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
                  End If
              Else
                  MsgBox("Error: Barcode detection is not available on this scanner")
              End If
  
              oGdPictureImaging.TwainCloseSource()
              MsgBox("Done !")
          Else
              MsgBox("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionEnabled">
	<summary>
  Asks to the opened source if the barcode detection capability is enabled or not.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetBarcodeDetection(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsBarcodeDetectionAvailable"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  Boolean. TRUE if the barcode detection is enabled, FALSE otherwise.
  </returns>
	<example>
  Acquire single image and detect its barcodes
  <code lang="vb.net">
      Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
          Dim ImageID As Integer
          Dim oGdPictureImaging As New GdPicture.GdPictureImaging
  
          If oGdPictureImaging.TwainOpenDefaultSource(Me.Handle) Then
              If oGdPictureImaging.TwainIsBarcodeDetectionAvailable Then
                  oGdPictureImaging.TwainSetBarcodeDetection(True)
                  ImageID = oGdPictureImaging.TwainAcquireToGdPictureImage(Me.Handle)
                  If ImageID &lt;&gt; 0 Then
                      Dim BarCodeCount As Integer = oGdPictureImaging.TwainBarCodeGetCount
  
                      MsgBox(Str(BarCodeCount) + " barcode have been found in the scanned image")
  
                      For i As Integer = 1 To BarCodeCount
                          MsgBox("Type of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetType(i).ToString)
                          MsgBox("Value of barcode " + Str(i) + " is: " + oGdPictureImaging.TwainBarCodeGetValue(i))
                      Next
  
                      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
                  End If
              Else
                  MsgBox("Error: Barcode detection is not available on this scanner")
              End If
  
              oGdPictureImaging.TwainCloseSource()
              MsgBox("Done !")
          Else
              MsgBox("can't open default source, twain state is: " &amp; oGdPictureImaging.TwainGetState.ToString)
          End If
      End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutoFeedAvailable">
	<summary>
  Asks to the opened source if she can support the automatic page feeding capability.
  
  When AutoFeed capability is enabled, the Source will automatically feed the next page from the
  document feeder after the number of frames negotiated for capture from each page are acquired.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoFeedEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoFeed(System.Boolean)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support the automatic page feeding, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutoFeedEnabled">
	<summary>
  Asks to the opened source if the automatic page feeding capability is enabled or not.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoFeedAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoFeed(System.Boolean)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if the automatic page feeding is enabled, FALSE otherwise. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutoBrightnessAvailable">
	<summary>
  Asks to the opened source if she can support the auto-brightness images capability.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoBrightnessEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoBrightness(System.Boolean)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if support the auto-brightness images, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and
  TwainGetLastConditionCode() functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsAutoBrightnessEnabled">
	<summary>
  Asks to the opened source if the auto-brightness images capability is enabled or not.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoBrightnessAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoBrightness(System.Boolean)"/>
	<remarks>
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<returns>
  TRUE if the auto-brightness images is enabled, FALSE otherwise. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetAutoScan(System.Boolean)">
	<summary>
  Tries to enable or disable the auto scan scanning capability. Setting this to TRUE gives the scanner
  permission to 'scan ahead'.
  
  i.e. to pull pages from the feeder and scan them before they have been requested.
  
  On high-speed scanners, you may have to enable auto scan to achieve the maximum scanning rate.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoScanAvailable"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsAutoScanEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetAutoFeed(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainStopFeeder"/>
	<remarks>
  This will fail on most flatbeds &amp; cameras, and some 'feeder'
  
  Before using this function check that the TWAIN state is TWAIN_SOURCE_OPEN (4)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
	<param name="AutoScan">True to enable autoscan, else False. </param>
	<returns>
  TRUE if successful, FALSE otherwise -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error. 
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetBitDepth(System.Int32)">
	<summary>
  Specifies the pixel bit depths for the Current value of PixelType.
  
  For example, when using TwainSetPixelType(TWPT_GRAY), this capability specifies whether this is 8-bit
  gray or 4-bit gray.
  </summary>
	<param name="BitDepth">Bit Depth. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetBrightness(System.Int32)">
	<summary>
  Tries to set the current brightness for the next acquisition.
  </summary>
	<param name="Brightness">The TWAIN standard *says* that the range for this cap is -1000 ... +1000. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetContrast(System.Int32)">
	<summary>
  Tries to set the current contrast for the next acquisition.
  </summary>
	<param name="Contrast">The TWAIN standard *says* that the range for this cap is -1000 ... +1000. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetPixelType(GdPicture.TwainPixelType)">
	<summary>
  Tries to set the current pixel type for the selected twain source.
  </summary>
	<param name="PixelType">A member of the TwainPixelType enumeration. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsPixelTypeAvailable(GdPicture.TwainPixelType)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetPixelType"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetResolution(System.Int32)">
	<summary>
  Tries to set the current resolution (in both x &amp; y).
  
  Resolution is in dots per inch.
  </summary>
	<param name="Resolution">The new resolution. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  'The source may select this resolution, but don't assume it will.
  
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetDebugMode(System.Boolean)">
	<summary>
  Turns On or Off the Debug Mode of GDTWAIN.
  
  Displays a message box for each step of the scanning process.
  </summary>
	<param name="DebugMode">True to turn ON else False.</param>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetDSMPath(System.String)">
	<summary>
  Specifies the path TWAIN Data Source Manager.
  
  The TWAIN DSM is the windows library (dll) providing support for the TWAIN standard.
  
  Can be TWAIN_32.DLL or TWAINDSM.DLL for TWAIN 2.0 support. By default, the toolkits searches the
  Windows path for the TWAIN DSM but on Citrix the Windows directory can be redirected for users.
  </summary>
	<param name="DSMPath">The path of the TWAIN Data Source Manager. </param>
	<example>
  Loading the TWAIN 2.0 DSM
  <code lang="vb.net">
  oGdPictureImaging.TwainSetDSMPath("c:\\Windows\\TWAINDSM.DLL")
  oGdPictureImaging.TwainOpenDefaultSource
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetErrorMessage(System.Boolean)">
	<summary>
  Turns On or Off the error message box of GDTWAIN.
  
  Displays a message box for each error appends.
  </summary>
	<param name="ShowErrors">True to turn ON else False. </param>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetImageLayout(System.Double,System.Double,System.Double,System.Double)">
	<summary>
  Specifies the physical area (a rectangle) to be acquired during the next image transfer.
  </summary>
	<param name="Left">Value of the left-most edge of the area to scan measured in inches. </param>
	<param name="Top">Value of the top-most edge of the area to scan measured in inches. </param>
	<param name="Right">Value of the right-most edge of the area to scan measured in inches. Note:
                      ImageWidth = Right - Left. </param>
	<param name="Bottom">Value of the bottom-most edge of the area to scan measured in inches. Note:
                       ImageHeight = Bottom - Top. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetImageLayout(System.Double@,System.Double@,System.Double@,System.Double@)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainResetImageLayout"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainGetImageLayout(System.Double@,System.Double@,System.Double@,System.Double@)">
	<summary>
  Returns the physical area (a rectangle) to be acquired during the next image transfer.
  </summary>
	<param name="Left">Value of the left-most edge of the area to scan measured in inches. </param>
	<param name="Top">Value of the top-most edge of the area to scan measured in inches. </param>
	<param name="Right">Value of the right-most edge of the area to scan measured in inches. Note:
                      ImageWidth = Right - Left. </param>
	<param name="Bottom">Value of the bottom-most edge of the area to scan measured in inches. Note:
                       ImageHeight = Bottom - Top. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainResetImageLayout"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetImageLayout(System.Double,System.Double,System.Double,System.Double)"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetHideUI(System.Boolean)">
	<summary>
  Tells the source to hide or show the user interface before acquisition.
  </summary>
	<param name="Hide">True to hide the UI, else False. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetHideUI"/>
	<remarks>
  That this is only a request - some sources will ignore it!
  
  If the user interface is hidden, you will probably want to set at least some of the basic acquisition
  parameters yourself like resolution, Bit Depth...
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetModalUI(System.Boolean)">
	<summary>
  Set TRUE to run the TWAIN Source's GUI modal or FALSE to run it modeless. Please note that to
  successfully run modal, it may be necessary for the application to disable inputs to its windows
  while the Source’s GUI is running.
  </summary>
	<param name="ModalUI">True to run the source's GUI modal, else False. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetModalUI"/>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetIndicators(System.Boolean)">
	<summary>
  Tells the source to show or hide progress indicators during acquisition.
  </summary>
	<param name="ShowIndicator">True to show the progress indicators, else False. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetMultiTransfer(System.Boolean)">
	<summary>
  Changes the multiple transfers mode for acquisition.
  </summary>
	<param name="MultiTransfer">If set to False, all the pending transfers are canceled after the last
                              acquisition process. </param>
	<remarks>
  The multiple transfers mode is automatically sets to True by the TwainSetAutoFeed(True) and the
  TwainEnableDuplex(True) calls.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetPaperSize(GdPicture.TwainPaperSize)">
	<summary>
  Sets the current paper size.
  </summary>
	<param name="Size">A member of the TwainPaperSize enumeration. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetPaperSize"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  NONE (0) indicates that the maximum image size supported by the device is to be used.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainSetXferCount(System.Int32)">
	<summary>
  Negotiates with open Source the number of images application will accept.
  </summary>
	<param name="Xfers">Number of image to transfert. Xfers = -1 means all images.</param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainShowSetupDialogSource(System.IntPtr)">
	<summary>
  Starts the selected device's settings dialog, if this is supported.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsSetupDialogSourceAvailable"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  
  
  You can use the TwainUserClosedSource function to determine if the user pressed the Cancel button of
  the displayed interface. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainShowSetupDialogSource(System.Int32)">
	<summary>
  Starts the selected device's settings dialog, if this is supported.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainIsSetupDialogSourceAvailable"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  
  
  
  You can use the TwainUserClosedSource function to determine if the user pressed the Cancel button of
  the displayed interface. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainIsSetupDialogSourceAvailable">
	<summary>
  Queries the selected device's for settings dialog support.
  </summary>
	<returns>
  True if supported, else False
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainShowSetupDialogSource(System.IntPtr)"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainUnloadSourceManager(System.IntPtr)">
	<summary>
  Unloads the Data Source Manager and release the TWAIN32.DLL.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  This will fail if the Source Manager is open.
  
  If success, the twain state must be 1 (TWAIN_PRESESSION).
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.TwainUnloadSourceManager(System.Int32)">
	<summary>
  Unloads the Data Source Manager and release the TWAIN32.DLL.
  </summary>
	<param name="HANDLE">A Window Handle IE: Me.Handle. In most applications you can use nothing but on
                       Citrix and WTS, this must be a top-level window or a child of a top level
                       window. </param>
	<returns>
  True if success, else False -\&gt; Use TwainGetLastResultCode() and TwainGetLastConditionCode()
  functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainGetState"/>
	<remarks>
  This will fail if the Source Manager is open.
  
  If success, the twain state must be 1 (TWAIN_PRESESSION).
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.WiaSelectSource(GdPicture.WiaSourceType)">
	<summary>
  Select WIA device for capture. This function posts the WIA Source Manager's Select Source dialog box.
  </summary>
	<param name="SourceType">A member of the WiaSourceType enumeration. The type of source to select.</param>
	<returns>
  The WIA source identifier as string if success, else empty string. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetSourceCount">
	<summary>
  Returns the number of sources available.
  </summary>
	<returns>
  Number of sources available.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceName(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceID(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetSourceName(System.Int32)">
	<summary>
  Returns the name of an available WIA source.
  </summary>
	<param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
                         return. </param>
	<returns>
  The name of the source.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetSourceServer(System.Int32)">
	<summary>
  Returns the name of the server on which an available WIA source is connected.
  </summary>
	<param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
                         return. </param>
	<returns>
  The server name? Shoud be 'local' for local usage.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetSourceDriverVersion(System.Int32)">
	<summary>
  Returns the version of the driver of an available WIA source.
  </summary>
	<param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
                         return. </param>
	<returns>
  The driver version.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetSourceWIAVersion(System.Int32)">
	<summary>
  Returns the version of the WIA protocol used by an available WIA source.
  </summary>
	<param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
                         return. </param>
	<returns>
  The WIA version.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetSourceDescription(System.Int32)">
	<summary>
  Returns the description of an available WIA source.
  </summary>
	<param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
                         return. </param>
	<returns>
  The description of the source.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetSourceManufacturer(System.Int32)">
	<summary>
  Returns the manufacturer name of an available WIA source.
  </summary>
	<param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
                         return. </param>
	<returns>
  The manufacturer name of the source.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetSourceType(System.Int32)">
	<summary>
  Returns the type of an available WIA source.
  </summary>
	<param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
                         return. </param>
	<returns>
  A member of the WiaSourceType enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetSourceID(System.Int32)">
	<summary>
  Returns the ID of an available WIA source.
  </summary>
	<param name="SourceNo">The number of the source. Must be value between 1 and WiaGetSourceCount()
                         return. </param>
	<returns>
  The name of the source.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetCurrentSourceID">
	<summary>
  Returns the ID of the opened source.
  </summary>
	<returns>
  The current source ID.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaOpenSource(System.String)">
	<summary>
  Opens a WIA source.
  </summary>
	<param name="SourceID">A WIA source identifier which can be retrieved with the WiaGetSourceID or the
                         WiaSelectSource functions.</param>
	<returns>
  True if success, False otherwhise. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSelectSource(GdPicture.WiaSourceType)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaCloseSource"/>
	<example>
  Acquire multiple image from the flatbed to JPEG image. You can find more sophisticated samples in the
  package.
  <code lang="vb.net">
    Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
       Dim ImageID As Integer
       Dim oGdPictureImaging As New GdPictureImaging
       Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
       oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
       Dim SourceID as string = oGdPictureImaging.WiaSelectSource
  
       If oGdPictureImaging.WiaOpenSource(SourceID) Then 'Open selected source
          oGdPictureImaging.WiaShowSetupDialogSource() 'Displays device configuration
          oGdPictureImaging.WiaSelectFeeder(False) 'Select flatbed
  
          ImageID = oGdPictureImaging.WiaAcquireToGdPictureImage()
          If ImageID &lt;&gt; 0 Then
             Call oGdPictureImaging.SaveAsJPEG(ImageID, My.Application.Info.DirectoryPath &amp; "image.jpg", 90)
             Call oGdPictureImaging.ReleaseGdPictureImage(ImageID)
          End If
          MsgBox("Done. WIA status: " + oGdPictureImaging.WiaGetLastError.ToString)
          oGdPictureImaging.WiaCloseSource()
       End If
    End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.WiaCloseSource">
	<summary>
  \Closes the open Data Source, if any.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetSourceID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSelectSource(GdPicture.WiaSourceType)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaAcquireToFile(System.String,GdPicture.WiaImageFormat)">
	<summary>
  \Acquires a single image, from the currently selected Data Source to a file.
  </summary>
	<param name="FilePath">The destination of the file.</param>
	<param name="ImageFormat">A member of the WiaImageFormat enumeration.</param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaOpenSource(System.String)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaAcquireToFile(System.String)">
	<summary>
 Acquires a single image, from the currently selected Data Source to a file, in the native format
 provided by the data source. The format of the image to be transferred can be determined calling the
 WiaGetImageExtension() function. '''
 </summary>
	<param name="FilePath">The destination of the file.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaOpenSource(System.String)"/>
	<example>
 Extract all available image from the memory card of a digital camera, in they native format.
 <code lang="vb.net">
     Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
         Dim oGdPictureImaging As New GdPictureImaging
 
         Dim WiaSourceID As String = oGdPictureImaging.WiaSelectSource(WiaSourceType.WiaSourceCamera)
         If WiaSourceID &lt;&gt; "" Then
             oGdPictureImaging.WiaOpenSource(WiaSourceID)
             Dim ImageCount As Integer = oGdPictureImaging.WiaGetImageCount
             If ImageCount &gt; 0 Then
                 For i As Integer = 1 To ImageCount
                     oGdPictureImaging.WiaSelectImageIdx(i)
                     Dim FileExt As String = oGdPictureImaging.WiaGetImageExtension()
                    oGdPictureImaging.WiaAcquireToFile("c:\\Picture" + Str(i) + "." + FileExt)
                 Next
                MsgBox("Done")
            Else
                MsgBox("there is no image available for transfer")
            End If
        Else
            MsgBox("No source can be selected")
        End If
     End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.WiaAcquireToGdPictureImage">
	<summary>
  Acquires a single image, from the currently selected Data Source to a file.
  </summary>
	<returns>
  0: The image could not created. Use the GetStat() and WiaGetLastError() functions for diagnosing the
  error.
  
  Non-zero: GdPicture Image Identifier. The created image.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaOpenSource(System.String)"/>
	<example>
  Acquire multiple image from the flatbed to JPEG image. You can find more sophisticated samples in the
  package.
  <code lang="vb.net">
    Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
       Dim ImageID As Integer
       Dim oGdPictureImaging As New GdPictureImaging
       Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
       oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
       Dim SourceID as string = oGdPictureImaging.WiaSelectSource
  
       If oGdPictureImaging.WiaOpenSource(SourceID) Then 'Open selected source
          oGdPictureImaging.WiaShowSetupDialogSource() 'Displays device configuration
          oGdPictureImaging.WiaSelectFeeder(False) 'Select flatbed
  
          ImageID = oGdPictureImaging.WiaAcquireToGdPictureImage()
          If ImageID &lt;&gt; 0 Then
             Call oGdPictureImaging.SaveAsJPEG(ImageID, My.Application.Info.DirectoryPath &amp; "image.jpg", 90)
             Call oGdPictureImaging.ReleaseGdPictureImage(ImageID)
          End If
          MsgBox("Done. WIA status: " + oGdPictureImaging.WiaGetLastError.ToString)
          oGdPictureImaging.WiaCloseSource()
       End If
    End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.WiaTakePictureToGdPictureImage">
	<summary>
   Asks the the currently selected Data Source to acquire an image, the return it as a GdPicture Image. This function should be used with camera only.
  </summary>
	<returns>
  0: The image could not created. Use the GetStat() and WiaGetLastError() functions for diagnosing the
  error.
  
  Non-zero: GdPicture Image Identifier. The created image.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaOpenSource(System.String)"/>
	<example>
  Take a picture from a camera and save it to JPEG file.
  <code lang="vb.net">
    Private Sub Command1_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles Command4.Click
       Dim ImageID As Integer
       Dim oGdPictureImaging As New GdPictureImaging
       Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
       oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
       Dim SourceID as string = oGdPictureImaging.WiaSelectSource(WiaSourceType.WiaSourceCamera Or WiaSourceType.WiaSourceVideo)
  
       If oGdPictureImaging.WiaOpenSource(SourceID) Then 'Open selected source
  
          ImageID = oGdPictureImaging.WiaTakePictureToGdPictureImage()
          If ImageID &lt;&gt; 0 Then
             Call oGdPictureImaging.SaveAsJPEG(ImageID, My.Application.Info.DirectoryPath &amp; "image.jpg", 90)
             Call oGdPictureImaging.ReleaseGdPictureImage(ImageID)
          End If
          MsgBox("Done. WIA status: " + oGdPictureImaging.WiaGetLastError.ToString)
          oGdPictureImaging.WiaCloseSource()
       End If
    End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.WiaAcquireWizard">
	<summary>
  Launches the Microsoft Windows Scanner and Camera Wizard with the currently selected Data Source.
  </summary>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaOpenSource(System.String)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetLastError">
	<summary>
  Returns the last status of the currently selected Data Source.
  </summary>
	<returns>
  A member of the WiaStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaSelectFeeder(System.Boolean)">
	<summary>
  Asks to the opened source to select or deselect the document feeder.
  </summary>
	<param name="SelectFeeder">If TRUE, Source must acquire data from the document feeder acquire area.If
                             FALSE, Source must acquire data from the non-feeder acquire area like
                             flatbed area. </param>
	<returns>
  True if success, else False. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaIsFeederLoaded">
	<summary>
  Asks to the opened source if there are documents in the feeder.
  </summary>
	<returns>
  True if there are documents, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSelectFeeder(System.Boolean)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaIsFeederSelected">
	<summary>
  Asks to the opened source if the document feeder is selected.
  </summary>
	<returns>
  True if the document feeder is selected, else False.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaHasFeeder">
	<summary>
  Asks to the opened source if it has a document feeder.
  </summary>
	<returns>
  True if the source indicates it has a document feeder else False.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaHasFlatBed">
	<summary>
  Asks to the opened source if it has a flatbed.
  </summary>
	<returns>
  True if the source indicates it has a flatbed else False.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaIsDuplexAvailable">
	<summary>
  Ask to the opened source if duplex scanning is currently available or not.
  </summary>
	<returns>
  True if duplex is currently available else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaEnableDuplex(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaIsDuplexEnabled"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaIsDuplexEnabled">
	<summary>
  Ask to the opened source if duplex scanning is currently enabled or not.
  </summary>
	<returns>
  True if duplex is currently enabled else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaEnableDuplex(System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaIsDuplexAvailable"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaEnableDuplex(System.Boolean)">
	<summary>
  Ask to the opened source if duplex scanning is currently enabled or not.
  </summary>
	<param name="Enable"> TRUE to enabled duplex scanning mode else FALSE. </param>
	<returns>
  True if success, else False.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaIsDuplexEnabled"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaIsDuplexAvailable"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaShowSetupDialogSource">
	<summary>
  Starts the selected device's settings dialog.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.TwainSetIndicators(System.Boolean)"/>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaSetIndicators(System.Boolean)">
	<summary>
  Tells the source to show or hide progress indicators during acquisition.
  </summary>
	<param name="ShowIndicator">True to show the progress indicators, else False. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaShowSetupDialogSource"/>
	<remarks>
  Before using this function check that the TWAIN state is 4 (TWAIN_SOURCE_OPEN)
  
  To get the TWAIN state, use the TwainGetState() function.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.WiaSetVerticalResolution(System.Int32)">
	<summary>
  Tries to set the current vertical resolution.
  
  Resolution is in dots per inch.
  </summary>
	<param name="Resolution">The new resolution.</param>
	<returns>
  True if success, else False. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetVerticalResolution"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableVerticalResolutionCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableVerticalResolutionNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetVerticalResolution">
	<summary>
  Returns the current vertical resolution in Dot per inch of the selected device.
  </summary>
	<returns>
  If success, non-zero value. If fail, -1. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetVerticalResolution(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableVerticalResolutionCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetAvailableVerticalResolutionCount">
	<summary>
  Returns the number of supported vertical resolutions which can be used by the opened source in its
  current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of supported vertical resolutions. Else 0 if fail. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetVerticalResolution"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetVerticalResolution(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetAvailableVerticalResolutionNo(System.Int32)">
	<summary>
  Returns a supported vertical resolution which can be used by the opened source in its current configuration.
  </summary>
	<param name="ResNo">Index of the supported vertical resolution. Must be a value between 1 and  WiaGetAvailableVerticalResolutionCount() returned value. </param>
	<returns>
  The supported vertical resolution.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetVerticalResolution"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetVerticalResolution(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableVerticalResolutionCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaSetHorizontalResolution(System.Int32)">
	<summary>
  Tries to set the current horizontal resolution.
  
  Resolution is in dots per inch.
  </summary>
	<param name="Resolution">The new resolution.</param>
	<returns>
  True if success, else False. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetHorizontalResolution"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableHorizontalResolutionCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetHorizontalResolution">
	<summary>
  Returns the current horizontal resolution in Dot per inch of the selected device.
  </summary>
	<returns>
  If success, non-zero value. If fail, -1.  Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetHorizontalResolution(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableHorizontalResolutionCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetAvailableHorizontalResolutionCount">
	<summary>
  Returns the number of supported horizontal resolutions which can be used by the opened source in its current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of supported horizontal resolutions. Else 0 if fail. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetHorizontalResolution"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetHorizontalResolution(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetAvailableHorizontalResolutionNo(System.Int32)">
	<summary>
  Returns a supported horizontal resolution which can be used by the opened source in its current configuration.
  </summary>
	<param name="ResNo">Index of the supported horizontal resolution. Must be a value between 1 and  WiaGetAvailableHorizontalResolutionCount() returned value. </param>
	<returns>
  The supported horizontal resolution.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetHorizontalResolution"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetHorizontalResolution(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableHorizontalResolutionCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetAvailableBrightnessCount">
	<summary>
  Returns the number of supported brightness values which can be used by the opened source in its current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of supported brightness values. Else 0 if fail. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetBrightness"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetBrightness(System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableBrightnessNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetBrightness">
	<summary>
  Returns the brightness value of the selected device.
  </summary>
	<returns>
  If success: The  standard *says* that the range for this cap is -1000 ... +1000. If fail,
  Returns -99999. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetBrightness(System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableBrightnessCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableBrightnessNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaSetBrightness(System.Double)">
	<summary>
  Tries to set the current brightness.
  </summary>
	<param name="Brightness">The new brightness.</param>
	<returns>
  True if success, else False. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetVerticalResolution"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableBrightnessCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableBrightnessNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetAvailableBrightnessNo(System.Int32)">
	<summary>
  Returns a supported brightness value which can be used by the opened source in its current
  configuration.
  </summary>
	<param name="BrightnessNo">Index of the supported brightness value. Must be a value between 1 and
                             WiaGetAvailableBrightnessCount() returned value. </param>
	<returns>
  The supported brightness value.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetBrightness"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetBrightness(System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableBrightnessCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetAvailableContrastCount">
	<summary>
  Returns the number of supported contrast values which can be used by the opened source in its current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of supported contrast values. Else 0 if fail. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetContrast"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetContrast(System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableContrastNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetContrast">
	<summary>
  Returns the contrast value of the selected device.
  </summary>
	<returns>
  If success: The  standard *says* that the range for this cap is -1000 ... +1000. If fail,
  Returns -99999. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetContrast(System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableContrastCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableContrastNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaSetContrast(System.Double)">
	<summary>
  Tries to set the current contrast.
  </summary>
	<param name="Contrast">The new contrast.</param>
	<returns>
  True if success, else False. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetVerticalResolution"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableContrastCount"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableContrastNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetAvailableContrastNo(System.Int32)">
	<summary>
  Returns a supported contrast value which can be used by the opened source in its current
  configuration.
  </summary>
	<param name="ContrastNo">Index of the supported contrast value. Must be a value between 1 and
                           WiaGetAvailableContrastCount() returned value. </param>
	<returns>
  The supported contrast value.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetContrast"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetContrast(System.Double)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableContrastCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetImageIntent">
	<summary>
  Returns the current image intent setting for the selected device.
  The driver chooses the bit depth, in dots per inch, and other settings that it determines are appropriate for the selected intent. 
  </summary>
	<returns>
  A member of the WiaImageIntent enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetImageIntent(GdPicture.WiaImageIntent)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableImageIntentNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableImageIntentCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetImageCount">
	<summary>
 Returns the number of available image from the selected device, for example: the number of pictures
 stored on the memory card of a digital camera.
 </summary>
	<returns>
 A member of the WiaImageIntent enumeration.
 </returns>
	<example>
 Extract all available image from the memory card of a digital camera, in they native format.
 <code lang="vb.net">
     Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
         Dim oGdPictureImaging As New GdPictureImaging
 
         Dim WiaSourceID As String = oGdPictureImaging.WiaSelectSource(WiaSourceType.WiaSourceCamera)
         If WiaSourceID &lt;&gt; "" Then
             oGdPictureImaging.WiaOpenSource(WiaSourceID)
             Dim ImageCount As Integer = oGdPictureImaging.WiaGetImageCount
             If ImageCount &gt; 0 Then
                 For i As Integer = 1 To ImageCount
                     oGdPictureImaging.WiaSelectImageIdx(i)
                     Dim FileExt As String = oGdPictureImaging.WiaGetImageExtension()
                    oGdPictureImaging.WiaAcquireToFile("c:\\Picture" + Str(i) + "." + FileExt)
                 Next
                MsgBox("Done")
            Else
                MsgBox("there is no image available for transfer")
            End If
        Else
            MsgBox("No source can be selected")
        End If
     End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.WiaSelectImageIdx(System.Int32)">
	<summary>
 Sets the index of the image to be transferred from the selected device.
 </summary>
	<param name="ImageIdx">The index of the image to be acquired. Must be a value between 1 and
                        WiaGetImageCount().</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Extract all available image from the memory card of a digital camera, in they native format.
 <code lang="vb.net">
     Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
         Dim oGdPictureImaging As New GdPictureImaging
 
         Dim WiaSourceID As String = oGdPictureImaging.WiaSelectSource(WiaSourceType.WiaSourceCamera)
         If WiaSourceID &lt;&gt; "" Then
             oGdPictureImaging.WiaOpenSource(WiaSourceID)
             Dim ImageCount As Integer = oGdPictureImaging.WiaGetImageCount
             If ImageCount &gt; 0 Then
                 For i As Integer = 1 To ImageCount
                     oGdPictureImaging.WiaSelectImageIdx(i)
                     Dim FileExt As String = oGdPictureImaging.WiaGetImageExtension()
                    oGdPictureImaging.WiaAcquireToFile("c:\\Picture" + Str(i) + "." + FileExt)
                 Next
                MsgBox("Done")
            Else
                MsgBox("there is no image available for transfer")
            End If
        Else
            MsgBox("No source can be selected")
        End If
     End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetImageExtension">
	<summary>
 Gets the the extension of the image to be transferred from the selected device.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Extract all available image from the memory card of a digital camera, in they native format.
 <code lang="vb.net">
     Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
         Dim oGdPictureImaging As New GdPictureImaging
 
         Dim WiaSourceID As String = oGdPictureImaging.WiaSelectSource(WiaSourceType.WiaSourceCamera)
         If WiaSourceID &lt;&gt; "" Then
             oGdPictureImaging.WiaOpenSource(WiaSourceID)
             Dim ImageCount As Integer = oGdPictureImaging.WiaGetImageCount
             If ImageCount &gt; 0 Then
                 For i As Integer = 1 To ImageCount
                     oGdPictureImaging.WiaSelectImageIdx(i)
                     Dim FileExt As String = oGdPictureImaging.WiaGetImageExtension()
                    oGdPictureImaging.WiaAcquireToFile("c:\\Picture" + Str(i) + "." + FileExt)
                 Next
                MsgBox("Done")
            Else
                MsgBox("there is no image available for transfer")
            End If
        Else
            MsgBox("No source can be selected")
        End If
     End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.WiaSetImageIntent(GdPicture.WiaImageIntent)">
	<summary>
  \Sets the current image intent setting for the selected device.
  The driver chooses the bit depth, in dots per inch, and other settings that it determines are appropriate for the selected intent. 
  </summary>
	<param name="Intent">The image intent to set.</param>
	<returns>
  True if success, False otherwise. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetImageIntent(GdPicture.WiaImageIntent)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableImageIntentNo(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableImageIntentCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetAvailableImageIntentCount">
	<summary>
  Returns the number of supported image intents which can be used by the opened source in its current configuration.
  </summary>
	<returns>
  If Success, non zero: The number of supported image intents. Else 0 if fail. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetImageIntent(GdPicture.WiaImageIntent)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetImageIntent"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableImageIntentNo(System.Int32)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetAvailableImageIntentNo(System.Int32)">
	<summary>
  Returns a supported image intent which can be used by the opened source in its current configuration.
  </summary>
	<param name="IntentNo">Index of the supported image intent. Must be a value between 1 and  WiaGetAvailableImageIntentCount() returned value. </param>
	<returns>
  A member of the WiaImageIntent enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetImageIntent(GdPicture.WiaImageIntent)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetImageIntent"/>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaGetAvailableImageIntentCount"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetBitsPerPixel">
	<summary>
  Returns the current bits per pixel setting for the selected device. 
  </summary>
	<returns>
  The current bits per pixel setting.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaSetBitsPerPixel(System.Int32)">
	<summary>
  Sets the current bits per pixel setting for the selected device.
  </summary>
	<param name="bpp">The number of bits per pixel.</param>
	<returns>
  True if success, else False. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetChannelsPerPixel">
	<summary>
  Returns the current channels per pixel setting for the selected device. 
  </summary>
	<returns>
  The current channels per pixel setting.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaSetChannelsPerPixel(System.Int32)">
	<summary>
  Sets the current channels per pixel setting for the selected device.
  </summary>
	<param name="n">The number of channels per pixel.</param>
	<returns>
  True if success, else False. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaSetImageLayout(System.Double,System.Double,System.Double,System.Double)">
	<summary>
  Specifies the physical area (a rectangle) to be acquired during the next image transfer.
  </summary>
	<param name="Left">Horizontal start position of the area to scan measured in inches.</param>
	<param name="Top">Vertical start position of the area to scan measured in inches.</param>
	<param name="Width">Width of the area to scan measured in inches.</param>
	<param name="Height">Height of the area to scan measured in inches.</param>
	<returns>
  True if success, else False. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetPaperSize">
	<summary>
  Gets the current paper size.
  </summary>
	<returns>
  A member of the WiaPageSize enumeration.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetPaperSize(GdPicture.WiaPageSize)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaSetPaperSize(GdPicture.WiaPageSize)">
	<summary>
  Sets the current paper size.
  </summary>
	<param name="PageSize">Page size. A member of the WiaPageSize enumeration.</param>
	<returns>
  True if success, else False. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.WiaSetPaperSize(GdPicture.WiaPageSize)"/>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetImageLayout(System.Double@,System.Double@,System.Double@,System.Double@)">
	<summary>
  Returns the physical area (a rectangle) to be acquired during the next image transfer.
  </summary>
	<param name="Left">Output parameter. Horizontal start position of the area to scan measured in inches.</param>
	<param name="Top">Output parameter. Vertical start position of the area to scan measured in inches.</param>
	<param name="Width">Output parameter. Width of the area to scan measured in inches.</param>
	<param name="Height">Output parameter. Height of the area to scan measured in inches.</param>
	<returns>
  True if success, else False. Use WiaGetLastError() functions for diagnosing the error.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetVerticalBedSize">
	<summary>
  Returns the height of the bed of the current device.
  </summary>
	<returns>
  The height of the bed in inches.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetHorizontalBedSize">
	<summary>
  Returns the width of the bed of the current device.
  </summary>
	<returns>
  The width of the bed in inches.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetVerticalSheetFeedSize">
	<summary>
  Returns the height of the feeder of the current device.
  </summary>
	<returns>
  The height of the feeder in inches.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.WiaGetHorizontalSheetFeedSize">
	<summary>
  Returns the width of the feeder of the current device.
  </summary>
	<returns>
  The width of the feeder in inches.
  </returns>
</member><member name="M:GdPicture.GdPictureImaging.TransformJPEG(System.String,System.String,GdPicture.JPEGTransformation)">
	<summary>
  Applies transformation to a JPEG image without loss of information.
  
  When a JPEG image is compressed, some of the information in the image is lost.
  
  If you open a JPEG file, modify the image, and save it to another JPEG file, the quality will
  decrease.
  
  This function allows to opening / modifying / saving JPEG images, without loss of information.
  </summary>
	<param name="InputFile">The path of the image to transform. </param>
	<param name="OutputFile">The path of the transformed image. </param>
	<param name="Transformation">The JPEG transformation to apply. A member of the JPEGTransformation
                               enumeration. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<remarks>
  This function uses WinAPI. 
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.JPEGLosslessFlipX(System.String,System.String)">
	<summary>
  Performs a lossless flip-X on a JPEG image.
  </summary>
	<param name="SrcFile">The source JPEG image.</param>
	<param name="DstFile">The destination JPEG image.</param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Performing a lossless flip-X on a JPEG image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
  
      oGdPictureImaging.JPEGLosslessFlipX("image.jpg", "image.jpg")
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JPEGLosslessFlipY(System.String,System.String)">
	<summary>
  Performs a lossless flip-Y on a JPEG image.
  </summary>
	<param name="SrcFile">The source JPEG image.</param>
	<param name="DstFile">The destination JPEG image.</param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Performing a lossless flip-Y on a JPEG image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
  
      oGdPictureImaging.JPEGLosslessFlipY("image.jpg", "image.jpg")
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JPEGLosslessTranspose(System.String,System.String)">
	<summary>
  Transposes pixels across upper-left to lower-right axis on a JPEG image (lossless operation).
  </summary>
	<param name="SrcFile">The source JPEG image.</param>
	<param name="DstFile">The destination JPEG image.</param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Performing a lossless Transpose on a JPEG image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
  
      oGdPictureImaging.JPEGLosslessTranspose("image.jpg", "image.jpg")
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JPEGLosslessTransverse(System.String,System.String)">
	<summary>
  Transposes pixels across upper-right to lower-left axis on a JPEG image (lossless operation).
  </summary>
	<param name="SrcFile">The source JPEG image.</param>
	<param name="DstFile">The destination JPEG image.</param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Performing a lossless Transverse on a JPEG image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
  
      oGdPictureImaging.JPEGLosslessTransverse("image.jpg", "image.jpg")
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JPEGLosslessRotate90(System.String,System.String)">
	<summary>
  Performs a lossless 90 degrees rotation on a JPEG image.
  </summary>
	<param name="SrcFile">The source JPEG image.</param>
	<param name="DstFile">The destination JPEG image.</param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Performing a lossless 90 degree rotation on a JPEG image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
  
      oGdPictureImaging.JPEGLosslessRotate90("image.jpg", "image.jpg")
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JPEGLosslessRotate180(System.String,System.String)">
	<summary>
  Performs a lossless 180 degrees rotation on a JPEG image.
  </summary>
	<param name="SrcFile">The source JPEG image.</param>
	<param name="DstFile">The destination JPEG image.</param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Performing a lossless 180 degree rotation on a JPEG image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
  
      oGdPictureImaging.JPEGLosslessRotate180("image.jpg", "image.jpg")
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JPEGLosslessRotate270(System.String,System.String)">
	<summary>
  Performs a lossless 270 degrees rotation on a JPEG image.
  </summary>
	<param name="SrcFile">The source JPEG image.</param>
	<param name="DstFile">The destination JPEG image.</param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Performing a lossless 270 degree rotation on a JPEG image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
  
      oGdPictureImaging.JPEGLosslessRotate270("image.jpg", "image.jpg")
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.JPEGLosslessCrop(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Performs a lossless crop on a JPEG image.
  </summary>
	<param name="SrcFile">The source JPEG image.</param>
	<param name="DstFile">The destination JPEG image.</param>
	<param name="Left">The left position in pixel of the area to crop.</param>
	<param name="Top">The top position in pixel of the area to crop.</param>
	<param name="Width">The width in pixel of the area to crop.</param>
	<param name="Height">The height in pixel of the area to crop.</param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Performing a lossless crop on a JPEG image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
  
      oGdPictureImaging.JPEGLosslessCrop("image.jpg", "image.jpg", 10, 10, 100, 100)
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetLastPath">
	<summary>
  Returns the path of the latest loaded or saved file.
  </summary>
	<returns>
  The latest loaded or saved file path.
  </returns>
	<example>
 Prompt the user to select a bitmap to open and retrieve the path of the selected file.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
  
      Dim ImageID as Integer = oGdPictureImaging.CreateGdPictureImageFromFile("") 'Specifying empty string prompts the user to select a file
      If ImageID &gt; 0 then
         Msgbox "File loaded: " + oGdPictureImaging.GetLastPath()
      End If
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IsCMYKFile(System.String)">
	<summary>
  Checks if an image file is CMYK color space based.
  </summary>
	<param name="FilePath">The path of the file to open. </param>
	<returns>
  True if the specified image file is using CMYK color space, else False.
  </returns>
	<example>
 Knowing whether an image file uses CMYK color profile.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImgIsCMYK As Boolean
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
  
      ImgIsCMYK = oGdPictureImaging.IsCMYKFile("c:\\image.jpg")
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetDocumentFormatFromFile(System.String)">
	<summary>
  Returns the format of a document from its path.
  </summary>
	<param name="FilePath">The file path. </param>
	<returns>
  A member of the DocumentFormat enumeration.
  </returns>
	<example>
  Retrieving the Document Format to the image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImgDocumentFormat As DocumentFormat
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImgDocumentFormat = oGdPictureImaging.GetDocumentFormatFromFile("c:\\image.jpg")
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ClearGdPicture">
	<summary>
  Forces GdPicture to release all Bitmap and all memory used by GdPicture.NET.
  </summary>
	<remarks>
  This function is not thread-safe !!
  </remarks>
	<example>
 Using ClearGdPicture()
 
 <code lang="vb.net">
     Dim oGdPictureImaging As New GdPictureImaging
     GdPictureImaging.ClearGdPicture()
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SupportFunc(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@,System.Int32@,System.String@,System.String@,System.String@)">
	<summary>
  Used for GdPicture technical support purpose.
  </summary>
</member><member name="M:GdPicture.GdPictureImaging.ResetROI">
	<summary>
  Resets the region of interest.
  </summary>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<example>
  Resetting ROI
  The following code assumes that the ROI has been previously set
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      oGdPictureImaging.ResetROI()
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  Defines the current region of interest.
  </summary>
	<param name="Left">left pixel position of the region of interest. </param>
	<param name="Top">Top pixel position of the region of interest. </param>
	<param name="Width">Width in pixel of the region of interest. </param>
	<param name="Height">Height in pixel pixel position of the region of interest. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<remarks>
  The upper-left corner of the image have (0, 0) coordinate.
  </remarks>
	<example>
  Setting ROI to specify area of image processing to add noise.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.SetROI(0, 0, 200, 200)
      oGdPictureImaging.FxAddNoise(ImageID)
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.CountColor(System.Int32,System.Drawing.Color)">
	<summary>
  Counts the number of pixel that have a specific color on a GdPicture image or into an area of a
  GdPicture image defined by SetROI() function.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="PickColor">Color Object. You can build a Color Object using the ARGB() function.
                          Color to count. </param>
	<returns>
  The number of pixel that match the color.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
	<remarks>
  Use the GetStat() function to check if this function has completed successfully.
  </remarks>
	<example>
  Counting the number of pixels that have the color Green.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim GreenCount As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      GreenCount = oGdPictureImaging.CountColor(ImageID, oGdPictureImaging.ARGB(255, 0,255, 0))
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetAverageColor(System.Int32)">
	<summary>
  Returns the average color for a GdPicture image or for an area of a GdPicture image defined by
  SetROI() function.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  Color Object. You can build a Color Object using the ARGB() function. The average color.
  </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)"/>
	<seealso cref="M:GdPicture.GdPictureImaging.ResetROI"/>
	<remarks>
  Use the GetStat() function to check if this function has completed successfully.
  </remarks>
	<example>
  Retrieving the average color of the pixels of an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
      Dim AverageColor As Color
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      AverageColor = oGdPictureImaging.GetAverageColor(ImageID)
  
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetVersion">
	<summary>
  This function returns the GdPicture source code version used in the following format M.mrrr where 'M' describes the major version, 'm' the medium version and 'rrr' the release number.
  </summary>
	<returns>
  Double. 
  </returns>
	<example>
 Retrieving the version of the GdPicture source code used.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim Version As Double

     Version = oGdPictureImaging.GetVersion()
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Encode64String(System.String)">
	<summary>
  This function returns an encoded string using the base 64 encoding algorithm.
  </summary>
	<param name="StringToEncode">The string to encode. </param>
	<returns>
  the encoded 
  </returns>
	<example>
  Encoding and Deconding a string via the 64 encoding algorithm.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Actual As String
      Dim Code As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      Actual = "GdPicture Imaging"
  
      Code =  oGdPictureImaging.Encode64String(Actual)
      Actual = oGdPictureImaging.Decode64String(Code)
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.Decode64String(System.String)">
	<summary>
  This function returns a decoded string using the base 64 encoding algorithm.
  </summary>
	<param name="StringToDecode">The string to decode. </param>
	<returns>
  the decoded 
  </returns>
	<example>
  Encoding and Deconding a string via the 64 encoding algorithm.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Actual As String
      Dim Code As String
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      Actual = "GdPicture Imaging"
  
      Code =  oGdPictureImaging.Encode64String(Actual)
      Actual = oGdPictureImaging.Decode64String(Code)
  
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
  This function returns the distance in inches between 2 points of a GdPicture image.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Left1">Specifies the x-coordinate of the first point in pixel. </param>
	<param name="Top1">Specifies the y-coordinate of the first point in pixel. </param>
	<param name="Left2">Specifies the x-coordinate of the second point in pixel. </param>
	<param name="Top2">Specifies the y-coordinate of the second point in pixel. </param>
	<returns>
  Double. 
  </returns>
	<example>
  Calculating the distance between two points in an image.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Distance As Double
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      Distance = oGdPictureImaging.GetDistance(ImageID, 50, 100, 64, 215)
 
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.UploadFileToFTP(System.String,System.String,System.String,System.String,System.String,System.Int32)">
	<summary>
  Uploads a file to a distant FTP server.
  </summary>
	<param name="FilePath">The path of the file to upload into the distant ftp server. </param>
	<param name="Host">The host server ie: ftp.com </param>
	<param name="Path">The image file path to create into the distant server ie:
                     /images/nature.jpg </param>
	<param name="Login">User Login. </param>
	<param name="Password">User Password. </param>
	<param name="FTPPort">The FTP port number used. Usually 21. </param>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
  Uploading Image to a distant FTP Server
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      oGdPictureImaging.UploadFileToFTP("c:\\/images", "ftp.com", "d:/images/img.jpg", "GdPictureUser", "Password123", 21 )
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetHttpTransfertBufferSize(System.Int32)">
	<summary>
  Changes the default buffer size used by the CreateGdPictureImageFromHTTP() function. Default used is
  4096.
  </summary>
	<param name="Buffersize">New buffer size. ex 1024, 2048, 4096, 8192 etc </param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromHTTP(System.String,System.String,System.Int32)"/>
	<example>
  Defining HTTP transfer Buffer Size to 1024
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      oGdPictureImaging.SetHttpTransfertBufferSize(1024)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ClearImage(System.Int32,System.Int32)">
	<summary>
  Clears a GdPicture image with a custom color.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Color">Color value. You can obtain a suitable value by using the ARGBI() function. Color
                           to set as background. </param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Using ClearImage with Color Green.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.ClearImage(ImageID, oGdPictureImaging.ARGBI(255, 0, 255, 0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPictureImaging.ClearImage(System.Int32,System.Drawing.Color)">
	<summary>
  Clears a GdPicture image with a custom color.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Color">Color Object. You can build a Color Object using the ARGB() function. Color
                           to set as background. </param>
	<returns>
  A member of the GdPictureStatus enumeration. 
  </returns>
	<example>
  Using ClearImage with Color Green.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim ImageID As Integer
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
  
      oGdPictureImaging.ClearImage(ImageID, oGdPictureImaging.ARGB(255, 0, 255, 0))
  
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\\test.png")
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
	<seealso cref="M:GdPicture.GdPictureImaging.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPictureImaging.SetFtpPassiveMode(System.Boolean)">
	<summary>
  Defines if the FTP transfer mode is Passive or not.
  </summary>
	<param name="PassiveMode">True for passive FTP transfer mode, else False. </param>
	<seealso cref="M:GdPicture.GdPictureImaging.CreateGdPictureImageFromFTP(System.String,System.String,System.String,System.String,System.Int32)"/>
	<example>
  Defining FTP transfer mode as Passive
  <code lang="vb.net">
      Dim oGdPictureImaging As New GdPictureImaging
      oGdPictureImaging.SetFtpPassiveMode(True)
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.ForceImageValidation(System.Int32)">
	<summary>
 This function Forces the validation of an image, meaning it can repair an invalid bitmap in memory
 
 like an invalid buffer length.
 
 
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Using ForceImageValidation.
 
 <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     oGdPictureImaging.ForceImageValidation(ImageID)
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.GetStat">
	<summary>
  Returns the last GdPicture Status.
  </summary>
	<returns>
  A member of the GdPictureStatus enumeration.
  </returns>
	<example>
 Using GetStat to validate image creation
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromClipboard()
     If Imaging1.GetStat  0 Then
            MsgBox("There is no bitmap in the clipboard")
     Else
            oGdPictureImaging.ReleaseGdPictureImage(ImageID)
     End If
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IsGrayscale(System.Int32)">
	<summary>
 Determines whether a GdPicture image or the area defined by SetROI() function is Gray. or not
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 True if it is a grayscale image, else False.
 </returns>
	<remarks>
 Use the GetStat() function to check if this function has completed successfully.
 </remarks>
	<example>
 Determining whether an image is gray or not.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Gray As Boolean
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Gray = oGdPictureImaging.IsGrayscale(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IsNegative(System.Int32)">
	<summary>
 Determines whether a GdPicture image (document) is negative.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 True if it is a Negative image, else False.
 </returns>
	<remarks>
 Use the GetStat() function to check if this function has completed successfully. 
 </remarks>
	<example>
 Determining whether a document is negative.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Negative As Boolean
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Negative = oGdPictureImaging.IsNegative(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IsBitonal(System.Int32)">
	<summary>
 Determines whether a GdPicture image or the area defined by SetROI() function is bitonal (black &amp;
 white) or not.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 True if it is a bitonal image, else False.
 </returns>
	<remarks>
 Use the GetStat() function to check if this function has completed successfully. 
 </remarks>
	<example>
 Determining whether an image is bitonal or not.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Bitonal As Boolean
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
 
     Bitonal = oGdPictureImaging.IsBitonal(ImageID)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IsBitonal(System.Int32,System.Int32)">
	<summary>
 Determines whether a GdPicture image or the area defined by SetROI() function is bitonal (black &amp;
 white) or not.
 
 This function accepts a threshold parameter which speaks to the confidence of the detection.
 
 Low Threshold values will require high confidence for the image to be determined as bitonal, and high
 values will require low confidence for the image to be determined as bitonal.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Threshold">Threshold between 0 (max confidence) and 765 (min confidence). A value near or
                         higher than 50 is highly suggested. </param>
	<returns>
 True if it is a bitonal image, else False.
 </returns>
	<remarks>
 Use the GetStat() function to check if this function has completed successfully.
 </remarks>
	<example>
 Determining whether an image is bitonal or not by using a threshold value within the suggested range.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim ImageID As Integer
     Dim Bitonal As Boolean
     Dim Threshold As Integer
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("")
     Threshold = 80
 
     Bitonal = oGdPictureImaging.IsBitonal(ImageID, Threshold)
 
     oGdPictureImaging.ReleaseGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.IsBlank(System.Int32)">
	<summary>
  Returns True if a GdPicture image or the area defined by SetROI() function is Blank.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
  True if it is a blank image, else False.
  </returns>
	<remarks>
  Use the GetStat() function to check if this function has completed successfully.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.IsBlank(System.Int32,System.Single)">
	<summary>
  Detects if a GdPicture image or the area defined by SetROI() function is Blank.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Maximum percentage of blank pixels. Suggested value is in the range [99.0 - 99.5]. Most of the
                           time, we consider that a page with more than 99% of Blank pixels is blank.</param>
	<returns>
  True if it is a blank image, else False.
  </returns>
	<remarks>
  Use the GetStat() function to check if this function has completed successfully.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.IsBlank(System.Int32,System.Single,System.Boolean)">
	<summary>
  Detects a GdPicture image or the area defined by SetROI() function is Blank, with option to account for margins.
  </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<param name="Confidence">Maximum percentage of blank pixels. Suggested value is in the range [99.0 - 99.5]. Most of the
                           time, we consider that a page with more than 99% of Blank pixels is blank.</param>
	<param name="AccountForMargins">Defines if the algorithm must drop the margins during the calculation. Yields more accurate results for images with margins.</param>
	<returns>
  True if it is a blank image, else False.
  </returns>
	<remarks>
  Use the GetStat() function to check if this function has completed successfully.
  </remarks>
</member><member name="M:GdPicture.GdPictureImaging.GetDesktopHwnd">
	<summary>
  Returns the handle of the Windows desktop window. The desktop window is the one which covers the
  entire screen. The desktop window is the area on top of which all icons and other windows are
  painted.
  </summary>
	<returns>
  The desktop Windows handle.
  </returns>
	<example>
  Creating a GdPicture Image of the Desktop.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      Dim oGdPictureImaging As New GdPictureImaging
      Dim Desktop As IntPtr
  
      Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
      oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
  
      Desktop = oGdPictureImaging.GetDesktopHwnd()
      ImageID = oGdPictureImaging.CreateGdPictureImageFromHwnd(Desktop)
 
      oGdPictureImaging.ReleaseGdPictureImage(ImageID)
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.SetLicenseNumber(System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member><member name="M:GdPicture.GdPictureImaging.SetLicenseNumberUpgrade(System.String,System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member><member name="M:GdPicture.GdPictureImaging.SetLicenseNumberOCRTesseract(System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member><member name="M:GdPicture.GdPictureImaging.SetLicenseNumber1DBarcodeRecognition(System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member><member name="M:GdPicture.GdPictureImaging.SetLicenseNumberJBIG2Encoder(System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member><member name="M:GdPicture.GdPictureImaging.SetLicenseNumberFormsProcessing(System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member><member name="M:GdPicture.GdPictureImaging.SetLicenseNumberDataMatrixBarcodeRecognition(System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member><member name="M:GdPicture.GdPictureImaging.DALoadFromFile(System.String)">
	<summary>
 Loads a bitmap from a file in Direct Access Mode. Direct Access Mode allows to open a bitmap without
 decoding pixel data.
 </summary>
	<param name="FilePath">The path of the image to open. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
 If success, a pointer to a GdPicture Bitmap opened in Direct Access Mode, else Zero. Use the
 GetStat() function to determine the reason this function failed.
 </returns>
	<remarks>
 Supported formats are currently TIFF, BMP, CUT, DDS, EXR, HDR, ICO, JPEG, PCD, PCX, PFM, PNG, PNM, PSD,
 RAS, RAW, TGA and XPM
 </remarks>
	<seealso cref="M:GdPicture.GdPictureImaging.DAClose(System.IntPtr)"/>
	<example>
 Loading a Direct Access Bitmap from File, get bitdepth and then closing it.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim DABitmap As IntPtr
 
     DABitmap = oGdPictureImaging.DALoadFromFile("")
 
     MsgBox(Imaging1.DAGetBitDepth(DABitmap))
     oGdPictureImaging.DAClose(DABitmap)
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DAClose(System.IntPtr)">
	<summary>
 Closes a Direct Access Bitmap previously opened by the DALoadFromFile method.
 </summary>
	<param name="DABitmap">The Direct Access Bitmap Handle.</param>
	<seealso cref="M:GdPicture.GdPictureImaging.DALoadFromFile(System.String)"/>
	<example>
 Loading a Direct Access Bitmap from File, get bitdepth and then closing it.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim DABitmap As IntPtr
 
     DABitmap = oGdPictureImaging.DALoadFromFile("")
 
     MsgBox(Imaging1.DAGetBitDepth(DABitmap))
     oGdPictureImaging.DAClose(DABitmap)
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DAGetWidth(System.IntPtr)">
	<summary>
 Returns the with in pixel of a Direct Access Bitmap previously opened by the DALoadFromFile
 method.
 </summary>
	<param name="DABitmap">The Direct Access Bitmap Handle.</param>
	<returns>
 The width of the bitmap.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.DALoadFromFile(System.String)"/>
	<example>
 Obtaining the Width of a Direct Access Bitmap.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim DABitmap As IntPtr
     Dim Width As Integer
 
     DABitmap = oGdPictureImaging.DALoadFromFile("")
 
     Width = oGdPictureImaging.DAGetWidth(DABitmap)
 
     oGdPictureImaging.DAClose(DABitmap)
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DAGetHeight(System.IntPtr)">
	<summary>
 Returns the height in pixel of a Direct Access Bitmap previously opened by the DALoadFromFile
 method.
 </summary>
	<param name="DABitmap">The Direct Access Bitmap Handle.</param>
	<returns>
 The height of the bitmap.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.DALoadFromFile(System.String)"/>
	<example>
 Obtaining the Height of a Direct Access Bitmap.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim DABitmap As IntPtr
     Dim Height As Integer
 
     DABitmap = oGdPictureImaging.DALoadFromFile("")
 
     Height = oGdPictureImaging.DAGetHeight(DABitmap)
 
     oGdPictureImaging.DAClose(DABitmap)
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DAGetBitDepth(System.IntPtr)">
	<summary>
 Returns the bit depth of a Direct Access Bitmap previously opened by the DALoadFromFile
 method.
 </summary>
	<param name="DABitmap">The Direct Access Bitmap Handle.</param>
	<returns>
 The bit depth of the bitmap.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.DALoadFromFile(System.String)"/>
	<example>
 Obtaining the bitdepth of a direct access bitmap.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim DABitmap As IntPtr
     Dim BitDepth As Integer
 
     DABitmap = oGdPictureImaging.DALoadFromFile("")
 
     BitDepth = oGdPictureImaging.DAGetBitDepth(DABitmap)
 
     oGdPictureImaging.DAClose(DABitmap)
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DAGetColorSpace(System.IntPtr)">
	<summary>
 Returns the color space of a Direct Access Bitmap previously opened by the DALoadFromFile
 method.
 </summary>
	<param name="DABitmap">The Direct Access Bitmap Handle.</param>
	<returns>
 A member of the ImageColorSpace enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.DALoadFromFile(System.String)"/>
	<example>
 Obtaining the Color Space of a Direct Access Bitmap.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim DABitmap As IntPtr
     Dim ColorSpace As ImageColorSpace
 
     DABitmap = oGdPictureImaging.DALoadFromFile("")
 
     ColorSpace = oGdPictureImaging.DAGetColorSpace(DABitmap)
 
     oGdPictureImaging.DAClose(DABitmap)
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPictureImaging.DAHasICCProfile(System.IntPtr)">
	<summary>
 Returns if a Direct Access Bitmap previously opened by the DALoadFromFile method has a color
 profile.
 </summary>
	<param name="DABitmap">The Direct Access Bitmap Handle.</param>
	<returns>
 True if the bitmap has a color profile, else false
 </returns>
	<seealso cref="M:GdPicture.GdPictureImaging.DALoadFromFile(System.String)"/>                                                                    \
 <example>
 Obtaining whether a Direct Access Bitmap has an ICC Profile.
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdPictureImaging As New GdPictureImaging
     Dim DABitmap As IntPtr
     Dim HasICC As Boolean
 
 
     DABitmap = oGdPictureImaging.DALoadFromFile("")
 
     HasICC = oGdPictureImaging.DAHasICCProfile(DABitmap)
 
     oGdPictureImaging.DAClose(DABitmap)
 
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)">
	<summary>
 Loads a PDF document from a file.
 </summary>
	<param name="FilePath">The PDF path.</param>
	<param name="LoadInMemory">Defines if the full content of the document must be copied into the
 memory. Copying document in memory results on a higher document
 manipulation performance but consumes memory. This also permits to load
 then save the same document from/to the same location.</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<remarks>
 Sometime PDF can be password protected. You can use the IsEncrypted function to determine if a PDF is
 encrypted or not. If encrypted, you should use the SetPassword to decode it with the user or owner
 password.
 </remarks>
	<example>
  How to compress and pack existing PDF 
  <code lang="c#">
   GdPicturePDF oGdPicturePDF = new GdPicturePDF();
   oGdPicturePDF.LoadFromFile(@"c:Input.pdf", false);
   oGdPicturePDF.EnableCompression(true);
   oGdPicturePDF.SaveToFile(@"c:\\compressed.pdf", false);
   oGdPicturePDF.SaveToFile(@"c:\\compressed_pack.pdf", true);
   oGdPicturePDF.EnableCompression(false);
   oGdPicturePDF.SaveToFile(@"c:\\uncompressed.pdf", false);
   oGdPicturePDF.SaveToFile(@"c:\\uncompressed_pack.pdf", true);
   oGdPicturePDF.CloseDocument();
  </code>
	</example>
	<seealso cref="M:GdPicture.GdPicturePDF.IsEncrypted"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetPassword(System.String)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.CloseDocument"/>
</member><member name="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)">
	<summary>
 Loads a PDF document from a Stream object.
 </summary>
	<param name="Stream">The Stream object. The stream must be kept open for subsequent use.</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<remarks>
 Sometime PDF can be password protected. You can use the IsEncrypted function to determine if
 a PDF is encrypted or not. If encrypted, you should use the SetPassword to decode it with the user or owner password.
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.GetEncryptionScheme"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetPassword(System.String)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.CloseDocument"/>
</member><member name="M:GdPicture.GdPicturePDF.LoadFromIStream(System.Runtime.InteropServices.ComTypes.IStream)">
	<summary>
 Loads a PDF document from an IStream object.
 </summary>
	<param name="Stream">The IStream object. The stream must be kept open for subsequent use.</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<remarks>
 Sometime PDF can be password protected. You can use the IsEncrypted function to determine if
 a PDF is encrypted or not. If encrypted, you should use the SetPassword to decode it with the user or owner password.
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.GetEncryptionScheme"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetPassword(System.String)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.CloseDocument"/>
</member><member name="M:GdPicture.GdPicturePDF.NewPDF">
	<summary>
 Starts a new empty PDF document.
 
 Warning: a newly created GdPicturePDF object does not automatically create a new empty document.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.NewPDF(System.Boolean)">
	<summary>
 Starts a new empty PDF document.
 
 Warning: a newly created GdPicturePDF object does not automatically create a new empty document.
 </summary>
	<param name="PDFA">True to start a new PDF/A 1-b, or false to start a regular PDF.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.CloseDocument">
	<summary>
 Releases the PDF document from the memory.
 </summary>
	<returns>
 True if the PDF has been successfully released, else False.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
</member><member name="M:GdPicture.GdPicturePDF.RemoveBookMarks">
	<summary>
 Removes all bookmarks of the PDF.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetEncryptionScheme">
	<summary>
 Returns if any, the encryption scheme used to encode the PDF.
 </summary>
	<returns>
 The encryption scheme used to encode the PDF. A member of the PdfEncryption enumeration.
 </returns>
	<remarks>
 Before using this function on an encrypted PDF, make sure it has been decoded using the SetPassword function.
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetPassword(System.String)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.IsEncrypted"/>
</member><member name="M:GdPicture.GdPicturePDF.IsEncrypted">
	<summary>
 Returns if the PDF is encrypted or not. The SetPassword can be used to decode encrypted
 documents.
 </summary>
	<returns>
 True if the PDF is encrypted, else False.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetEncryptionScheme"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetPassword(System.String)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetPassword(System.String)">
	<summary>
 Decodes the encrypted PDF specifying a password.
 </summary>
	<param name="PassWord">The password to be used to decode the document.</param>
	<returns>
 True if the PDF has been successfully decoded, else False.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.IsEncrypted"/>
</member><member name="M:GdPicture.GdPicturePDF.GetRight(GdPicture.PdfRight)">
	<summary>
 Returns information about usage right of the current PDF.
 </summary>
	<param name="Right">A member of the PdfRight enumeration.</param>
	<returns>
 True if the specified right is enabled, else False.
 </returns>
	<remarks>
 Before using this function on an encrypted PDF, make sure it has been decoded using the SetPassword
 function.
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.IsEncrypted"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetPassword(System.String)"/>
</member><member name="M:GdPicture.GdPicturePDF.GetPDFAConformance">
	<summary>
 Returns the PDF/A conformance of the PDF.
 </summary>
	<returns>
 0: non PDF/A,  1: PDF/A-A,  2: PDF/A-B,  9: Unknown.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.IsLinearized">
	<summary>
 Returns information about linearization of the PDF.
 </summary>
	<returns>
 Trus if the PDF is linearized, else False.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetAuthor">
	<summary>
 Returns the author of the PDF.
 </summary>
	<returns>
 The PDF author.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetTitle">
	<summary>
 Returns the title of the PDF.
 </summary>
	<returns>
 The PDF title.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetSubject">
	<summary>
 Returns the subject of the PDF.
 </summary>
	<returns>
 The PDF subject.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetKeywords">
	<summary>
 Returns the keywords of the PDF.
 </summary>
	<returns>
 The PDF keywords.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetCreator">
	<summary>
 Returns the creator of the PDF.
 </summary>
	<returns>
 The PDF creator.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetProducer">
	<summary>
 Returns the producer of the PDF.
 </summary>
	<returns>
 The PDF producer.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetCreationDate">
	<summary>
 Returns the date of creation of the PDF.
 </summary>
	<returns>
 The PDF date of creation.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetModificationDate">
	<summary>
 Returns the modification date of the PDF.
 </summary>
	<returns>
 The PDF modification date.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetVersion">
	<summary>
 Returns the version of the PDF.
 </summary>
	<returns>
 The PDF version.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetMetadata">
	<summary>
 Returns the Metadata of the PDF.
 </summary>
	<returns>
 The PDF Metadata.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.SetTitle(System.String)">
	<summary>
 Sets the Title of the PDF.
 </summary>
	<param name="Title">The Title.</param>
</member><member name="M:GdPicture.GdPicturePDF.SetAuthor(System.String)">
	<summary>
 Sets the Author of the PDF.
 </summary>
	<param name="Author">The Author.</param>
</member><member name="M:GdPicture.GdPicturePDF.SetProducer(System.String)">
	<summary>
 Sets the producer of the PDF.
 </summary>
	<param name="Producer">The Producer.</param>
</member><member name="M:GdPicture.GdPicturePDF.SetCreator(System.String)">
	<summary>
 Sets the creator of the PDF.
 </summary>
	<param name="Creator">The Creator.</param>
</member><member name="M:GdPicture.GdPicturePDF.SetSubject(System.String)">
	<summary>
 Sets the Subject of the PDF.
 </summary>
	<param name="Subject">The Subject.</param>
</member><member name="M:GdPicture.GdPicturePDF.SetKeyWords(System.String)">
	<summary>
 Sets the KeyWords of the PDF.
 </summary>
	<param name="KeyWords">The KeyWords.</param>
</member><member name="M:GdPicture.GdPicturePDF.SetMetadata(System.String)">
	<summary>
 Sets the Metadata of the PDF.
 </summary>
	<param name="XMP">The metdata.</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.SaveToFile(System.String)">
	<summary>
 Saves the PDF document to a file.
 </summary>
	<param name="FilePath">The path to save the document. If the specified file already exists the
                        component will try to overwrite it.<para></para>You can overwrite the
                        currently opened file but only if the document has been loaded in memory (see
                        LoadInMemory parameter of the loading methods).</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<example>
  How to compress and pack existing PDF 
  <code lang="c#">
   GdPicturePDF oGdPicturePDF = new GdPicturePDF();
   oGdPicturePDF.LoadFromFile(@"c:Input.pdf", false);
   oGdPicturePDF.EnableCompression(true);
   oGdPicturePDF.SaveToFile(@"c:\\compressed.pdf", false);
   oGdPicturePDF.SaveToFile(@"c:\\compressed_pack.pdf", true);
   oGdPicturePDF.EnableCompression(false);
   oGdPicturePDF.SaveToFile(@"c:\\uncompressed.pdf", false);
   oGdPicturePDF.SaveToFile(@"c:\\uncompressed_pack.pdf", true);
   oGdPicturePDF.CloseDocument();
  </code>
	</example>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
</member><member name="M:GdPicture.GdPicturePDF.SaveToFile(System.String,System.Boolean)">
	<summary>
 Saves the PDF document to a file.
 </summary>
	<param name="FilePath">The path to save the document. If the specified file already exists the
                        component will try to overwrite it.<para></para>You can overwrite the
                        currently opened file but only if the document has been loaded in memory
                        (see LoadInMemory parameter of the loading methods).</param>
	<param name="PackDocument">Defines if the library have to pack the produced document to reduce its
                            size. If true, the saving process can be slower with some documents.</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<example>
  How to compress and pack existing PDF 
  <code lang="c#">
   GdPicturePDF oGdPicturePDF = new GdPicturePDF();
   oGdPicturePDF.LoadFromFile(@"c:Input.pdf", false);
   oGdPicturePDF.EnableCompression(true);
   oGdPicturePDF.SaveToFile(@"c:\\compressed.pdf", false);
   oGdPicturePDF.SaveToFile(@"c:\\compressed_pack.pdf", true);
   oGdPicturePDF.EnableCompression(false);
   oGdPicturePDF.SaveToFile(@"c:\\uncompressed.pdf", false);
   oGdPicturePDF.SaveToFile(@"c:\\uncompressed_pack.pdf", true);
   oGdPicturePDF.CloseDocument();
  </code>
	</example>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
</member><member name="M:GdPicture.GdPicturePDF.SaveToFile(System.String,GdPicture.PdfEncryption,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Saves the PDF document to a file with encryption. Encryption is not allowed for PDF/A.
 </summary>
	<param name="FilePath">The path to save the document. If the specified file already exists
                        the component will try to overwrite it.<para></para>You can overwrite
                        the currently opened file but only if the document has been loaded in
                        memory (see LoadInMemory parameter of the loading methods).</param>
	<param name="EncryptionScheme">The encryption scheme to use. Warning: AES 256 is not yet supported.</param>
	<param name="UserPass">The user password for the PDF. Can be an empty string.</param>
	<param name="OwnerPass">The owner password for the PDF. Can be an empty string.</param>
	<param name="CanPrint">Allows the user to print the document. </param>
	<param name="CanCopy">Allows the user to copy text and graphics from the document. </param>
	<param name="CanModify">Allows the user to edit the document. </param>
	<param name="CanAddNotes">Allows the user to add annotations. </param>
	<param name="CanFillFields">Allows the user to fill in form fields. Only works with 128-bit
                             encryption. </param>
	<param name="CanCopyAccess">Enables copying for use with accessibility features. Only works with
                             128-bit encryption. </param>
	<param name="CanAssemble">Allows the user to assemble the document. Only works with 128-bit
                           encryption. </param>
	<param name="CanPrintFull">Allows high resolution printing of the document. Only works with
                            128-bit encryption. </param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
</member><member name="M:GdPicture.GdPicturePDF.SaveToFileInc(System.String)">
	<summary>
 Saves the PDF document to a file, using incremental updates. Incremental saving (or incremental
 updates) produces fast save and document content persistence but produces bigger files than standard
 saving.
 
 This function must be used on non-encrypted documents only! We suggest to use this method only if you
 are doing small modification on large documents. IE: rotating a page for swapping some pages.
 
 From PDF References: The contents of a PDF file can be updated incrementally without rewriting the
 entire file. Changes are appended to the end of the file, leaving its original contents intact. The
 main advantage to updating a file in this way is that small changes to a large document can be saved
 quickly.
 </summary>
	<param name="FilePath">The path to save the document. If the specified file already exists the
                        component will try to overwrite it.<para></para>You can overwrite the
                        currently opened file but only if the document has been loaded in memory (see
                        LoadInMemory parameter of the loading methods).</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
</member><member name="M:GdPicture.GdPicturePDF.SaveToStreamInc(System.IO.Stream)">
	<summary>
 Saves the PDF document to a stream, using incremental updates. Incremental saving (or incremental
 updates) produces fast save and document content persistence but produces bigger files than standard
 saving.
 
 This function must be used on non-encrypted documents only! We suggest to use this method only if you
 are doing small modification on large documents. IE: rotating a page for swapping some pages.
 
 From PDF References: The contents of a PDF file can be updated incrementally without rewriting the
 entire file. Changes are appended to the end of the file, leaving its original contents intact. The
 main advantage to updating a file in this way is that small changes to a large document can be saved
 quickly.
 </summary>
	<param name="Stream">The stream to save the document.</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
</member><member name="M:GdPicture.GdPicturePDF.SaveToStream(System.IO.Stream)">
	<summary>
 Saves the PDF document to a stream.
 </summary>
	<param name="Stream">The stream to save the document.</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
</member><member name="M:GdPicture.GdPicturePDF.SaveToStream(System.IO.Stream,System.Boolean)">
	<summary>
 Saves the PDF document to a stream.
 </summary>
	<param name="Stream">The stream to save the document.</param>
	<param name="PackDocument">Defines if the library have to pack the produced document to reduce its size. If true, the saving process can be slower.</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
</member><member name="M:GdPicture.GdPicturePDF.SaveToStream(System.IO.Stream,GdPicture.PdfEncryption,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Saves the PDF document to a stream with encryption. Encryption is not allowed for PDF/A.
 </summary>
	<param name="Stream">The stream to save the document.</param>
	<param name="EncryptionScheme">The encryption scheme to use. Warning: AES 256 is not yet supported.</param>
	<param name="UserPass">The user password for the PDF. Can be an empty string.</param>
	<param name="OwnerPass">The owner password for the PDF. Can be an empty string.</param>
	<param name="CanPrint">Allows the user to print the document. </param>
	<param name="CanCopy">Allows the user to copy text and graphics from the document. </param>
	<param name="CanModify">Allows the user to edit the document. </param>
	<param name="CanAddNotes">Allows the user to add annotations. </param>
	<param name="CanFillFields">Allows the user to fill in form fields. Only works with 128-bit
                             encryption. </param>
	<param name="CanCopyAccess">Enables copying for use with accessibility features. Only works with
                             128-bit encryption. </param>
	<param name="CanAssemble">Allows the user to assemble the document. Only works with 128-bit
                           encryption. </param>
	<param name="CanPrintFull">Allows high resolution printing of the document. Only works with
                            128-bit encryption. </param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
</member><member name="M:GdPicture.GdPicturePDF.EnableCompression(System.Boolean)">
	<summary>
 Determines if the PDF engine must compress PDFs during saving operation (compressed by default).
 </summary>
	<param name="Compress">True to compress generated PDF document, else False.</param>
</member><member name="M:GdPicture.GdPicturePDF.DigiSign(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Saves and applies digital signature to the PDF. Warning: This function automatically closes the PDF
 document.
 </summary>
	<param name="DstPDFPath">The path to save to PDF.</param>
	<param name="CerthPath">The patch of the digital certificate to use.</param>
	<param name="Password">The certificate password.</param>
	<param name="Reason">The reason of the signature. Can be an empty string.</param>
	<param name="Location">The location where the signature is applied. Can be an empty string.</param>
	<param name="ContactInfo">Information about the signer. Can be an empty string.</param>
	<param name="SignerName">The signer name. If empty, "GdPicture" will be used.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
  Applying digital signature to an existing document
  <code lang="vb.net">
     Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
       Dim oGdPicturePDF As New GdPicturePDF


       oGdPicturePDF.LoadFromFile("c:\\test.pdf", False)
       oGdPicturePDF.DigiSign("c:\\signed.pdf", "c:\\test.pfx", "certificat_password", "The Reason", "The Location", "The Contact Info", "The Signer Name")
       oGdPicturePDF.CloseDocument()
     End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.GetFontCount">
	<summary>
 Returns the number of fonts used by the PDF.
 </summary>
	<returns>
 The number of fonts used.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontName(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontType(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontEncoding(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.GetFontName(System.Int32)">
	<summary>
 Returns the name of a fonts used by the PDF.
 </summary>
	<param name="FontIdx">The font index. Must be a value between 1 and GetFontCount.</param>
	<returns>
 The font name.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontCount"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontType(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontEncoding(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.GetFontType(System.Int32)">
	<summary>
 Returns the type of a fonts used by the PDF.
 </summary>
	<param name="FontIdx">The font index. Must be a value between 1 and GetFontCount.</param>
	<returns>
 The font type.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontCount"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontName(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontEncoding(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.GetFontEncoding(System.Int32)">
	<summary>
 Returns the encoding scheme a fonts used by the PDF.
 </summary>
	<param name="FontIdx">The font index. Must be a value between 1 and GetFontCount.</param>
	<returns>
 The encoding scheme.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontCount"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontType(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFontName(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.AddTrueTypeFont(System.String,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Adds a TrueType system font to the PDF. Only ANSI characters will be supported by using the added font.
 </summary>
	<param name="FontName">The name of the font to add.</param>
	<param name="Bold">True to set the font bold else False. </param>
	<param name="Italic">True to set the font italic else False. </param>
	<param name="Embedded">True to embed the font in the PDF as TrueType, else False. Warning: embedding the font
 to the file produces larger document.</param>
	<returns>
 Returns a Font resource name if success, else an empty string. This Font resource name can be
 subsequently used with the DrawText() function on any page of this document. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.AddTrueTypeFontU(System.String,GdPicture.FontCharSet,System.Boolean,System.Boolean)">
	<summary>
 Adds a TrueType system font to the PDF.
 
 Unicode characters drawing will be supported by using the added font.
 </summary>
	<param name="FontName">The name of the font to add.</param>
	<param name="CharSet">A member of the FontCharSet enumeration. Defines the character encoding
                       system to use.</param>
	<param name="Bold">True to set the font bold else False. </param>
	<param name="Italic">True to set the font italic else False. </param>
	<returns>
 Returns a Font resource name if success, else an empty string. This Font resource name can be
 subsequently used with the DrawText() function on any page of this document. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.AddTrueTypeFontFromFile(System.String,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Adds a TrueType font from a file to the PDF. Only ANSI characters will be supported by using the added font.
 </summary>
	<param name="FilePath">The path of the font file.</param>
	<param name="Bold">True to set the font bold else False. </param>
	<param name="Italic">True to set the font italic else False. </param>
	<param name="Embedded">True to embed the font in the PDF as TrueType, else False. Warning: embedding the font
 to the file produces larger document.</param>
	<returns>
 Returns a Font resource name if success, else an empty string. This Font resource name can be
 subsequently used with the DrawText() function on any page of this document. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.AddFontFromFileU(System.String,GdPicture.FontCharSet,System.Boolean,System.Boolean)">
	<summary>
 Adds a font from a file to the PDF. Unicode characters drawing will be supported by using the added
 font.
 
 Supported font files are:
   * .fon Font resource file.
   * .fnt Raw bitmap font file.
   * .ttf Raw TrueType file.
   * .ttc East Asian Windows: TrueType font collection.
   * .fot TrueType resource file.
   * .otf PostScript OpenType font.
   * .mmm multiple master Type1 font resource file. It must be used with .pfm and .pfb files.
   * .pfb Type 1 font bits file. It is used with a .pfm file.
   * .pfm Type 1 font metrics file. It is used with a .pfb file.
 </summary>
	<param name="FilePath">The path of the font file.<para></para>To add a font whose information comes
                        from several resource files, defines string with the file names separated by
                        a | --for example, abcxxxxx.pfm | abcxxxxx.pfb.</param>
	<param name="CharSet">A member of the FontCharSet enumeration. Defines the character encoding
                       system to use.</param>
	<param name="Bold">True to set the font bold else False. </param>
	<param name="Italic">True to set the font italic else False. </param>
	<returns>
 Returns a Font resource name if success, else an empty string. This Font resource name can be
 subsequently used with the DrawText() function on any page of this document. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.AddStandardFont(GdPicture.PdfStandardFont)">
	<summary>
 Adds a standard font (Standard Type 1 Fonts (Standard 14 Fonts)) to the PDF.
 </summary>
	<param name="StdFont">The standard font to add. A member of the PdfStandardFont enumeration.</param>
	<returns>
 Returns a Font resource name if success, else an empty string. This Font resource name can be
 subsequently used with the DrawText() function on any page of this document. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.ClearPageContent">
	<summary>
 Empties the content of the selected page. This will result in a blank page with the same dimensions.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.NewPage(System.Single,System.Single)">
	<summary>
 Adds a new page to the PDF.
 </summary>
	<param name="PageWidth">Width in current unit defined by the SetMeasurementUnit() function. </param>
	<param name="PageHeight">Height in current unit defined by the SetMeasurementUnit() function. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
</member><member name="M:GdPicture.GdPicturePDF.InsertPage(System.Single,System.Single,System.Int32)">
	<summary>
 Insert a new page to the PDF.
 </summary>
	<param name="PageWidth">Width in current unit defined by the SetMeasurementUnit() function. </param>
	<param name="PageHeight">Height in current unit defined by the SetMeasurementUnit() function. </param>
	<param name="PageNo">The position of the page to insert. Must be a value between 1 and PageCount. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
</member><member name="M:GdPicture.GdPicturePDF.ClonePage(System.Int32)">
	<summary>
 Clones a specific page of the PDF to the last position.
 </summary>
	<param name="PageNo">The page number to clone. Must be a value between 1 and page count.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
</member><member name="M:GdPicture.GdPicturePDF.ClonePage(GdPicture.GdPicturePDF,System.Int32)">
	<summary>
 Clones a specific page from a specific PDF to the current PDF. Each cloned page is inserted at the end of the document. This function can be used to merge multiple PDFs together.
 </summary>
	<param name="FromPDF">A GdPicturePDF object. The PDF source which contains the page to clone in the current PDF.</param>
	<param name="PageNo">The page number to clone. Must be a value between 1 and source PDF page count.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
</member><member name="M:GdPicture.GdPicturePDF.DeletePage(System.Int32)">
	<summary>
 Deletes a page in the PDF.
 </summary>
	<param name="PageNo">The page number to delete. Must be a value between 1 and GetPageCount.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SwapPages(System.Int32,System.Int32)">
	<summary>
 Swaps 2 pages in the PDF.
 </summary>
	<param name="Page1">The page to swap with Page2. Must be a value between 1 and GetPageCount.</param>
	<param name="Page2">The page to swap with Page1. Must be a value between 1 and GetPageCount.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
	<seealso cref="M:GdPicture.GdPicturePDF.MovePage(System.Int32,System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.MovePage(System.Int32,System.Int32)">
	<summary>
 Move a page in the PDF.
 </summary>
	<param name="PageNo">The page to move. Must be a value between 1 and GetPageCount.</param>
	<param name="Destination">The page destination. Must be a value between 1 and GetPageCount.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SwapPages(System.Int32,System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.GetPageCount">
	<summary>
 Returns the number of pages of the PDF.
 </summary>
	<returns>
 The number of pages of the PDF.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.NewPDF"/>
</member><member name="M:GdPicture.GdPicturePDF.GetPageWidth">
	<summary>
 Returns the page width in PDF point unit of the selected page of the PDF.
 </summary>
	<returns>
 The page width. Returns 0 if failed: You can use the GetStat() function to determine the reason.
 </returns>
	<remarks>
 1 point = 1/72 inch.
 * To get the page width in inches: Width = GetPageWidth() / 72
 * To get the page width in centimeters: Width = GetPageWidth() / 72 / 2.54
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageHeight"/>
</member><member name="M:GdPicture.GdPicturePDF.GetPageHeight">
	<summary>
 Returns the page height in PDF point unit of the selected page of the PDF.
 </summary>
	<returns>
 The page width. Returns 0 if failed: You can use the GetStat() function to determine the reason.
 </returns>
	<remarks>
 1 point = 1/72 inch.
 * To get the page height in inches: Width = GetPageHeight() / 72
 * To get the page height in centimeters: Width = GetPageHeight() / 72 / 2.54
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageWidth"/>
</member><member name="M:GdPicture.GdPicturePDF.GetPageBox(GdPicture.PdfPageBox,System.Single@,System.Single@,System.Single@,System.Single@)">
	<summary>
 Returns the bounds of the specified page box of the selected page of the PDF.
 </summary>
	<param name="PageBox">The page box. A member of the PdfPageBox enumeration.</param>
	<param name="Left">Returns the left position of the page box, in PDF point unit.</param>
	<param name="Top">Returns the top position of the page box, in PDF point unit.</param>
	<param name="Right">Returns the right position of the page box, in PDF point unit.</param>
	<param name="Bottom">Returns the bottom position of the page box, in PDF point unit.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 1 point = 1/72 inch.
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageWidth"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageHeight"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetPageBox(GdPicture.PdfPageBox,System.Single,System.Single,System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetPageBox(GdPicture.PdfPageBox,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Defines the bounds of a page box of the selected page of the PDF.
 </summary>
	<param name="PageBox">The page box. A member of the PdfPageBox enumeration.</param>
	<param name="Left">The left position of the page box, in PDF point unit.</param>
	<param name="Top">The top position of the page box, in PDF point unit.</param>
	<param name="Right">The right position of the page box, in PDF point unit.</param>
	<param name="Bottom">The bottom position of the page box, in PDF point unit.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 1 point = 1/72 inch.
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageWidth"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageHeight"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageBox(GdPicture.PdfPageBox,System.Single@,System.Single@,System.Single@,System.Single@)"/>
</member><member name="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)">
	<summary>
 Selects a page of the PDF.
 </summary>
	<param name="PageNo">The page number. Should be a value between 1 and GetPageCount. If the specified parameter is out of range, the nereast page will be automatically selected.</param>
	<returns>
 True if the page have been successfully selected, else False (You can use the GetStat() function to
 determine the reason this function failed).
 </returns>
	<remarks>This method can fail with password protected document not previously unlocked, or on corrupted PDF.</remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetCurrentPage"/>
</member><member name="M:GdPicture.GdPicturePDF.GetCurrentPage">
	<summary>
 Returns the current page of the PDF.
 </summary>
	<returns>
 The selected page number. A value between 1 and GetPageCount. 0 if failed: you can use the GetStat() function to determine the reason this function failed.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetPageRotation">
	<summary>
 Returns the page rotation in degrees of the current page of the PDF.
 </summary>
	<returns>
 The page rotation of the current page.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
	<seealso cref="M:GdPicture.GdPicturePDF.RotatePage(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.RotatePage(System.Int32)">
	<summary>
 Rotates the current page of the PDF by 90, 180 or 270 degrees.
 </summary>
	<param name="Rotation">Angle of rotation. Must be 90, 180 or 270.</param>
	<returns>
 The page rotation of the current page.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageRotation"/>
</member><member name="M:GdPicture.GdPicturePDF.RotatePages(System.Int32)">
	<summary>
 Rotates all pages of the PDF by 90, 180 or 270 degrees.
 </summary>
	<param name="Rotation">Angle of rotation. Must be 90, 180 or 270.</param>
	<returns>
 The page rotation of the current page.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageCount"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageRotation"/>
</member><member name="M:GdPicture.GdPicturePDF.SetPageMetadata(System.String)">
	<summary>
 Sets the Metadata of the selected page of the PDF.
 </summary>
	<param name="XMP">The metdata.</param>
	<returns>
 A member of the GdPictureStatus enumeration
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.GetPageMetadata">
	<summary>
 Gets the Metadata of the selected page of the PDF.
 </summary>
	<returns>
 The page metadata.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.RenderPageToGdPictureImage(System.Single,System.Boolean)">
	<summary>
 Renders the current page of the PDF to a GdPicture image.
 </summary>
	<param name="DPI">The resolution to use for the rendering.A value of 72
 will give the same result as Acrobat when the zoom level is 100%.Values
 over 300 will cause excessive memory usage.</param>
	<param name="RenderFormFields">Set to True to render form fields (also known as annotations), else
 False.</param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.RenderPageToGdPictureImageEx(System.Single,System.Boolean)">
	<summary>
 Renders the current page of the PDF to a GdPicture image. This function has a special behavior: If
 the page is bitmap based (a single bitmap covers all the page area) the bitmap will be extracted "as
 is" in its original bitdepth.
 </summary>
	<param name="DPI">The resolution to use for the rendering.A value of 72 will give the
                   same result as Acrobat when the zoom level is 100%.Values over 300
                   will cause excessive memory usage.</param>
	<param name="RenderFormFields">Set to True to render form fields (also known as annotations), else
                                False.</param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.RenderPageToGdPictureImageEx(System.Single,System.Boolean,System.Drawing.Imaging.PixelFormat)">
	<summary>
 Renders the current page of the PDF to a GdPicture image. This function has a special behavior: If
 the page is bitmap based (a single bitmap covers all the page area) the bitmap will be extracted "as
 is" in its original bitdepth.
 </summary>
	<param name="DPI">The resolution to use for the rendering.A value of 72 will give the
                   same result as Acrobat when the zoom level is 100%.Values over 300
                   will cause excessive memory usage.</param>
	<param name="RenderFormFields">Set to True to render form fields (also known as annotations), else
                                False.</param>
	<param name="PixelFormat">Defines the pixel format of the generated bitmap. Supported values
                           are Format24bppRgb (less memory usage) or Format32bppPArgb (best
                           speed). A member of the PixelFormat enumeration.</param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.RenderPageToGdPictureImage(System.Single,System.Boolean,System.Drawing.Imaging.PixelFormat)">
	<summary>
 Renders the current page of the PDF to a GdPicture image.
 </summary>
	<param name="DPI">The resolution to use for the rendering.A value of 72
 will give the same result as Acrobat when the zoom level is 100%.Values
 over 300 will cause excessive memory usage.</param>
	<param name="RenderFormFields">Set to True to render form fields (also known as annotations), else
 False.</param>
	<param name="PixelFormat">Defines the pixel format of the generated bitmap. Supported values are Format24bppRgb (less memory usage) or Format32bppPArgb (best speed). A member of the PixelFormat enumeration.</param>
	<returns>
 0: The image could not be created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetPageThumbnail(System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
 Creates a High Quality thumbnail (returns a GdPicture image) of custom size of the current page of the PDF.
 
 This function fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color.
 </summary>
	<param name="Width">The width of the thumbnail to create. </param>
	<param name="Height">The height of the thumbnail to create. </param>
	<param name="BackColor">Color Object. Background color of the thumbnail. </param>
	<returns>
 GdPicture Image Identifier. The Image thumbnail.
 </returns>
	<remarks>
 To delete the created GdPicture image from the memory you must use the ReleaseGdPictureImage() function of the GdPictureImaging class.
 </remarks>
</member><member name="M:GdPicture.GdPicturePDF.FlattenFormFields">
	<summary>
 Flatten form fields of the PDF document. After calling this method, all form field will be non
 editable.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetFormFieldsCount">
	<summary>
 Returns the number of available form fields on the PDF.
 </summary>
	<returns>
 The number of form fields. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetFormFieldTitle(System.Int32)">
	<summary>
 Returns the title of a specific form field of the PDF.
 </summary>
	<param name="FormIdx">The form field index, between 0 and GetFormFieldsCount() -1.</param>
	<returns>
 The title of the form field. 
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFormFieldsCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetFormFieldTitle(System.Int32,System.String)">
	<summary>
 Sets the title of a specific form field of the PDF.
 </summary>
	<param name="FormIdx">The form field index, between 0 and GetFormFieldsCount() -1.</param>
	<param name="Title">The form field title.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFormFieldsCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetFormFieldChecked(System.Int32,System.Boolean)">
	<summary>
 Sets the checked state of a specific form field of the PDF.
 </summary>
	<param name="FormIdx">The form field index, between 0 and GetFormFieldsCount() -1.</param>
	<param name="Checked">True to make the formfield checked, otherwise False.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFormFieldsCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetFormFieldChecked(System.Int32)">
	<summary>
 Gets the checked state of a specific form field of the PDF.
 </summary>
	<param name="FormIdx">The form field index, between 0 and GetFormFieldsCount() -1.</param>
	<returns>
 True if the formfield is checked, otherwise False. 
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFormFieldsCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetFormFieldValue(System.Int32)">
	<summary>
 Returns the value of a specific form field of the PDF.
 </summary>
	<param name="FormIdx">The form field index, between 0 and GetFormFieldsCount() -1.</param>
	<returns>
 The title of the form field. 
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFormFieldsCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetFormFieldPage(System.Int32)">
	<summary>
 Returns the page on which the specified form feld is attached.
 </summary>
	<param name="FormIdx">The form field index, between 0 and GetFormFieldsCount() -1.</param>
	<returns>
 The form field page owner. 
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFormFieldsCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetFormFieldValue(System.Int32,System.String)">
	<summary>
 Sets the value of a specific form field of the PDF.
 </summary>
	<param name="FormIdx">The form field index, between 0 and GetFormFieldsCount() -1.</param>
	<param name="Value">The form field value.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFormFieldsCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetFormFieldType(System.Int32)">
	<summary>
 Returns the type of a specific form field of the PDF.
 </summary>
	<param name="FormIdx">The form field index, between 0 and GetFormFieldsCount() -1.</param>
	<returns>
 A member of the PdfFormFieldType enumeration. The type of the form field. 
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFormFieldsCount"/>
</member><member name="M:GdPicture.GdPicturePDF.RemoveFormField(System.Int32)">
	<summary>
 Removes a specific form field of the PDF.
 </summary>
	<param name="FormIdx">The form field index, between 0 and GetFormFieldsCount() -1.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetFormFieldsCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetPageLinksCount">
	<summary>
 Returns the number of links available on the selected page of the PDF.
 </summary>
	<returns>
 The number of available links.
 </returns>
	<remarks>
 You can use the GetStat() function to determine if this function failed.
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetJpegQuality(System.Int32)">
	<summary>
 Changes the level of quality used to compress true color image data within the PDF.
 </summary>
	<param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
 best quality and worse compression. </param>
	<remarks>
 Jpeg quality level is available only for 8bpp grayscale and non indexed color image. This function
 has not effect on 1, 4 &amp; 8 bpp (non grayscale) image compression. 
 </remarks>
</member><member name="M:GdPicture.GdPicturePDF.SetCompressionForBitonalImage(GdPicture.PdfCompression)">
	<summary>
 Changes the compression scheme to use to compress bitonal image data within the PDF. Default is
 PdfCompressionJBIG2 if the optional GdPicture JBIG2 Encoder Plugin have been unlocked, else PdfCompressionCCITT4.
 </summary>
	<param name="Compression">A member of the PdfCompression enumeration. 
 If you select the JBIG2 compression ensure yourself to have unlocked the optional GdPicture JBIG2 Encoder Plugin first.</param>
</member><member name="M:GdPicture.GdPicturePDF.SetCompressionForColorImage(GdPicture.PdfCompression)">
	<summary>
 Changes the compression scheme to use to compress color image data within the PDF. Default is
 PdfCompressionJPEG.
 
 PdfCompressionCCITT4 and PdfCompressionJBIG2 are not allowed.
 </summary>
	<param name="Compression">a member of the PdfCompression enumeration</param>
</member><member name="M:GdPicture.GdPicturePDF.AddImageFromGdPictureImage(System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Adds an image as resource of the PDF, from a GdPicture Image. 
 </summary>
	<param name="ImageID">A GdPicture Image Identifier. The image to add within the PDF. </param>
	<param name="ImageMask">Only for 1BPP (1 Bit Per Pixel)image! Indicates whether the image shall be
 treated as an image mask (False by default).</param>
	<param name="DrawImage">If true, begin a new page and draw the added image on its whole surface.</param>
	<returns>
 Returns a Pdf image resource name if success, else an empty string. This pdf image name can be subsequently used with
 the DrawImage() function on any page of this document.
 </returns>
	<example>
  draw an image on an existing page of a pdf document 
  <code lang="vb.net">
     Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
        Dim oGdPicturePDF As New GdPicturePDF
        Dim oGdPictureImaging As New GdPictureImaging
  
  
        Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\test.tif")
  
        If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("c:\\test.pdf", True) = GdPictureStatus.OK Then
           oGdPicturePDF.SelectPage(1) 'Selecting first page
  
           Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
           oGdPictureImaging.ReleaseGdPictureImage(ImageID)
           oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
           oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
           oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
           oGdPicturePDF.SaveToFileInc("c:\\test.pdf")
           oGdPicturePDF.CloseDocument()
  
           MsgBox("Done")
        End If
     End Sub
  </code>
	</example>
	<example>
  Open an existing PDF, insert an A4 page in second page then draw an image on the whole page surface 
  <code lang="vb.net">
  Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
      Dim oGdPicturePDF As New GdPicturePDF
      Dim oGdPictureImaging As New GdPictureImaging


      Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\test.tif")

      If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("c:\\test.pdf", True) = GdPictureStatus.OK Then

         'Add the image as resource in the PDF document
         Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)

         'Insert a new blank A4 page as second page of the document.
         Dim pageWidth As Single = 8.27
         Dim pageHeight As Single = 11.69
         Dim pagePosition As Integer = 2
         oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
         oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitInch)
         oGdPicturePDF.InsertPage(pageWidth, pageHeight, pagePosition)
         oGdPicturePDF.SelectPage(pagePosition)
         'Draw the image on the PDF page
         oGdPicturePDF.DrawImage(image_res_name, 0, 0, pageWidth, pageHeight)
         oGdPicturePDF.SaveToFileInc("c:\\test.pdf")
         oGdPicturePDF.CloseDocument()

         MsgBox("Done")
      End If
   End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.AddImageFromBitmap(System.Drawing.Bitmap,System.Boolean,System.Boolean)">
	<summary>
 Adds an image as resource of the PDF, from a Bitmap object. 
 </summary>
	<param name="bitmap">A Bitmap object. The image to add within the PDF. </param>
	<param name="ImageMask">Only for 1BPP (1 Bit Per Pixel)image! Indicates whether the image shall be
 treated as an image mask (False by default).</param>
	<param name="DrawImage">If true, begin a new page and draw the added image on its whole surface.</param>
	<returns>
 Returns a Pdf image resource name if success, else an empty string. This pdf image name can be subsequently used with
 the DrawImage() function on any page of this document.
 </returns>
	<example>
  draw an image on an existing page of a pdf document 
  <code lang="vb.net">
     Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
        Dim oGdPicturePDF As New GdPicturePDF
        Dim oGdPictureImaging As New GdPictureImaging
  
  
        Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\test.tif")
  
        If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("c:\\test.pdf", True) = GdPictureStatus.OK Then
           oGdPicturePDF.SelectPage(1) 'Selecting first page
  
           Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
           oGdPictureImaging.ReleaseGdPictureImage(ImageID)
           oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
           oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
           oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
           oGdPicturePDF.SaveToFileInc("c:\\test.pdf")
           oGdPicturePDF.CloseDocument()
  
           MsgBox("Done")
        End If
     End Sub
  </code>
	</example>
	<example>
  Open an existing PDF, insert an A4 page in second page then draw an image on the whole page surface 
  <code lang="vb.net">
  Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
      Dim oGdPicturePDF As New GdPicturePDF
      Dim oGdPictureImaging As New GdPictureImaging


      Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\test.tif")

      If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("c:\\test.pdf", True) = GdPictureStatus.OK Then

         'Add the image as resource in the PDF document
         Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)

         'Insert a new blank A4 page as second page of the document.
         Dim pageWidth As Single = 8.27
         Dim pageHeight As Single = 11.69
         Dim pagePosition As Integer = 2
         oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
         oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitInch)
         oGdPicturePDF.InsertPage(pageWidth, pageHeight, pagePosition)
         oGdPicturePDF.SelectPage(pagePosition)
         'Draw the image on the PDF page
         oGdPicturePDF.DrawImage(image_res_name, 0, 0, pageWidth, pageHeight)
         oGdPicturePDF.SaveToFileInc("c:\\test.pdf")
         oGdPicturePDF.CloseDocument()

         MsgBox("Done")
      End If
   End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.DeleteImage(System.String)">
	<summary>
 Deletes an image into the current page of the PDF.
 If the specified image is used elsewhere, for example on another pages, it will also be removed on these.
 </summary>
	<param name="ImageResName">The image resource name previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName function</param>
	<example>
  Deletes the first image found on the first page of a PDF.
  <code lang="vb.net">
   Dim oGdPicturePDF As New GdPicturePDF
   oGdPicturePDF.LoadFromFile("c:\\test.pdf", False)
   oGdPicturePDF.SelectPage(1)
   Dim imageResName As String = oGdPicturePDF.GetPageImageResName(0)
   If Not (imageResName = "") Then
       oGdPicturePDF.DeleteImage(imageResName)
   End If
   oGdPicturePDF.SaveToFile("c:\\newfile.pdf")
   oGdPicturePDF.CloseDocument()
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.GetPageImageCoordinates(System.Int32,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
	<summary>
 Returns the coordinates of a specific image present on the current page.
 </summary>
	<param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1 </param>
	<param name="x0">Output parameter. The x coordinate of the bottom-left corner of the image, in current unit.</param>
	<param name="y0">Output parameter. The y coordinate of the bottom-left corner of the image, in current unit.</param>
	<param name="x1">Output parameter. The x coordinate of the bottom-right corner of the image, in current unit.</param>
	<param name="y1">Output parameter. The y coordinate of the bottom-right corner of the image, in current unit.</param>
	<param name="x2">Output parameter. The x coordinate of the top-left corner of the image, in current unit.</param>
	<param name="y2">Output parameter. The y coordinate of the top-left corner of the image, in current unit.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageImageCount"/>
	<example>
  Reducing PDF size by altering the embedded images 
  <code lang="vb.net">
            Const CONVERT_1BPP As Boolean = False 'Set true to convert all bitmap to black and white
            Const SCALE_FACTOR As Single = 2.0 'Set 1 for no scale.
            Const JPEG_QUALITY_COLOUR As Integer = 60 'between 1 and 100
            Const JPEG_QUALITY_GRAY As Integer = 30 'between 1 and 100
            Const SOURCE_PATH As String = "c:\test.pdf"
            Const DEST_PATH As String = "c:\result.pdf"

            Dim oGdPicturePDF As New GdPicturePDF
            Dim oGdPictureImaging As New GdPictureImaging


            If oGdPicturePDF.LoadFromFile(SOURCE_PATH, False) = GdPictureStatus.OK Then
                If oGdPicturePDF.IsEncrypted() Then
                    If Not oGdPicturePDF.SetPassword("") Then
                        MsgBox("password protected document")
                        Return
                    End If
                End If
                oGdPicturePDF.SetCompressionForBitonalImage(PdfCompression.PdfCompressionJBIG2)
                oGdPicturePDF.SetCompressionForColorImage(PdfCompression.PdfCompressionJPEG)
                For i As Integer = 1 To oGdPicturePDF.GetPageCount()
                    oGdPicturePDF.SelectPage(i)
                    Dim imageCount As Integer = oGdPicturePDF.GetPageImageCount
                    If imageCount &gt; 0 Then
                        For j As Integer = 0 To imageCount - 1
                            Dim x0, y0, x1, y1, x2, y2 As Single
                            oGdPicturePDF.GetPageImageCoordinates(j, x0, y0, x1, y1, x2, y2)
                            'Check that the image is not skewed
                            If y0 = y1 And x0 = x2 Then
                                Dim ImageID As Integer = oGdPicturePDF.ExtractPageImage(j + 1) 'Warning: 1-based
                                If ImageID &lt;&gt; 0 Then
                                    If CONVERT_1BPP Then
                                        oGdPictureImaging.ConvertTo1Bpp(ImageID)
                                    End If
                                    Dim bitDepth As Integer = oGdPictureImaging.GetBitDepth(ImageID)
                                    If bitDepth &gt; 8 Then
                                        oGdPicturePDF.SetJpegQuality(JPEG_QUALITY_COLOUR)
                                    Else
                                        If bitDepth = 8 Then
                                            If oGdPictureImaging.IsGrayscale(ImageID) Then
                                                oGdPicturePDF.SetJpegQuality(JPEG_QUALITY_GRAY)
                                            Else
                                                oGdPicturePDF.SetJpegQuality(JPEG_QUALITY_COLOUR)
                                            End If
                                        End If
                                    End If
                                    Dim imageResName As String = oGdPicturePDF.GetPageImageResName(j)
                                    If oGdPicturePDF.DeleteImage(imageResName) = GdPictureStatus.OK Then
                                        If SCALE_FACTOR &lt;&gt; 1.0F Then
                                            oGdPictureImaging.Scale(ImageID, 100 / SCALE_FACTOR, Drawing2D.InterpolationMode.HighQualityBicubic)
                                        End If

                                        Dim newImageResName As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
                                        oGdPicturePDF.DrawImage(newImageResName, x0, oGdPicturePDF.GetPageHeight() - y2, x1 - x0, y2 - y0)
                                    End If
                                    oGdPictureImaging.ReleaseGdPictureImage(ImageID)
                                End If
                            End If
                        Next
                    End If
                Next
                If oGdPicturePDF.SaveToFile(DEST_PATH, True) = GdPictureStatus.OK Then
                    MsgBox("done")
                Else
                    MsgBox("error saving file file: " + DEST_PATH + ". Status: " + oGdPicturePDF.GetStat.ToString)
                End If
                oGdPicturePDF.CloseDocument()
            Else
                MsgBox("Can't open file: " + SOURCE_PATH + ". Status: " + oGdPicturePDF.GetStat.ToString)
            End If
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.GetPageImageResolution(System.Int32,System.Single@,System.Single@)">
	<summary>
 Returns the vertical and horizontal resolution of a specific image present on the current page.
 </summary>
	<param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1 </param>
	<param name="HorizontalResolution">Output parameter. The horizontal image resolution.</param>
	<param name="VerticalResolution">Output parameter. The vertical image resolution.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageImageCount"/>
</member><member name="M:GdPicture.GdPicturePDF.DrawImage(System.String,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Draws an image into the current page of a PDF.
 </summary>
	<param name="ImageResName">The image resource name previously returned by the AddImageFromBitmap, AddImageFromGdPictureImage or GetPageImageResName function</param>
	<param name="DstX">The X destination of the bottom left corner of the bitmap in current unit.</param>
	<param name="DstY">The Y destination of the bottom left corner of the bitmap in current unit.</param>
	<param name="Width">Width in current unit </param>
	<param name="Height">Height in current unit </param>
	<remarks>
 If the image to draw is a Mask Image, you should define the color to use for nonstroking operation
 using the SetFillColor function. 
 
 Take care: DstX and DstY parameters are the coordinates on the bottom-left corner of the image! 
 </remarks>
	<example>
  draw an image on an existing page of a pdf document 
  <code lang="vb.net">
     Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
        Dim oGdPicturePDF As New GdPicturePDF
        Dim oGdPictureImaging As New GdPictureImaging
  
  
        Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\test.tif")
  
        If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("c:\\test.pdf", True) = GdPictureStatus.OK Then
           oGdPicturePDF.SelectPage(1) 'Selecting first page
  
           Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
           oGdPictureImaging.ReleaseGdPictureImage(ImageID)
           oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
           oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
           oGdPicturePDF.DrawImage(image_res_name, 10, 10, 5, 5)
           oGdPicturePDF.SaveToFileInc("c:\\test.pdf")
           oGdPicturePDF.CloseDocument()
  
           MsgBox("Done")
        End If
     End Sub
  </code>
	</example>
	<example>
  Open an existing PDF, insert an A4 page in second page then draw an image on the whole page surface 
  <code lang="vb.net">
  Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
      Dim oGdPicturePDF As New GdPicturePDF
      Dim oGdPictureImaging As New GdPictureImaging


      Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\\test.tif")

      If ImageID &gt; 0 AndAlso oGdPicturePDF.LoadFromFile("c:\\test.pdf", True) = GdPictureStatus.OK Then

         'Add the image as resource in the PDF document
         Dim image_res_name As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
         oGdPictureImaging.ReleaseGdPictureImage(ImageID)

         'Insert a new blank A4 page as second page of the document.
         Dim pageWidth As Single = 8.27
         Dim pageHeight As Single = 11.69
         Dim pagePosition As Integer = 2
         oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginBottomLeft)
         oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitInch)
         oGdPicturePDF.InsertPage(pageWidth, pageHeight, pagePosition)
         oGdPicturePDF.SelectPage(pagePosition)
         'Draw the image on the PDF page
         oGdPicturePDF.DrawImage(image_res_name, 0, 0, pageWidth, pageHeight)
         oGdPicturePDF.SaveToFileInc("c:\\test.pdf")
         oGdPicturePDF.CloseDocument()

         MsgBox("Done")
      End If
   End Sub
  </code>
	</example>
	<example>
  Create a new PDF, add a new empty A4 page and draw a screenshot image in the middle of the page.
  <code lang="vb.net">
   Dim oGdPictureImaging As New GdPictureImaging
   Dim oGdPicturePDF As New GdPicturePDF
   oGdPicturePDF.NewPDF()

   Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromHwnd(Me.Handle)
   Dim imageRes As String = oGdPicturePDF.AddImageFromGdPictureImage(ImageID, False, False)
   oGdPictureImaging.ReleaseGdPictureImage(ImageID)
   oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
   oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
   oGdPicturePDF.NewPage(21, 29.7)
   oGdPicturePDF.DrawImage(imageRes, 2.5, 20, 16, 9)
   oGdPicturePDF.SaveToFile("c:\\screenshot.pdf")
   oGdPicturePDF.CloseDocument()
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.GetPageImageCount">
	<summary>
 Returns the number of bitmap available on the selected page of the PDF.
 </summary>
	<returns>
 The number of available bitmap.
 </returns>
	<remarks>
 You can use the GetStat() function to determine if this function failed.
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.ExtractPageImage(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.GetPageImageResName(System.Int32)">
	<summary>
 Returns the resource name of a specific image present on the current page.
 </summary>
	<param name="ImageIdx">The image index on the page. Must be a value between 0 and GetPageImageCount() -1 </param>
	<returns>
 The resource name of the image.
 </returns>
	<remarks>
 You can use the GetStat() function to determine if this function failed.
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.ExtractPageImage(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.ExtractPageImage(System.Int32)">
	<summary>
 Extract a bitmap embedded into the selected page of the PDF to a new GdPicture Image.
 </summary>
	<param name="ImageNo">The number of the bitmap in the page. Must be a value between 1 and
 GetPageImageCount.</param>
	<returns>
 0: The image could not created. Use the GetStat() function to determine the reason this function
 failed.
 
 Non-zero: GdPicture Image Identifier. The created image.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromFile(System.String,System.Boolean)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.LoadFromStream(System.IO.Stream)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.GetPageImageCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SearchText(System.String,System.Int32,System.Boolean,System.Boolean,System.Single@,System.Single@,System.Single@,System.Single@)">
	<summary>
 Searches the current page page of the PDF for an occurrence of a given text string and returns
 its bounding box.
 </summary>
	<param name="Text">The text to search for. </param>
	<param name="Occurrence">The occurrence of the text to search for. 1 to search for the first
                          occurrence, 2 for the second... 0 is not accepted.</param>
	<param name="CaseSensitive">True to apply case-sensitive search, else False. </param>
	<param name="WholeWords">Searches for whole words only. </param>
	<param name="Left">If the occurrence is found, returns the left position in inches of the
                    area bounding the text. </param>
	<param name="Top">If the occurrence is found, returns the top position in inches of the
                   area bounding the text. </param>
	<param name="Width">If the occurrence is found, returns the width in inches of the area
                     bounding the text. </param>
	<param name="Height">If the occurrence is found, returns the height in inches of the area
                      bounding the text. </param>
	<returns>
 True if the string has been found, else False. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetPageText">
	<summary>
 Returns the text of the current page of the PDF.
 </summary>
	<returns>
 The whole page text. 
 </returns>
	<remarks>
 You can use the GetStat() function to determine if this function failed.
 </remarks>
</member><member name="M:GdPicture.GdPicturePDF.GetPageTextWithCoords(System.String)">
	<summary>
 Returns the text of the current page of the PDF including coordinates of the 4 points of each word.
 The return string will be formatted like this:
 
 TopLeftX + [FieldSeparator] +
 
 TopLeftY + [FieldSeparator] +
 
 TopRightX + [FieldSeparator] +
 
 TopRightY + [FieldSeparator] +
 
 BottomRightX + [FieldSeparator] +
 
 BottomRightY + [FieldSeparator] +
 
 BottomLeftX + [FieldSeparator] +
 
 BottomLeftY + [FieldSeparator] +
 
 Word + CRLF
 
 Returned coordinates are given in points = 1/72 inches.
 </summary>
	<param name="FieldSeparator">The string to use to delimit fields. </param>
	<returns>
 The whole page text.
 </returns>
	<remarks>
 You can use the GetStat() function to determine if this function failed. 
 </remarks>
</member><member name="M:GdPicture.GdPicturePDF.GetPageTextArea(System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Returns the text of the current page of the PDF within a specific rectangle.
 </summary>
	<param name="Left">Left position of the rectangle in inches.</param>
	<param name="Top">Top position of the rectangle in inches.</param>
	<param name="Width">Width of the rectangle in inches.</param>
	<param name="Height">Height of the rectangle in inches.</param>
	<returns>
 The text within the specified area.
 </returns>
	<remarks>
 You can use the GetStat() function to determine if this function failed. 
 </remarks>
</member><member name="M:GdPicture.GdPicturePDF.GetStat">
	<summary>
 Returns the last status of the GdPicturePDF object.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PageHasShape">
	<summary>
 Returns if the selected page of the PDF has any kind of shape (path, lines, rectangle, bezier curves...).
 </summary>
	<returns>
 True is the selected page has shape, else False.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.PageHasText">
	<summary>
 Returns if the selected page of the PDF has text.
 
 This function uses an internal algorithm which is faster than full page text extraction. to determine
 if a PDF page contains text.
 </summary>
	<returns>
 True is the selected page has text, else False.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.SelectPage(System.Int32)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetLicenseNumber(System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member><member name="M:GdPicture.GdPicturePDF.SupportFunc(System.Int32,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@,System.Int32@,System.String@,System.String@,System.String@)">
	<summary>
 Used for GdPicture technical support purpose.
 </summary>
</member><member name="M:GdPicture.GdPicturePDF.SetOrigin(GdPicture.PdfOrigin)">
	<summary>
 Defines the origin for coordinates.
 </summary>
	<param name="Origin">A member of the PDFOrigin enumeration. Determines the origin in the current coordinates system.</param>
</member><member name="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)">
	<summary>
 Sets the measurement unit to be used. Default unit mode is Point.
 </summary>
	<param name="UnitMode">A member of the PdfMeasurementUnit enumeration.</param>
</member><member name="M:GdPicture.GdPicturePDF.ResetGraphicsState">
	<summary>
 Resets the graphics parameters to the default configuration. For example, any page transformation will be cancelled. 
 It is suggested to make a call to this function before appending data to existing PDF documents. 
 </summary>
	<returns>A member of the GdPicture enumeration.</returns>
</member><member name="M:GdPicture.GdPicturePDF.SetLineWidth(System.Single)">
	<summary>
 Sets the line width (or pen size) for stroking operation.
 </summary>
	<param name="LineWidth">The width of the lines in current unit defined by the
 SetMeasurementUnit() function. </param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetLineDash(System.Single,System.Single)">
	<summary>
 Sets the dash pattern for lines.
 </summary>
	<param name="DashOn">The width of the dashes in current unit.</param>
	<param name="DashOff">The width of the space between the dashes in current unit.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetLineNoDash">
	<summary>
 Removes the dash pattern for lines.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetFillColor(System.Drawing.Color)">
	<summary>
 Sets the color for filling operation. This function uses RGB color space.
 </summary>
	<param name="FillColor">A Color object. The filling color.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte)">
	<summary>
 Sets the color for filling operation. This function uses RGB color space.
 </summary>
	<param name="Red">The amount of Red color between 0 and 255.</param>
	<param name="Green">The amount of Red color between 0 and 255.</param>
	<param name="Blue">The amount of Red color between 0 and 255.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetFillColor(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>
 Sets the color for filling operation. This function uses CMYK color space.
 </summary>
	<param name="Cyan">The amount of Cyan color between 0 and 255.</param>
	<param name="Magenta">The amount of Magenta color between 0 and 255.</param>
	<param name="Yellow">The amount of Yellow color between 0 and 255.</param>
	<param name="Black">The amount of Black (key) color between 0 and 255.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)">
	<summary>
 Sets the line color for stroking operation. This function uses RGB color space.
 </summary>
	<param name="Red">The amount of Red color between 0 and 255.</param>
	<param name="Green">The amount of Red color between 0 and 255.</param>
	<param name="Blue">The amount of Red color between 0 and 255.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetFillColor(System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetLineColor(System.Drawing.Color)">
	<summary>
 Sets the line color for stroking operation.
 </summary>
	<param name="LineColor">A Color object. The line color.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetFillColor(System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>
 Sets the line color for stroking operation. This function uses CMYK color space.
 </summary>
	<param name="Cyan">The amount of Cyan color between 0 and 255.</param>
	<param name="Magenta">The amount of Magenta color between 0 and 255.</param>
	<param name="Yellow">The amount of Yellow color between 0 and 255.</param>
	<param name="Black">The amount of Black (key) color between 0 and 255.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetFillColor(System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdPicturePDF.DrawLine(System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Draws a line into the current page of the PDF.
 </summary>
	<param name="StartX">The X coordinate of the starting point, in current unit.</param>
	<param name="StartY">The Y coordinate of the starting point, in current unit. </param>
	<param name="DstX">The X coordinate of the ending point, in current unit.</param>
	<param name="DstY">The Y coordinate of the ending point, in current unit.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPicturePDF.DrawEllipse(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
	<summary>
 Draws an ellipse into the current page of the PDF.
 </summary>
	<param name="StartX">The X source in current unit.</param>
	<param name="StartY">The Y source in current unit. </param>
	<param name="Width">The width in current unit.</param>
	<param name="height">The height destination in current unit.</param>
	<param name="Fill">Set to true to fill the circle using the current color of the graphics state. This color can be defined using the SetFillColor() function.</param>
	<param name="Stroke">Set to true to stroke the circle using the current color of the graphics state. This color can be defined using the SetLineColor() function.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetFillColor(System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPicturePDF.DrawCircle(System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
	<summary>
 Draws a circle into the current page of the PDF.
 </summary>
	<param name="X">The X coordinate of the center of the circle in current unit.</param>
	<param name="Y">The Y coordinate of the center of the circle in current unit. </param>
	<param name="Radius">The radius of the circle in current unit. </param>
	<param name="Fill">Set to true to fill the circle using the current color of the graphics state. This color can be defined using the SetFillColor() function.</param>
	<param name="Stroke">Set to true to stroke the circle using the current color of the graphics state. This color can be defined using the SetLineColor() function.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetFillColor(System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPicturePDF.DrawRectangle(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
	<summary>
 Draws a rectangle into the current page of the PDF.
 </summary>
	<param name="Left">The X coordinate of the rectangle in current unit.</param>
	<param name="Top">The Y coordinate of the rectangle in current unit. </param>
	<param name="Width">The width of the rounded portion of the rectangle in current unit. </param>
	<param name="Height">The height of the rectangle in current unit. </param>
	<param name="Fill">Set to true to fill the rectangle using the current color of the graphics state. This color can be defined using the SetFillColor() function.</param>
	<param name="Stroke">Set to true to stroke the rectangle using the current color of the graphics state. This color can be defined using the SetLineColor() function.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetFillColor(System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPicturePDF.DrawRoundedRectangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
	<summary>
 Draws a rounded rectangle into the current page of the PDF.
 </summary>
	<param name="Left">The X coordinate of the rectangle in current unit.</param>
	<param name="Top">The Y coordinate of the rectangle in current unit. </param>
	<param name="Width">The width of the rectangle in current unit. </param>
	<param name="Height">The height of the rectangle in current unit. </param>
	<param name="Radius">The radius of the rectangle in current unit. </param>
	<param name="Fill">Set to true to fill the rectangle using the current color of the graphics state. This color can be defined using the SetFillColor() function.</param>
	<param name="Stroke">Set to true to stroke the rectangle using the current color of the graphics state. This color can be defined using the SetLineColor() function.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetFillColor(System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPicturePDF.DrawArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Draws an arc into the current page of the PDF.
 </summary>
	<param name="Left">The X coordinate of the arc in current unit.</param>
	<param name="Top">The Y coordinate of the arc in current unit. </param>
	<param name="Radius">The radius of the arc in current unit. </param>
	<param name="StartAngle">Specifies the start angle (degree). Usually 0. </param>
	<param name="EndAngle">Specifies the end angle (degree). Usually 360. </param>
	<param name="Close">True to close the arc, else False. </param>
	<param name="Fill">Set to true to fill the arc using the current color of the graphics state. This color can be defined using the SetFillColor() function.</param>
	<param name="Stroke">Set to true to stroke the arc using the current color of the graphics state. This color can be defined using the SetLineColor() function.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetFillColor(System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPicturePDF.DrawPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
	<summary>
 Draws a pie into the current page of the PDF.
 </summary>
	<param name="Left">The X coordinate of the pie in current unit.</param>
	<param name="Top">The Y coordinate of the pie in current unit. </param>
	<param name="Radius">The radius of the pie in current unit. </param>
	<param name="StartAngle">Specifies the start angle (degree). Usually 0. </param>
	<param name="EndAngle">Specifies the end angle (degree). Usually 360 for a whole circle. </param>
	<param name="Fill">Set to true to fill the pie using the current color of the graphics state. This color can be defined using the SetFillColor() function.</param>
	<param name="Stroke">Set to true to stroke the pie using the current color of the graphics state. This color can be defined using the SetLineColor() function.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetFillColor(System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.SetLineColor(System.Byte,System.Byte,System.Byte)"/>
</member><member name="M:GdPicture.GdPicturePDF.DrawBarcode1D(GdPicture.Barcode1DWriterType,System.String,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
	<summary>
 Draws a 1D barcode into the current page of the PDF.
 </summary>
	<param name="BarcodeType">A member of the Barcode1DWriterType enumeration.</param>
	<param name="Data">The data of the barcode to encode.</param>
	<param name="DstX">The X source in current unit. </param>
	<param name="DstY">The X source in current unit.</param>
	<param name="DstWidth">Width of the bounding box of the barcode in current unit.</param>
	<param name="DstHeight">Height of the bounding box of the barcode in current unit.</param>
	<param name="BarColor">Color Object. Color used to draw the barcode. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 To use this function, you have to add a reference to the GdPicture.NET.Barcode.1D.Writer.dll
 assembly:
 
 * Select Project / Add Reference...
 * Select the Browse tab and select the GdPicture.NET.Barcode.1D.Writer.dll library which can be
 found on c:\\Program Files\\GdPicture.NET\\Redist\\Framework X.X\\GdPicture.NET.Barcode.1D.Writer.dll
 </remarks>
	<example>
  draw an barcode on an existing page of a pdf document 
  <code lang="vb.net">
  Dim oGdPicturePDF As New GdPicturePDF
  oGdPicturePDF.LoadFromFile("c:\\test.pdf", False)
  oGdPicturePDF.SelectPage(1)
  oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
  oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
  oGdPicturePDF.DrawBarcode1D(Barcode1DWriterType.Barcode1DWriterCode128, "0123456789", 1, 1, 5, 1, Color.Red)
  oGdPicturePDF.SaveToFile("c:\\test2.pdf")
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)">
	<summary>
 Begin a new subpath by moving the current point to coordinates (DstX, DstY), omitting any connecting
 line segment into the current page of the PDF.
 </summary>
	<param name="DstX">The X destination in current unit defined by the SetMeasurementUnit()
 function. </param>
	<param name="DstY">The Y destination in current unit defined by the
 SetMeasurementUnit() function. </param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
</member><member name="M:GdPicture.GdPicturePDF.ClosePath">
	<summary>
 Closes &amp; terminates the current subpath by appending a straight line segment from the current
 point to the starting point of the subpath,into the current page of the PDF. If the current subpath is
 already closed, this function shall do nothing.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.EndPath">
	<summary>
 End the path without filling or stroking, into the current page of the PDF. If the current subpath is
 already closed, this function shall do nothing.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.StrokePath">
	<summary>
 Stroke the path, into the current page of the PDF.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.CloseAndFillAndStrokePath">
	<summary>
 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region
 to fill, into the current page of the PDF.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.CloseAndFillAndStrokePathOdd">
	<summary>
 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill, into
 the current page of the PDF.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.FillAndStrokePath">
	<summary>
 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill,
 into the current page of the PDF.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.FillAndStrokePathOdd">
	<summary>
 Fill and then stroke the path, using the even-odd rule to determine the region to fill, into the
 current page of the PDF.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.FillPath">
	<summary>
 Fill the path, using the nonzero winding number rule to determine the region to fill, into the
 current page of the PDF.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.FillPathOdd">
	<summary>
 Fill the path, using the even-odd rule to determine the region to fill, into the current page of a
 PDF.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.CloseAndStrokePath">
	<summary>
 Close and stroke the path, into the current page of the PDF. This function shall have the same effect
 as the sequence PdfClosePath and PdfStrokePath.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
</member><member name="M:GdPicture.GdPicturePDF.AddLineToPath(System.Single,System.Single)">
	<summary>
 Append a straight line segment from the current point to the point (DstX, DstY) into the current page
 of the PDF.
 </summary>
	<param name="DstX">The X destination in current unit defined by the SetMeasurementUnit()
 function. </param>
	<param name="DstY">The Y destination in current unit defined by the
 SetMeasurementUnit() function. </param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
	<remarks>
 The new current point in the subpath will be (DstX, DstY). 
 </remarks>
</member><member name="M:GdPicture.GdPicturePDF.AddCurveToPath3(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Append a cubic Bézier curve, using 2 control points from the current point to the point (X3, Y3),
 into the current page of the PDF.
 </summary>
	<param name="X1">The X destination in current unit defined by the SetMeasurementUnit()
 function of the first Bézier control point.</param>
	<param name="Y1">The Y destination in current unit defined by the
 SetMeasurementUnit() function of the first Bézier control point.</param>
	<param name="X2">The X destination in current unit defined by the SetMeasurementUnit()
 function of the second Bézier control point.</param>
	<param name="Y2">The Y destination in current unit defined by the
 SetMeasurementUnit() function of the second Bézier control point.</param>
	<param name="X3">The X destination in current unit defined by the SetMeasurementUnit()
 function of the curve end point.</param>
	<param name="Y3">The Y destination in current unit defined by the
 SetMeasurementUnit() function of curve end point.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
	<remarks>
 The new current point in the subpath will be (X3, Y3). 
 </remarks>
</member><member name="M:GdPicture.GdPicturePDF.AddCurveToPath2(System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Append a cubic Bézier curve, using current point and (X2, Y2) as control points, from the current
 point to the point (X3, Y3), into the current page of the PDF.
 </summary>
	<param name="X2">The X destination in current unit defined by the SetMeasurementUnit()
 function of the second Bézier control point.</param>
	<param name="Y2">The Y destination in current unit defined by the
 SetMeasurementUnit() function of the second Bézier control point.</param>
	<param name="X3">The X destination in current unit defined by the SetMeasurementUnit()
 function of the curve end point.</param>
	<param name="Y3">The Y destination in current unit defined by the
 SetMeasurementUnit() function of curve end point.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
	<remarks>
 The new current point in the subpath will be (X3, Y3). 
 </remarks>
</member><member name="M:GdPicture.GdPicturePDF.AddCurveToPath1(System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Append a cubic Bézier curve, using (X1, Y1) and (X3, X3) as control points, from the current point to
 the point (X3, Y3), into the current page of the PDF.
 </summary>
	<param name="X1">The X destination in current unit defined by the SetMeasurementUnit()
 function of the first Bézier control point.</param>
	<param name="Y1">The Y destination in current unit defined by the
 SetMeasurementUnit() function of the first Bézier control point.</param>
	<param name="X3">The X destination in current unit defined by the SetMeasurementUnit()
 function of the curve end point.</param>
	<param name="Y3">The Y destination in current unit defined by the
 SetMeasurementUnit() function of curve end point.</param>
	<seealso cref="M:GdPicture.GdPicturePDF.SetMeasurementUnit(GdPicture.PdfMeasurementUnit)"/>
	<seealso cref="M:GdPicture.GdPicturePDF.BeginPath(System.Single,System.Single)"/>
	<remarks>
 The new current point in the subpath will be (X3, Y3). 
 </remarks>
</member><member name="M:GdPicture.GdPicturePDF.Merge2Documents(System.String,System.String,System.String)">
	<summary>
 Merge 2 PDF files to a new file.
 </summary>
	<param name="SrcDoc1">The path of the first PDF document to merge.</param>
	<param name="SrcDoc2">The path of the second PDF document to merge.</param>
	<param name="DstDoc">The path of the PDF document to create.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Merging 2 documents from files to file.
 <code lang="vb.net">
     Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
      Dim oGdPicturePDF As New GdPicturePDF
      Dim status As GdPictureStatus = oGdPicturePDF.Merge2Documents("c:\\test1.pdf", "c:\\test2.pdf", "c:\\Result.pdf")
      If status = GdPictureStatus.OK Then
        MsgBox("success")
      Else
        MsgBox("failure. Status: " + status.ToString())
      End If
    End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.Merge2Documents(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
	<summary>
 Merge 2 PDF files to a new file. If the both documents are PDF/A a PDF/A will be generated.
 </summary>
	<param name="SrcDoc1">The stream object handling data of the first PDF document to merge.</param>
	<param name="SrcDoc2">The stream object handling data PDF document to merge.</param>
	<param name="DstDoc">The destination stream.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Merging 2 documents from stream to stream and display the resulting doc in a Gdiewer object.
 <code lang="vb.net">
     Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
        Dim doc1 As IO.Stream = New IO.FileStream("c:\\file1.pdf", IO.FileMode.Open)
        Dim doc2 As IO.Stream = New IO.FileStream("c:\\file2.pdf", IO.FileMode.Open)
        Dim mergedDoc As IO.Stream = New IO.MemoryStream
        Dim oGdPicturePDF As New GdPicturePDF
            If oGdPicturePDF.Merge2Documents(doc1, doc2, mergedDoc) = GdPictureStatus.OK Then
                GdViewer1.DisplayFromStream(mergedDoc)
            End If
    End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.Merge2Documents(GdPicture.GdPicturePDF,GdPicture.GdPicturePDF)">
	<summary>
 Merge 2 PDF documents to a new GdPicturePDF object.
 If the both documents are PDF/A a PDF/A will be generated.
 Use the GetStat() function to determine if this function has succeeded.
 </summary>
	<param name="SrcDoc1">A GdPicturePDF object. The first PDF document to merge.</param>
	<param name="SrcDoc2">A GdPicturePDF object. The second PDF document to merge.</param>
	<returns>
 A GdPicturePDF object. The generated PDF. 
 </returns>
	<example>
 Merging 2 documents from GdPicturePDF objects to a new GdPicturePDF object.
 <code lang="vb.net">
     Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
      Dim oGdPicturePDF1 As New GdPicturePDF
      Dim oGdPicturePDF2 As New GdPicturePDF
 
      oGdPicturePDF1.LoadFromFile("c:\\test1.pdf", False)
      oGdPicturePDF2.LoadFromFile("c:\\test2.pdf", False)
 
      Dim oNewGdPicturePDF As GdPicturePDF = oGdPicturePDF1.Merge2Documents(oGdPicturePDF1, oGdPicturePDF2)
 
      Dim status As GdPictureStatus = oGdPicturePDF1.GetStat
      If status = GdPictureStatus.OK Then
         oNewGdPicturePDF.SetAuthor("Hello from the new author")
         oNewGdPicturePDF.SaveToFile("c:\\Result.pdf")
         oNewGdPicturePDF.CloseDocument()
         MsgBox("success")
      Else
         MsgBox("failure. Status: " + status.ToString())
      End If
      oGdPicturePDF1.CloseDocument()
      oGdPicturePDF2.CloseDocument()
    End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.MergeDocuments(System.String[],System.String)">
	<summary>
 Merge several PDF documents from an array of path to a new GdPicturePDF object.
 If the first document in the list is a PDF/A a PDF/A will be generated.
 Use the GetStat() function to determine if this function has succeeded.
 </summary>
	<param name="SrcDocPath">An array of string defining the path of the PDF documents to merge.</param>
	<param name="DstDoc">The path of the PDF document to create.</param>
	<returns>
 A GdPicturePDF object. The generated PDF. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.MergeDocuments(GdPicture.GdPicturePDF[])">
	<summary>
 Merge several PDF documents from an array of GdPicturePDF objects to a new GdPicturePDF object.
 If the first document in the list is a PDF/A a PDF/A will be generated.
 Use the GetStat() function to determine if this function has succeeded.
 </summary>
	<param name="SrcDoc">An array of GdPicturePDF object. PDF documents to merge.</param>
	<returns>
 A GdPicturePDF object. The generated PDF.
 </returns>
	<example>
 Merging 3 documents from an array of GdPicturePDF objects to a new GdPicturePDF object.
 <code lang="vb.net">
     Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
       Dim arGdPicturePDF(0 To 2) As GdPicturePDF
 
       arGdPicturePDF(0) = New GdPicturePDF
       arGdPicturePDF(0).LoadFromFile("c:\\test1.pdf", False)
       arGdPicturePDF(1) = New GdPicturePDF
       arGdPicturePDF(1).LoadFromFile("c:\\test2.pdf", False)
       arGdPicturePDF(2) = New GdPicturePDF
       arGdPicturePDF(2).LoadFromFile("c:\\test3.pdf", False)
 
       Dim oNewGdPicturePDF As GdPicturePDF = arGdPicturePDF(0).MergeDocuments(arGdPicturePDF)
 
       Dim status As GdPictureStatus = arGdPicturePDF(0).GetStat
       If status = GdPictureStatus.OK Then
         oNewGdPicturePDF.SetAuthor("Hello from the new author")
         oNewGdPicturePDF.SaveToFile("c:\\Result.pdf")
         oNewGdPicturePDF.CloseDocument()
         MsgBox("success")
       Else
         MsgBox("failure. Status: " + status.ToString())
       End If
       arGdPicturePDF(0).CloseDocument()
       arGdPicturePDF(1).CloseDocument()
       arGdPicturePDF(2).CloseDocument()
    End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.SetTextSize(System.Single)">
	<summary>
 Sets the current text size.
 </summary>
	<param name="TextSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
  Add text on an existing PDF using incremental saving 
  <code lang="vb.net">
    Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
    Dim oGdPicturePDF As New GdPicturePDF
 
 
       If oGdPicturePDF.LoadFromFile("c:\\test.pdf", True) = GdPictureStatus.OK Then
          oGdPicturePDF.SelectPage(1) 'Selecting first page
          Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
          oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
          oGdPicturePDF.SetTextSize(30)
          oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
          oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
          oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
          oGdPicturePDF.DrawText(font_res_name, 1, 1, "Hello World!")
          oGdPicturePDF.SaveToFileInc("c:\\test.pdf")
          oGdPicturePDF.CloseDocument()
          MsgBox("Done")
       End If
    End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.SetTextMode(GdPicture.PdfTextMode)">
	<summary>
 Specifies the mode to draw text on the PDF.
 </summary>
	<param name="TextMode">A member of the PdfTextMode enumeration.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
  Add text on an existing PDF using incremental saving 
  <code lang="vb.net">
    Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
    Dim oGdPicturePDF As New GdPicturePDF
 
 
       If oGdPicturePDF.LoadFromFile("c:\\test.pdf", True) = GdPictureStatus.OK Then
          oGdPicturePDF.SelectPage(1) 'Selecting first page
          Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
          oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
          oGdPicturePDF.SetTextSize(30)
          oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
          oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
          oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
          oGdPicturePDF.DrawText(font_res_name, 1, 1, "Hello World!")
          oGdPicturePDF.SaveToFileInc("c:\\test.pdf")
          oGdPicturePDF.CloseDocument()
          MsgBox("Done")
       End If
    End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.DrawText(System.String,System.Single,System.Single,System.String)">
	<summary>
 Draws text using specified font into the current page of the PDF.
 </summary>
	<param name="FontResName">The Font resource name. See Font Management section to get a valid Font resource name.</param>
	<param name="DstX">The X destination in current unit.</param>
	<param name="DstY">The Y destination in current unit.</param>
	<param name="Text">The text to draw.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
  Add text on an existing PDF using incremental saving 
  <code lang="vb.net">
    Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
    Dim oGdPicturePDF As New GdPicturePDF
 
 
       If oGdPicturePDF.LoadFromFile("c:\\test.pdf", True) = GdPictureStatus.OK Then
          oGdPicturePDF.SelectPage(1) 'Selecting first page
          Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
          oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
          oGdPicturePDF.SetTextSize(30)
          oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
          oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
          oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
          oGdPicturePDF.DrawText(font_res_name, 1, 1, "Hello World!")
          oGdPicturePDF.SaveToFileInc("c:\\test.pdf")
          oGdPicturePDF.CloseDocument()
          MsgBox("Done")
       End If
    End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.DrawTextUnderline(System.String,System.Single,System.Single,System.String,System.Drawing.Color,System.Single)">
	<summary>
 Draws underlined text using specified font into the current page of the PDF.
 </summary>
	<param name="FontResName">The Font resource name. See Font Management section to get a valid Font resource name.</param>
	<param name="DstX">The X destination in current unit.</param>
	<param name="DstY">The Y destination in current unit.</param>
	<param name="Text">The text to draw.</param>
	<param name="LineColor">The color of the underline. </param>
	<param name="LineWidth">The width of the underline in current unit defined by the SetMeasurementUnit() function. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
  Add underlined text on an existing PDF  
  <code lang="vb.net">
    Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
       Dim oGdPicturePDF As New GdPicturePDF

       If oGdPicturePDF.LoadFromFile("c:\\test.pdf", False) = GdPictureStatus.OK Then
           oGdPicturePDF.SelectPage(1) 'Selecting first page
           Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
           oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
           oGdPicturePDF.SetTextSize(30)
           oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
           oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
           oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
           oGdPicturePDF.DrawTextUnderline(font_res_name, 1, 1, "Hello World!", Color.Red, 0.005)
           oGdPicturePDF.SaveToFileInc("c:Output.pdf")
          oGdPicturePDF.CloseDocument()
         MsgBox("Done")
       End If
    End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.DrawRotatedText(System.String,System.Single,System.Single,System.String,System.Single)">
	<summary>
 Draws a rotated text using specified font into the current page of the PDF.
 </summary>
	<param name="FontResName">The Font resource name. See Font Management section to get a valid Font resource name.</param>
	<param name="DstX">The X destination in current unit.</param>
	<param name="DstY">The Y destination in current unit.</param>
	<param name="Text">The text to draw.</param>
	<param name="Angle">The text angle rotation, in degrees.</param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
	<example>
  Add rotated text on an existing PDF  
  <code lang="vb.net">
    Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
       Dim oGdPicturePDF As New GdPicturePDF

       If oGdPicturePDF.LoadFromFile("c:\\test.pdf", False) = GdPictureStatus.OK Then
           oGdPicturePDF.SelectPage(1) 'Selecting first page
           Dim font_res_name As String = oGdPicturePDF.AddTrueTypeFont("Arial", False, False, False)
           oGdPicturePDF.SetTextMode(PdfTextMode.PdfTextModeFill)
           oGdPicturePDF.SetTextSize(30)
           oGdPicturePDF.SetFillColor(255, 0, 0, 0) 'Using Cyan colour
           oGdPicturePDF.SetOrigin(PdfOrigin.PdfOriginTopLeft)
           oGdPicturePDF.SetMeasurementUnit(PdfMeasurementUnit.PdfMeasurementUnitCentimeter)
           oGdPicturePDF.DrawRotatedText(font_res_name, 5, 5, "Hello World!", 45)
           oGdPicturePDF.SaveToFileInc("c:Output.pdf")
          oGdPicturePDF.CloseDocument()
         MsgBox("Done")
       End If
    End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdPicturePDF.GetTextWidth(System.String,System.Single,System.String)">
	<summary>
 Calculates the width of a line of text.
 </summary>
	<param name="FontResName">The Font resource name. See Font Management section to get a valid Font
                           resource name.</param>
	<param name="Text">The text to measure.</param>
	<param name="TextSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
	<returns>
 The specified text width, in current unit. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.GetTextHeight(System.String,System.Single)">
	<summary>
 Calculates the width of a text based on its font.
 </summary>
	<param name="FontResName">The Font resource name. See Font Management section to get a valid Font
                           resource name.</param>
	<param name="TextSize">Text size in point. 1 point = 1/72 inch. Default is 12.</param>
	<returns>
 The text height, in current unit. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.AddStickyNoteAnnotation(GdPicture.PdfStickyNoteAnnotationIcon,System.Single,System.Single,System.String,System.String,System.String,System.Single,System.Boolean,System.Byte,System.Byte,System.Byte,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a sticky-note annotation to the current page of the PDF.
 </summary>
	<param name="IconName">The appearance to apply. A member of the
                        PdfStickyNoteAnnotationIcon enumeration.</param>
	<param name="Left">The left coordinate of the annotation icon, in current unit.</param>
	<param name="Top">The left coordinate of the annotation icon, in current unit.</param>
	<param name="Author">The author of the annotation</param>
	<param name="Subject">The subject of the annotation</param>
	<param name="Contents">The contents of the annotation popup</param>
	<param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity)</param>
	<param name="OpenPopup">A flag specifying whether the annotation should initially be native open. Default value: false (closed).</param>
	<param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
	<param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
	<param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
	<param name="PopupLeft">The left coordinate of the annotation popup, in current unit.</param>
	<param name="PopupTop">The top coordinate of the annotation popup, in current unit.</param>
	<param name="PopupWidth">The width of the annotation popup, in current unit.</param>
	<param name="PopupHeight">The height coordinate of the annotation popup, in current unit.</param>
	<returns>
 -1 if fail, else The annotation index, between 0 and GetAnnotationCount() -1.
 </returns>
	<remarks>
 Do not forget to select the page using the SelectPage() function before adding the annotation
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.AddStampAnnotation(System.Single,System.Single,System.Single,System.Single,System.String,System.String,GdPicture.PdfRubberStampAnnotationIcon,System.Single,System.Byte,System.Byte,System.Byte)">
	<summary>
 Adds a stamp annotation to the current page of the PDF.
 </summary>
	<param name="Left">The left coordinate of the annotation, in current unit.</param>
	<param name="Top">The left coordinate of the annotation, in current unit.</param>
	<param name="Width">The width of the annotation, in current unit.</param>
	<param name="Height">The height of the annotation, in current unit.</param>
	<param name="Title">The title of the annotation.</param>
	<param name="Contents">The content of the annotation.</param>
	<param name="StampStyle">The appearance of the stamp. A member of the PdfRubberStampAnnotationIcon
                          enumeration.</param>
	<param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity)</param>
	<param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
	<param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
	<param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
	<returns>
 -1 if fail, else The annotation index, between 0 and GetAnnotationCount() -1.
 </returns>
	<remarks>
 Do not forget to select the page using the SelectPage() function before adding the annotation
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.AddLineAnnotation(System.Single,System.Single,System.Single,System.Single,System.String,System.String,GdPicture.PdfAnnotationLineEndingStyle,GdPicture.PdfAnnotationLineEndingStyle,System.Boolean,System.Single,GdPicture.PdfAnnotationBorderStyle,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
	<summary>
 Adds a line annotation to the current page of the PDF.
 </summary>
	<param name="StartX">The X coordinate of the starting point, in current unit.</param>
	<param name="StartY">The Y coordinate of the starting point, in current unit. </param>
	<param name="DstX">The X coordinate of the ending point, in current unit.</param>
	<param name="DstY">The Y coordinate of the ending point, in current unit.</param>
	<param name="Title">The title of the annotation.</param>
	<param name="Contents">The content of the annotation.</param>
	<param name="StartCap">Defines the cap style used at the start of line drawn. A member of the PdfAnnotationLineEndingStyle enumeration.</param>
	<param name="EndCap">Defines the cap style used at the end of line drawn. A member of the PdfAnnotationLineEndingStyle enumeration.</param>
	<param name="ShowContent">(Optional; PDF 1.6) If true, the text specified by the Contents or RC entries should be replicated as a caption in the appearance of the line. 
 The text should be rendered in a manner appropriate to the content, taking into account factors such as writing direction.</param>
	<param name="LineWidth">The width of the line, in current unit.</param>
	<param name="LineStyle">The style of the line. A member of the PdfAnnotationBorderStyle enumeration.</param>
	<param name="LineDashOn">If line style is dashed, defines the width of the dash pattern, in current unit.</param>
	<param name="LineDashOff">If line style is dashed, defines the between the dashes, in current unit.</param>
	<param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity)</param>
	<param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
	<param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
	<param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
	<returns>-1 if fail, else The annotation index, between 0 and GetAnnotationCount() -1.</returns>
	<remarks>Do not forget to select the page using the SelectPage() function before adding the annotation</remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.AddCircleAnnotation(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,GdPicture.PdfAnnotationBorderStyle,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
	<summary>
 Adds a circle annotation to the current page of the PDF.
 </summary>
	<param name="Left">The left coordinate of the annotation, in current unit.</param>
	<param name="Top">The left coordinate of the annotation, in current unit.</param>
	<param name="Width">The width of the annotation, in current unit.</param>
	<param name="Height">The height of the annotation, in current unit.</param>
	<param name="Title">The title of the annotation.</param>
	<param name="Contents">The content of the annotation.</param>
	<param name="LineWidth">The width of the line, in current unit.</param>
	<param name="LineStyle">The style of the line. A member of the PdfAnnotationBorderStyle enumeration.</param>
	<param name="LineDashOn">If line style is dashed, defines the width of the dash pattern, in current unit.</param>
	<param name="LineDashOff">If line style is dashed, defines the between the dashes, in current unit.</param>
	<param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity)</param>
	<param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
	<param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
	<param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
	<returns>-1 if fail, else The annotation index, between 0 and GetAnnotationCount() -1.</returns>
	<remarks>Do not forget to select the page using the SelectPage() function before adding the annotation</remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.AddSquareAnnotation(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Single,GdPicture.PdfAnnotationBorderStyle,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte)">
	<summary>
 Adds a square annotation to the current page of the PDF.
 </summary>
	<param name="Left">The left coordinate of the annotation, in current unit.</param>
	<param name="Top">The left coordinate of the annotation, in current unit.</param>
	<param name="Width">The width of the annotation, in current unit.</param>
	<param name="Height">The height of the annotation, in current unit.</param>
	<param name="Title">The title of the annotation.</param>
	<param name="Contents">The content of the annotation.</param>
	<param name="LineWidth">The width of the line, in current unit.</param>
	<param name="LineStyle">The style of the line. A member of the PdfAnnotationBorderStyle enumeration.</param>
	<param name="LineDashOn">If line style is dashed, defines the width of the dash pattern, in current unit.</param>
	<param name="LineDashOff">If line style is dashed, defines the between the dashes, in current unit.</param>
	<param name="Opacity">The opacity, between 0 (full transparency) and 1 (full opacity)</param>
	<param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
	<param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
	<param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
	<returns>-1 if fail, else The annotation index, between 0 and GetAnnotationCount() -1.</returns>
	<remarks>Do not forget to select the page using the SelectPage() function before adding the annotation</remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.AddLinkToWebAnnotation(System.Single,System.Single,System.Single,System.Single,System.String,System.Boolean,System.Byte,System.Byte,System.Byte)">
	<summary>
 Adds a link to web annotation to the current page of the PDF.
 </summary>
	<param name="Left">The left coordinate of the annotation, in current unit.</param>
	<param name="Top">The left coordinate of the annotation, in current unit.</param>
	<param name="Width">The width of the annotation, in current unit.</param>
	<param name="Height">The height of the annotation, in current unit.</param>
	<param name="Link">The URL of the destination. IE: http://www.gdpicture.com</param>
	<param name="Borders">Set true to display borders around the link, else False.</param>
	<param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
	<param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
	<param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
	<returns>
 -1 if fail, else The annotation index, between 0 and GetAnnotationCount() -1.
 </returns>
	<remarks>
 Do not forget to select the page using the SelectPage() function before adding the annotation
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.AddLinkToPageAnnotation(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean,System.Byte,System.Byte,System.Byte)">
	<summary>
 Adds a link to page annotation to the current page of the PDF.
 </summary>
	<param name="Left">The left coordinate of the annotation, in current unit.</param>
	<param name="Top">The left coordinate of the annotation, in current unit.</param>
	<param name="Width">The width of the annotation, in current unit.</param>
	<param name="Height">The height of the annotation, in current unit.</param>
	<param name="PageNum">The page destination of the link. Must be a value between 1 and
                       GetPageCount().</param>
	<param name="DstLeft">The left coordinate of the link destination, in current unit.</param>
	<param name="DstTop">The top coordinate of the link destination, in current unit.</param>
	<param name="Borders">Set true to display borders around the link, else False.</param>
	<param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
	<param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
	<param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
	<returns>
 -1 if fail, else The annotation index, between 0 and GetAnnotationCount() -1.
 </returns>
	<remarks>
 Do not forget to select the page using the SelectPage() function before adding the annotation
 </remarks>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetAnnotationCount">
	<summary>
 Returns the number of annotations available on the current page.
 </summary>
	<returns>The number of annotations available on the current page.</returns>
</member><member name="M:GdPicture.GdPicturePDF.RemoveAnnotation(System.Int32)">
	<summary>
 Removes an annotation from the current page
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<returns>A member of the GdPictureStatus enumeration</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetAnnotationFlags(System.Int32)">
	<summary>
 Gets the flags of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<returns>A combination of items of the PdfAnnotationFlag enumeration.</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetAnnotationFlags(System.Int32,GdPicture.PdfAnnotationFlag)">
	<summary>
 Changes the flags of a specific annotation of the current page. 
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<param name="Flags">A combination of items of the PdfAnnotationFlag enumeration.</param>
	<returns>A member of the GdPictureStatus enumeration.</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetAnnotationContents(System.Int32)">
	<summary>
 Gets the contents of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<returns>The annotation content.</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetAnnotationContents(System.Int32,System.String)">
	<summary>
 Sets the contents of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<param name="Contents">The new content.</param>
	<returns>A member of the GdPictureStatus enumeration.</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetAnnotationType(System.Int32)">
	<summary>
 Gets the type of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<returns>
 The type of the annotation. IE: Line, Stamp, Circle...
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetAnnotationSubType(System.Int32)">
	<summary>
 Gets the subtype of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<returns>The annotation subtype. IE: Widget.</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetAnnotationRect(System.Int32,System.Single@,System.Single@,System.Single@,System.Single@)">
	<summary>
 Gets the bounding box of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<param name="Left">Return the left coordinates of the annotation bounding box, in current unit.</param>
	<param name="Top">Return the left coordinates of the annotation bounding box, in current unit.</param>
	<param name="Width">Return the width of the annotation bounding box, in current unit.</param>
	<param name="Height">Return the height of the annotation bounding box, in current unit.</param>
	<returns>A member of the GdPictureStatus enumeration.</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetAnnotationRect(System.Int32,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Sets the bounding box of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<param name="Left">The left coordinates of the annotation bounding box, in current unit.</param>
	<param name="Top">The left coordinates of the annotation bounding box, in current unit.</param>
	<param name="Width">The width of the annotation bounding box, in current unit.</param>
	<param name="Height">The height of the annotation bounding box, in current unit.</param>
	<returns>A member of the GdPictureStatus enumeration.</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetAnnotationColor(System.Int32)">
	<summary>
 Gets the color of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<returns>
 The annotation color. A Color object.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetAnnotationColor(System.Int32,System.Drawing.Color)">
	<summary>
 Sets the color of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<param name="Color">A Color object. The annotation color</param>
	<returns>A member of the GdPictureStatus enumeration</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetAnnotationColor(System.Int32,System.Byte,System.Byte,System.Byte)">
	<summary>
 Sets the color of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<param name="Red">The red component value of the color of the annotation, between 0 and 255.</param>
	<param name="Green">The green component value of the color of the annotation, between 0 and 255.</param>
	<param name="Blue">The blue component value of the color of the annotation, between 0 and 255.</param>
	<returns>A member of the GdPictureStatus enumeration</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetAnnotationColor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>
 Sets the color of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<param name="Cyan">The amount of Cyan color between 0 and 255.</param>
	<param name="Magenta">The amount of Magenta color between 0 and 255.</param>
	<param name="Yellow">The amount of Yellow color between 0 and 255.</param>
	<param name="Black">The amount of Black (key) color between 0 and 255.</param>
	<returns>A member of the GdPictureStatus enumeration</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetAnnotationTitle(System.Int32)">
	<summary>
 Gets the title of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<returns>The title of the annotation.</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetAnnotationTitle(System.Int32,System.String)">
	<summary>
 Sets the title of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<param name="Title">The title of the annotation.</param>
	<returns>A member of the GdPictureStatus enumeration</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.GetAnnotationSubject(System.Int32)">
	<summary>
 Gets the subject of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<returns>The subjct of the annotation.</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.SetAnnotationSubject(System.Int32,System.String)">
	<summary>
 Sets the subject of a specific annotation of the current page.
 </summary>
	<param name="AnnotIdx">The annotation index, between 0 and GetAnnotationCount() -1.</param>
	<param name="Subject">The annotation subject.</param>
	<returns>A member of the GdPictureStatus enumeration.</returns>
	<seealso cref="M:GdPicture.GdPicturePDF.GetAnnotationCount"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetColorMode">
	<summary>
 Returns the active printer color Mode.
 </summary>
	<returns>
 A member of the PrinterColorMode enumeration. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetColorMode(GdPicture.PrinterColorMode)">
	<summary>
 Sets to the active printer the color mode for the print process.
 </summary>
	<param name="ColorMode">A member of the PrinterColorMode enumeration. </param>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetDocumentName">
	<summary>
 Gets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
	<returns>
 The document name to display. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetDocumentName(System.String)">
	<summary>
 Sets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
	<param name="DocumentName">The document name to display. </param>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetShowPrintingProgress(System.Boolean)">
	<summary>
 Tells the component to show or hide progress indicator during printing (showed by default).
 </summary>
	<param name="Show">True to show progress indicators printing, else False.</param>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetPaperBin(System.Int32)">
	<summary>
 Sets the paper bin used by the active printer.
 </summary>
	<param name="PaperBin">The paper bin to use.<para></para></param>
	<returns>
 True if the paper bin has been selected else false (unsupported paper bin). Standard values are:
 
 1 - Upper
 
 2 - Lower
 
 3 - Middle
 
 4 - Manual
 
 5 - Envelope
 
 6 - ManualFeed
 
 7 - AutomaticFeed
 
 8 - TractorFeed
 
 9 - SmallFormat
 
 10 - LargeFormat
 
 11 - LargeCapacity
 
 14 - Cassette
 
 15 - FormSource
 
 256 or larger - Custom 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetPaperBin(System.Drawing.Printing.PaperSource)">
	<summary>
 Sets the paper bin to be used by the active printer.
 </summary>
	<param name="PaperBin">The paper bin to use. A PaperSource object. </param>
	<returns>
 True if the paper bin has been selected else false (unsupported paper bin). 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetPaperBin">
	<summary>
 Returns the paperbin used by the active printer.
 </summary>
	<returns>
 The paperbin used.
 
 Standard values are:
 
 1 - Upper
 
 2 - Lower
 
 3 - Middle
 
 4 - Manual
 
 5 - Envelope
 
 6 - ManualFeed
 
 7 - AutomaticFeed
 
 8 - TractorFeed
 
 9 - SmallFormat
 
 10 - LargeFormat
 
 11 - LargeCapacity
 
 14 - Cassette
 
 15 - FormSource
 
 256 or larger - Custom 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetFromToPage(System.Int32,System.Int32)">
	<summary>
 Ask to the component for the next print process to print a range of page.
 </summary>
	<param name="FromPage">First page to print. </param>
	<param name="ToPage">Last page to print. </param>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetQuality">
	<summary>
 Returns the current quality of the active printer.
 </summary>
	<returns>
 A member of the PrintQuality enumeration. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetQuality(GdPicture.PrintQuality)">
	<summary>
 Sets the quality of the active printer.
 </summary>
	<param name="Quality">A member of the PrintQuality enumeration. </param>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetStat">
	<summary>
 Returns the last Printer status.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintForcePdfDpiRendering(System.Int32)">
	<summary>
 Force the PDF rendering resolution to use during the printing process. For expert only.
 </summary>
	<param name="DPI">The PDF rendering resolution to use for PDF printing. Set -1 for Automatic
                   (default behavior). </param>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetCopies(System.Int16)">
	<summary>
 Tell to the active printer the number of copies to print.
 </summary>
	<param name="Copies">The number of copies to print. </param>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetCopies">
	<summary>
 Returns the number of copies to print with the selected printer.
 </summary>
	<returns>
 Number of copies to print. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetDuplexMode(System.Drawing.Printing.Duplex)">
	<summary>
 Sets duplex mode for the selected printer.
 </summary>
	<param name="DuplexMode">A member of the Duplex enumeration. </param>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetDuplexMode">
	<summary>
 Returns the print duplex mode for the selected printer.
 </summary>
	<returns>
 A member of the Duplex enumeration. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetOrientation(GdPicture.PrinterOrientation)">
	<summary>
 Defines the page orientation when printing.
 </summary>
	<param name="Orientation">A member of the PrinterOrientation enumeration. </param>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetOrientation">
	<summary>
 Returns the page orientation when printing.
 </summary>
	<returns>
 A member of the PrinterOrientation enumeration. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetActivePrinter">
	<summary>
 Returns the selected printer name.
 </summary>
	<returns>
 The name of the selected printer. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetActivePrinter(System.String)">
	<summary>
 Changes the active printer.
 </summary>
	<param name="PrinterName">The name of the new active printer. </param>
	<returns>
 True if success, else False. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetPrintersCount">
	<summary>
 Returns the number of available printers.
 </summary>
	<returns>
 Number of copies. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetPrinterName(System.Int32)">
	<summary>
 Returns the name of an available printer.
 </summary>
	<param name="PrinterNo">Value between 1 and printer count. </param>
	<returns>
 The name of the printer. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintDialog">
	<summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the native document.
 </summary>
	<returns>
 True if success, else False.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetStat"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetPrinterSettings(System.Drawing.Printing.PrinterSettings)">
	<summary>
 Sets the current printer settings.
 </summary>
	<param name="PS">A System.Drawing.Printing.PrinterSettings object. The printer settings.</param>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetPrinterSettings">
	<summary>
 Returns the current printer settings.
 </summary>
	<returns>
 A System.Drawing.Printing.PrinterSettings object. The current printer settings. 
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.PrintDialog(System.Windows.Forms.IWin32Window)">
	<summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the native document.
 
 This function allows to specify the top-level window that will own the modal dialog box.
 </summary>
	<param name="owner">Represents the top-level window that will own the modal dialog box. </param>
	<returns>
 True if success, else False.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetStat"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintDialogFit">
	<summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the native document adjusting pages size to the default paper size.
 </summary>
	<returns>
 True if success, else False.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetStat"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintDialogFit(System.Windows.Forms.IWin32Window)">
	<summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the native document adjusting pages size to the default paper size.
 
 This function allows to specify the top-level window that will own the modal dialog box.
 </summary>
	<param name="owner">Represents the top-level window that will own the modal dialog box. </param>
	<returns>
 True if success, else False.
 </returns>
</member><member name="M:GdPicture.GdPicturePDF.Print">
	<summary>
 Prints the native document the active printer.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetStat"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintFit">
	<summary>
 Prints the native document to the active printer. Adjusts the pages size to the default paper
 size.
 </summary>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetStat"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetStdPaperSize(System.Int32)">
	<summary>
 Sets a standard paper size to use by the active printer.
 </summary>
	<param name="PaperSize">Paper size constant.<para></para>Can be:<para></para>0 - Custom<para></para>1
                         - Letter<para></para>2 - LetterSmall<para></para>3 - Tabloid<para></para>4
                         - Ledger<para></para>5 - Legal<para></para>6 - Statement<para></para>7 -
                         Executive<para></para>8 - A3<para></para>9 - A4<para></para>10 - A4Small<para></para>11
                         - A5<para></para>12 - B4<para></para>13 - B5<para></para>14 - Folio<para></para>15
                         - Quarto<para></para>16 - Standard10x14<para></para>17 - Standard11x17<para></para>18
                         - Note<para></para>19 - Number9Envelope<para></para>20 - Number10Envelope<para></para>21
                         - Number11Envelope<para></para>22 - Number12Envelope<para></para>23 -
                         Number14Envelope<para></para>24 - CSheet<para></para>25 - DSheet<para></para>26
                         - ESheet<para></para>27 - DLEnvelope<para></para>28 - C5Envelope<para></para>29
                         - C3Envelope<para></para>30 - C4Envelope<para></para>31 - C6Envelope<para></para>32
                         - C65Envelope<para></para>33 - B4Envelope<para></para>34 - B5Envelope<para></para>35
                         - B6Envelope<para></para>36 - ItalyEnvelope<para></para>37 -
                         MonarchEnvelope<para></para>38 - PersonalEnvelope<para></para>39 -
                         USStandardFanfold<para></para>40 - GermanStandardFanfold<para></para>41 -
                         GermanLegalFanfold<para></para>42 - IsoB4<para></para>43 - JapanesePostcard<para></para>44
                         - Standard9x11<para></para>45 - Standard10x11<para></para>46 -
                         Standard15x11<para></para>47 - InviteEnvelope<para></para>50 - LetterExtra<para></para>51
                         - LegalExtra<para></para>52 - TabloidExtra<para></para>53 - A4Extra<para></para>54
                         - LetterTransverse<para></para>55 - A4Transverse<para></para>56 -
                         LetterExtraTransverse<para></para>57 - APlus<para></para>58 - BPlus<para></para>59
                         - LetterPlus<para></para>60 - A4Plus<para></para>61 - A5Transverse<para></para>62
                         - B5Transverse<para></para>63 - A3Extra<para></para>64 - A5Extra<para></para>65
                         - B5Extra<para></para>66 - A2<para></para>67 - A3Transverse<para></para>68
                         - A3ExtraTransverse<para></para>69 - JapanesePostcard<para></para>70 - A6<para></para>71
                         - JapaneseEnvelopeKakuNumber2<para></para>72 - JapaneseEnvelopeKakuNumber3<para></para>73
                         - JapaneseEnvelopeChouNumber3<para></para>74 - JapaneseEnvelopeChouNumber4<para></para>75
                         - LetterRotated<para></para>76 - A3Rotated<para></para>77 - A4Rotated<para></para>78
                         - A5Rotated<para></para>79 - B4JisRotated<para></para>80 - B5JisRotated<para></para>81
                         - JapanesePostcardRotated<para></para>82 - JapaneseDoublePostcardRotated<para></para>83
                         - A6Rotated<para></para>84 - JapaneseEnvelopeKakuNumber2Rotated<para></para>85
                         - JapaneseEnvelopeChouNumber3Rotated<para></para>86 -
                         JapaneseEnvelopeChouNumber4Rotated<para></para>87 -
                         JapaneseEnvelopeChouNumber4Rotated<para></para>88 - B6Jis<para></para>89 -
                         B6JisRotated<para></para>90 - Standard12x11<para></para>91 -
                         JapaneseEnvelopeYouNumber4<para></para>92 -
                         JapaneseEnvelopeYouNumber4Rotated<para></para>93 - Prc16K<para></para>94 -
                         Prc32K<para></para>95 - Prc32KBig<para></para>96 - PrcEnvelopeNumber1<para></para>97
                         - PrcEnvelopeNumber2<para></para>98 - PrcEnvelopeNumber3<para></para>99 -
                         PrcEnvelopeNumber4<para></para>100 - PrcEnvelopeNumber5<para></para>101 -
                         PrcEnvelopeNumber6<para></para>102 - PrcEnvelopeNumber7<para></para>103 -
                         PrcEnvelopeNumber8<para></para>104 - PrcEnvelopeNumber9<para></para>105 -
                         PrcEnvelopeNumber10<para></para>106 - Prc16KRotated<para></para>107 -
                         Prc32KRotated<para></para>108 - Prc32KBigRotated<para></para>109 -
                         PrcEnvelopeNumber1Rotated<para></para>110 - PrcEnvelopeNumber2Rotated<para></para>111
                         - PrcEnvelopeNumber3Rotated<para></para>112 - PrcEnvelopeNumber4Rotated<para></para>113
                         - PrcEnvelopeNumber5Rotated<para></para>114 - PrcEnvelopeNumber6Rotated<para></para>115
                         - PrcEnvelopeNumber7Rotated<para></para>116 - PrcEnvelopeNumber8Rotated<para></para>117
                         - PrcEnvelopeNumber9Rotated<para></para>118 - PrcEnvelopeNumber10Rotated<para></para>Greater
                         than 118 - A custom paper size </param>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetPaperSize(System.Drawing.Printing.PaperSize)">
	<summary>
 Sets the paper size to be used by the active printer.
 </summary>
	<param name="PaperSize">Paper size. A PaperSize object.</param>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetUserPaperSize(System.Single,System.Single)">
	<summary>
 Sets a custom paper size to use by the active printer.
 </summary>
	<param name="PaperWidth">Custom paper width in Inches. </param>
	<param name="PaperHeight">Custom paper height in Inches. </param>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetPaperHeight">
	<summary>
 Gets the paper height used by the active printer.
 </summary>
	<returns>
 The paper height in Inches.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetPaperSize"/>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetPaperWidth"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetPaperWidth">
	<summary>
 Gets the paper width used by the active printer.
 </summary>
	<returns>
 The paper width in Inches.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetPaperSize"/>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetPaperHeight"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetAlignment">
	<summary>
 Gets the image alignment into the page during a print process.
 </summary>
	<returns>
 A member of the PrintAlignment enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintSetAlignment(GdPicture.PrintAlignment)"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetAlignment(GdPicture.PrintAlignment)">
	<summary>
 Sets the image alignment into the page during a print process.
 </summary>
	<param name="ImageAlignment">A member of the PrintAlignment enumeration. </param>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetAlignment"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintSetAutoRotation(System.Boolean)">
	<summary>
 Determines if the object rotate automatically pages to fit on the output medium.
 </summary>
	<param name="AutoRotation">True for automatic rotation, else False.</param>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetPaperSize">
	<summary>
 Returns the current paper size of the active printer.
 </summary>
	<returns>
 Paper size constant.
 
 Can be:
 
 1 - Letter
 
 2 - LetterSmall
 
 3 - Tabloid
 
 4 - Ledger
 
 5 - Legal
 
 6 - Statement
 
 7 - Executive
 
 8 - A3
 
 9 - A4
 
 10 - A4Small
 
 11 - A5
 
 12 - B4
 
 13 - B5
 
 14 - Folio
 
 15 - Quarto
 
 16 - Standard10x14
 
 17 - Standard11x17
 
 18 - Note
 
 19 - Number9Envelope
 
 20 - Number10Envelope
 
 21 - Number11Envelope
 
 22 - Number12Envelope
 
 23 - Number14Envelope
 
 24 - CSheet
 
 25 - DSheet
 
 26 - ESheet
 
 27 - DLEnvelope
 
 28 - C5Envelope
 
 29 - C3Envelope
 
 30 - C4Envelope
 
 31 - C6Envelope
 
 32 - C65Envelope
 
 33 - B4Envelope
 
 34 - B5Envelope
 
 35 - B6Envelope
 
 36 - ItalyEnvelope
 
 37 - MonarchEnvelope
 
 38 - PersonalEnvelope
 
 39 - USStandardFanfold
 
 40 - GermanStandardFanfold
 
 41 - GermanLegalFanfold
 
 42 - IsoB4
 
 43 - JapanesePostcard
 
 44 - Standard9x11
 
 45 - Standard10x11
 
 46 - Standard15x11
 
 47 - InviteEnvelope
 
 50 - LetterExtra
 
 51 - LegalExtra
 
 52 - TabloidExtra
 
 53 - A4Extra
 
 54 - LetterTransverse
 
 55 - A4Transverse
 
 56 - LetterExtraTransverse
 
 57 - APlus
 
 58 - BPlus
 
 59 - LetterPlus
 
 60 - A4Plus
 
 61 - A5Transverse
 
 62 - B5Transverse
 
 63 - A3Extra
 
 64 - A5Extra
 
 65 - B5Extra
 
 66 - A2
 
 67 - A3Transverse
 
 68 - A3ExtraTransverse
 
 69 - JapanesePostcard
 
 70 - A6
 
 71 - JapaneseEnvelopeKakuNumber2
 
 72 - JapaneseEnvelopeKakuNumber3
 
 73 - JapaneseEnvelopeChouNumber3
 
 74 - JapaneseEnvelopeChouNumber4
 
 75 - LetterRotated
 
 76 - A3Rotated
 
 77 - A4Rotated
 
 78 - A5Rotated
 
 79 - B4JisRotated
 
 80 - B5JisRotated
 
 81 - JapanesePostcardRotated
 
 82 - JapaneseDoublePostcardRotated
 
 83 - A6Rotated
 
 84 - JapaneseEnvelopeKakuNumber2Rotated
 
 85 - JapaneseEnvelopeChouNumber3Rotated
 
 86 - JapaneseEnvelopeChouNumber4Rotated
 
 87 - JapaneseEnvelopeChouNumber4Rotated
 
 88 - B6Jis
 
 89 - B6JisRotated
 
 90 - Standard12x11
 
 91 - JapaneseEnvelopeYouNumber4
 
 92 - JapaneseEnvelopeYouNumber4Rotated
 
 93 - Prc16K
 
 94 - Prc32K
 
 95 - Prc32KBig
 
 96 - PrcEnvelopeNumber1
 
 97 - PrcEnvelopeNumber2
 
 98 - PrcEnvelopeNumber3
 
 99 - PrcEnvelopeNumber4
 
 100 - PrcEnvelopeNumber5
 
 101 - PrcEnvelopeNumber6
 
 102 - PrcEnvelopeNumber7
 
 103 - PrcEnvelopeNumber8
 
 104 - PrcEnvelopeNumber9
 
 105 - PrcEnvelopeNumber10
 
 106 - Prc16KRotated
 
 107 - Prc32KRotated
 
 108 - Prc32KBigRotated
 
 109 - PrcEnvelopeNumber1Rotated
 
 110 - PrcEnvelopeNumber2Rotated
 
 111 - PrcEnvelopeNumber3Rotated
 
 112 - PrcEnvelopeNumber4Rotated
 
 113 - PrcEnvelopeNumber5Rotated
 
 114 - PrcEnvelopeNumber6Rotated
 
 115 - PrcEnvelopeNumber7Rotated
 
 116 - PrcEnvelopeNumber8Rotated
 
 117 - PrcEnvelopeNumber9Rotated
 
 118 - PrcEnvelopeNumber10Rotated
 
 Greater than 118 - A custom paper size
 </returns>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetPaperWidth"/>
	<seealso cref="M:GdPicture.GdPicturePDF.PrintGetPaperHeight"/>
</member><member name="M:GdPicture.GdPicturePDF.PrintGetMargins(System.Single@,System.Single@)">
	<summary>
 Gets the physical margins of the active printer.
 </summary>
	<param name="LeftMargin">Returns the left physical margin in inches. </param>
	<param name="TopMargin">Returns the top physical margin in inches. </param>
</member><member name="F:GdPicture.PdfAnnotationFlag.PdfAnnotationFlagInvisible">
	<summary>
 If set, do not display the annotation if it does not belong to one of the standard annotation types and no annotation handler is available.
 If clear, display such an unknown annotation using an appearance stream specified by its appearance dictionary, if any.
</summary>
</member><member name="F:GdPicture.PdfAnnotationFlag.PdfAnnotationFlagHidden">
	<summary>
 (PDF 1.2) If set, do not display or print the annotation or allow it to interact with the user,
 regardless of its annotation type or whether an annotation handler is available.
 In cases where screen space is limited, the ability to hide and show annotations selectively can be used in combination with appearance streams.
</summary>
</member><member name="F:GdPicture.PdfAnnotationFlag.PdfAnnotationFlagPrint">
	<summary>
 (PDF 1.2) If set, print the annotation when the page is printed.
 If clear, never print the annotation, regardless of whether it is displayed on the screen.
 This can be useful, for example, for annotations representing interactive pushbuttons,
 which would serve no meaningful purpose on the printed page.
</summary>
</member><member name="F:GdPicture.PdfAnnotationFlag.PdfAnnotationFlagNoZoom">
	<summary>
 (PDF 1.3) If set, do not scale the annotation’s appearance to match the magnification of the page.
 The location of the annotation on the page (defined by the upper-left corner of its annotation rectangle) remains fixed,
 regardless of the page magnification. See below for further discussion.
</summary>
</member><member name="F:GdPicture.PdfAnnotationFlag.PdfAnnotationFlagNoRotate">
	<summary>
 (PDF 1.3) If set, do not rotate the annotation’s appearance to match the rotation of the page.
 The upper-left corner of the annotation rectangle remains in a fixed location on the page,
 regardless of the page rotation. See below for further discussion.
</summary>
</member><member name="F:GdPicture.PdfAnnotationFlag.AnnotationFlagNoView">
	<summary>
 (PDF 1.3) If set, do not display the annotation on the screen or allow it to interact with the user.
 The annotation may be printed (depending on the setting of the Print flag) but should be considered hidden for purposes of on-screen display and user interaction.
</summary>
</member><member name="F:GdPicture.PdfAnnotationFlag.PdfAnnotationFlagReadOnly">
	<summary>
 (PDF 1.3) If set, do not allow the annotation to interact with the user.
 The annotation may be displayed or printed (depending on the settings of the NoView and Print flags)
 but should not respond to mouse clicks or change its appearance in response to mouse motions.
 Note: This flag is ignored for widget annotations; its function is subsumed by the ReadOnly flag of the associated form field
</summary>
</member><member name="F:GdPicture.PdfAnnotationFlag.PdfAnnotationFlagLocked">
	<summary>
 (PDF 1.4) If set, do not allow the annotation to be deleted or its properties (including position and size) to be modified by the user.
 However, this flag does not restrict changes to the annotation’s contents, such as the value of a form field.
</summary>
</member><member name="F:GdPicture.PdfAnnotationFlag.PdfAnnotationFlagToggleNoView">
	<summary>
 (PDF 1.5) If set, invert the interpretation of the NoView flag for certain events.
 A typical use is to have an annotation that appears only when a mouse cursor is held over it;
</summary>
</member><member name="F:GdPicture.PdfAnnotationFlag.PdfAnnotationFlagLockedContents">
	<summary>
 (PDF 1.7) If set, do not allow the contents of the annotation to be modified by the user.
 This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size.
</summary>
</member><member name="F:GdPicture.PdfFormFieldType.PdfFormFieldTypeUnknown">
	<summary>
Undefined type. Check for error.
</summary>
</member><member name="F:GdPicture.PdfFormFieldType.PdfFormFieldTypePushButton">
	<summary>
A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.
</summary>
</member><member name="F:GdPicture.PdfFormFieldType.PdfFormFieldTypeCheckBoxButton">
	<summary>
A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.
</summary>
</member><member name="F:GdPicture.PdfFormFieldType.PdfFormFieldTypeRadioButton">
	<summary>
A check box toggles between two states, on and off.
</summary>
</member><member name="F:GdPicture.PdfFormFieldType.PdfFormFieldTypeText">
	<summary>
A Radio button fields contain a set of related buttons that can each be on or off.
Typically, at most one radio button in a set may be on at any given time,
and selecting any one of the buttons automatically deselects all the others..
</summary>
</member><member name="F:GdPicture.PdfFormFieldType.PdfFormFieldTypeChoice">
	<summary>
Choice Field.
</summary>
</member><member name="F:GdPicture.PdfFormFieldType.PdfFormFieldTypeSignature">
	<summary>
Signature Field.
</summary>
</member><member name="F:GdPicture.PdfAnnotationBorderStyle.PdfAnnotationBorderStyleSolid">
	<summary>
(Default) A solid rectangle surrounding the annotation.
</summary>
</member><member name="F:GdPicture.PdfAnnotationBorderStyle.PdfAnnotationBorderStyleDashed">
	<summary>
A dashed rectangle surrounding the annotation.
</summary>
</member><member name="F:GdPicture.PdfAnnotationBorderStyle.PdfAnnotationBorderStyleBeveled">
	<summary>
A simulated embossed rectangle that appears to be raised above the surface of the page.
</summary>
</member><member name="F:GdPicture.PdfAnnotationBorderStyle.PdfAnnotationBorderStyleInset">
	<summary>
A simulated engraved rectangle that appears to be recessed below the surface of the page.
</summary>
</member><member name="F:GdPicture.PdfAnnotationBorderStyle.PdfAnnotationBorderStyleUnderline">
	<summary>
A single line along the bottom of the annotation rectangle.
</summary>
</member><member name="F:GdPicture.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleSquare">
	<summary>
A square filled with the annotation’s interior color, if any.
</summary>
</member><member name="F:GdPicture.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleCircle">
	<summary>
A circle filled with the annotation’s interior color, if any.
</summary>
</member><member name="F:GdPicture.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleDiamond">
	<summary>
A diamond shape filled with the annotation’s interior color, if any.
</summary>
</member><member name="F:GdPicture.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleOpenArrow">
	<summary>
Two short lines meeting in an acute angle to form an open arrowhead.
</summary>
</member><member name="F:GdPicture.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleClosedArrow">
	<summary>
Two short lines meeting in an acute angle as in the OpenArrow style
and connected by a third line to form a triangular closed arrowhead filled with
the annotation’s interior color, if any
</summary>
</member><member name="F:GdPicture.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleNone">
	<summary>
No line ending
</summary>
</member><member name="F:GdPicture.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleButt">
	<summary>
(PDF 1.5) A short line at the endpoint perpendicular to the line itself.
</summary>
</member><member name="F:GdPicture.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleROpenArrow">
	<summary>
(PDF 1.5) Two short lines in the reverse direction from OpenArrow.
</summary>
</member><member name="F:GdPicture.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleRClosedArrow">
	<summary>
(PDF 1.5) A triangular closed arrowhead in the reverse direction from ClosedArrow.
</summary>
</member><member name="F:GdPicture.PdfAnnotationLineEndingStyle.PdfAnnotationLineEndingStyleSlash">
	<summary>
(PDF 1.6) A short line at the endpoint approximately 30 degrees clockwise from perpendicular
to the line itself.
</summary>
</member><member name="F:GdPicture.PdfMeasurementUnit.PdfMeasurementUnitPoint">
	<summary>
Point. 1 point = 1/72 inch.
</summary>
</member><member name="F:GdPicture.PdfMeasurementUnit.PdfMeasurementUnitMillimeter">
	<summary>
Millimeters.
</summary>
</member><member name="F:GdPicture.PdfMeasurementUnit.PdfMeasurementUnitCentimeter">
	<summary>
Centimeters. 1 centimeter = 1/2.54 inch.
</summary>
</member><member name="F:GdPicture.PdfMeasurementUnit.PdfMeasurementUnitInch">
	<summary>
Inch. 1 inch = 72 points.
</summary>
</member><member name="F:GdPicture.PdfTextMode.PdfTextModeFill">
	<summary>
Fill text.
</summary>
</member><member name="F:GdPicture.PdfTextMode.PdfTextModeStroke">
	<summary>
Stroke text.
</summary>
</member><member name="F:GdPicture.PdfTextMode.PdfTextModeFillStroke">
	<summary>
Fill, then stroke text.
</summary>
</member><member name="F:GdPicture.PdfTextMode.PdfTextModeInvisible">
	<summary>
Neither fill nor stroke text (invisible).
</summary>
</member><member name="F:GdPicture.PdfTextMode.PdfTextModeFillPath">
	<summary>
Fill text and add to path for clipping (see above).
</summary>
</member><member name="F:GdPicture.PdfTextMode.PdfTextModeOutlinePath">
	<summary>
Stroke text and add to path for clipping.
</summary>
</member><member name="F:GdPicture.PdfTextMode.PdfTextModeFillStrokePath">
	<summary>
Fill, then stroke text and add to path for clipping.
</summary>
</member><member name="F:GdPicture.PdfTextMode.PdfTextClipPath">
	<summary>
Add text to path for clipping.
</summary>
</member><member name="F:GdPicture.PdfPageBox.PdfPageBoxMediaBox">
	<summary>
Defines the boundaries of the physical medium on which the page is intended to be displayed or printed.
</summary>
</member><member name="F:GdPicture.PdfPageBox.PdfPageBoxCropBox">
	<summary>
Defines the visible region. When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle and then imposed on the output medium.
</summary>
</member><member name="F:GdPicture.PdfPageBox.PdfPageBoxBleedBox">
	<summary>
Defines the region to which the contents of the page should be clipped when output in a production environment.
</summary>
</member><member name="F:GdPicture.PdfPageBox.PdfPageBoxTrimBox">
	<summary>
Defines the intended dimensions of the finished page after trimming.
</summary>
</member><member name="F:GdPicture.PdfPageBox.PdfPageBoxArtBox">
	<summary>
Defines the extent of the page’s meaningful content (including potential white space) as intended by the page’s creator.
</summary>
</member><member name="F:GdPicture.PdfRight.PdfRightUndefined">
	<summary>
Do not use.
</summary>
</member><member name="F:GdPicture.PdfRight.PdfRightCanView">
	<summary>
Allows the user to view the document. Always available.
</summary>
</member><member name="F:GdPicture.PdfRight.PdfRightCanPrint">
	<summary>
Allows the user to print the document.
</summary>
</member><member name="F:GdPicture.PdfRight.PdfRightCanModify">
	<summary>
Allows the user to edit the document.
</summary>
</member><member name="F:GdPicture.PdfRight.PdfRightCanCopy">
	<summary>
Allows the user to copy text and graphics from the document.
</summary>
</member><member name="F:GdPicture.PdfRight.PdfRightCanAddNotes">
	<summary>
Allows the user to add annotations.
</summary>
</member><member name="F:GdPicture.PdfRight.PdfRightCanFillFields">
	<summary>
Allows the user to fill in form fields. Only works with 128-bit encryption.
</summary>
</member><member name="F:GdPicture.PdfRight.PdfRightCanCopyAccess">
	<summary>
Enables copying for use with accessibility features. Only works with 128-bit encryption.
</summary>
</member><member name="F:GdPicture.PdfRight.PdfRightCanAssemble">
	<summary>
Allows the user to assemble the document. Only works with 128-bit encryption.
</summary>
</member><member name="F:GdPicture.PdfRight.PdfRightCanPrintFull">
	<summary>
Allows high resolution printing of the document. Only works with 128-bit encryption.
</summary>
</member><member name="F:GdPicture.PdfLineCapStyle.PdfLineCapStyleButt">
	<summary>
Butt cap
</summary>
</member><member name="F:GdPicture.PdfLineCapStyle.PdfLineCapStyleRound">
	<summary>
Round cap
</summary>
</member><member name="F:GdPicture.PdfLineCapStyle.PdfLineCapStyleProjectingSquare">
	<summary>
Projecting square cap
</summary>
</member><member name="F:GdPicture.PdfLineJoinStyle.PdfLineJoinStyleMiter">
	<summary>
Butt join
</summary>
</member><member name="F:GdPicture.PdfLineJoinStyle.PdfLineJoinStyleRound">
	<summary>
Round join
</summary>
</member><member name="F:GdPicture.PdfLineJoinStyle.PdfLineJoinStyleBevel">
	<summary>
Projecting square join
</summary>
</member><member name="F:GdPicture.PdfFillMode.PdfFillModeWinding">
	<summary>
 When filling path, uses the nonzero winding number rule to
 determine the region to fill.
</summary>
</member><member name="F:GdPicture.PdfFillMode.PdfFillModeAlternate">
	<summary>
 When filling path, uses the even-odd rule to determine the
 region to fill.
</summary>
</member><member name="F:GdPicture.PdfCompression.PdfCompressionNone">
	<summary>
No compression.
</summary>
</member><member name="F:GdPicture.PdfCompression.PdfCompressionFlate">
	<summary>
Flate compression.
</summary>
</member><member name="F:GdPicture.PdfCompression.PdfCompressionCCITT4">
	<summary>
CCITT group 4 - International Consultative Committee on Telegraphy and Telephony.
</summary>
</member><member name="F:GdPicture.PdfCompression.PdfCompressionJBIG2">
	<summary>
Joint Bi-level Image Experts Group.See: http://en.wikipedia.org/wiki/JBIG2 Requires the optional GdPicture JBIG2 Encoder Plugin.
</summary>
</member><member name="F:GdPicture.ExrCompression.ExrCompressionDefault">
	<summary>
Save data as half with piz-based wavelet compression.
</summary>
</member><member name="F:GdPicture.ExrCompression.ExrCompressionFloat">
	<summary>
Save data as float instead of as half (not recommended).
</summary>
</member><member name="F:GdPicture.ExrCompression.ExrCompressionNone">
	<summary>
Save with no compression
</summary>
</member><member name="F:GdPicture.ExrCompression.ExrCompressionZip">
	<summary>
Save with zlib compression, in blocks of 16 scan lines.
</summary>
</member><member name="F:GdPicture.ExrCompression.ExrCompressionPiz">
	<summary>
Save with piz-based wavelet compression.
</summary>
</member><member name="F:GdPicture.ExrCompression.ExrCompressionPxr24">
	<summary>
Save with lossy 24-bit float compression.
</summary>
</member><member name="F:GdPicture.ExrCompression.ExrCompressionB44">
	<summary>
Save with lossy 44% float compression - goes to 22% when combined with ExrCompressionLC.
</summary>
</member><member name="F:GdPicture.ExrCompression.ExrCompressionLC">
	<summary>
Save images with one luminance and two chroma channels, rather than as RGB (lossy compression).
</summary>
</member><member name="F:GdPicture.HolePunchMargins.MarginLeft">
	<summary>
Checks the Left Margin of the Document.
</summary>
</member><member name="F:GdPicture.HolePunchMargins.MarginRight">
	<summary>
Checks the Right Margin of the Document.
</summary>
</member><member name="F:GdPicture.HolePunchMargins.MarginTop">
	<summary>
Checks the Top Margin of the Document.
</summary>
</member><member name="F:GdPicture.HolePunchMargins.MarginBottom">
	<summary>
Checks the Bottom Margin of the Document.
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionNONE">
	<summary>
No compression
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionRLE">
	<summary>
CCITT modified Huffman RLE
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionCCITT3">
	<summary>
CCITT Group 3 fax encoding
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionCCITT4">
	<summary>
CCITT Group 4 fax encoding
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionLZW">
	<summary>
Lempel-Ziv  and Welch
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionOJPEG">
	<summary>
!6.0 JPEG
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionJPEG">
	<summary>
%JPEG DCT compression
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionADOBEDEFLATE">
	<summary>
Deflate compression,as recognized by Adobe
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionNEXT">
	<summary>
NeXT 2-bit RLE
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionCCITTRLEW">
	<summary>
#1 w/ word alignment
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionPACKBITS">
	<summary>
Macintosh RLE
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionTHUNDERSCAN">
	<summary>
ThunderScan RLE
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionDEFLATE">
	<summary>
Deflate compression
</summary>
</member><member name="F:GdPicture.TiffCompression.TiffCompressionAUTO">
	<summary>
Uses CCITT4 compression for bitonal image and LZW for others. TiffCompressionAUTO allows to mix compression in a multipage tiff document.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.OK">
	<summary>
Indicates that the method was successful.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.GenericError">
	<summary>
Indicates that there was an error on the method call, which is identified as something other than those defined by the other elements of this enumeration.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InvalidParameter">
	<summary>
Indicates that one of the arguments passed to the method was not valid.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.OutOfMemory">
	<summary>
Indicates that the operating system is out of memory and could not allocate memory to process the method call.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.ObjectBusy">
	<summary>
Indicates that one of the arguments specified in the API is already in use in another thread.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InsufficientBuffer">
	<summary>
Indicates that a buffer specified as an argument in the API is not large enough to hold the data to be received.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.NotImplemented">
	<summary>
Indicates that the method is not implemented.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.Win32Error">
	<summary>
Indicates that the method generated a Microsoft Win32 error.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.WrongState">
	<summary>
Indicates that the object is in an invalid state to satisfy the API call.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.Aborted">
	<summary>
Indicates that the method was aborted.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.FileNotFound">
	<summary>
Indicates that the specified image file or metafile cannot be found.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.ValueOverflow">
	<summary>
Indicates that the method performed an arithmetic operation that produced a numeric overflow.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.AccessDenied">
	<summary>
Indicates that a write operation is not allowed on the specified file.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.UnknownImageFormat">
	<summary>
Indicates that the specified image file format is not known.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.FontFamilyNotFound">
	<summary>
Indicates that the specified font family cannot be found. Either the font family name is incorrect or the font family is not installed.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.FontStyleNotFound">
	<summary>
Indicates that the specified style is not available for the specified font family.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.NotTrueTypeFont">
	<summary>
Indicates that the font retrieved from an HDC or LOGFONT is not a TrueType font and cannot be used with GdPicture.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.UnsupportedGdiplusVersion">
	<summary>
Indicates that the version of GDI+ that is installed on the system is incompatible with the version needed by GdPicture.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.GdiplusNotInitialized">
	<summary>
Indicates that the GDI+API is not in an initialized state. Should never appends.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PropertyNotFound">
	<summary>
Indicates that the specified property does not exist in the image.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PropertyNotSupported">
	<summary>
Indicates that the specified property is not supported by the format of the image and, therefore, cannot be set.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.ProfileNotFound">
	<summary>
Indicates that the color profile required to save an image in CMYK format was not found.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.UnsupportedImageFormat">
	<summary>
Indicates that the format of the image is not supported by the method.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.TemplateNotFound">
	<summary>
The template was not found by the GdPicture ADR engine.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.TwainError">
	<summary>
Indicates that an error was raised by the TWAIN plugin.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.WrongGdTwainVersion">
	<summary>
Indicates that the GdPicture.NET.twain.gdtwain.dll version are invalid.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BadTwainState">
	<summary>
Indicates that an error of state was raised by the TWAIN plugin.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.TwainTransferCanceled">
	<summary>
Indicates that a transfer cancellation was raised by the TWAIN plugin.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.TwainTransferError">
	<summary>
Indicates that an error of transfer was raised by the TWAIN plugin.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.TwainInvalidTransferMode">
	<summary>
Indicates that the selected transfer mode is not supported by the current device.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.CanNotCreateFile">
	<summary>
Indicates that the file passed as parameter to the method can not be created.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InvalidBarCode">
	<summary>
Indicates that the barcode data passed as parameter to the method are invalid.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.NotIndexedPixelFormat">
	<summary>
Indicates that the method needs an image with an indexed pixel format.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.UnsupportedPixelFormat">
	<summary>
Indicates that the method doesn't support the pixel format of the image.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InvalidPDFHandle">
	<summary>
Indicates that the PDF handle provided is invalid or inexistant.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InternetOpenError">
	<summary>
Could not access to Internet.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InternetConnectError">
	<summary>
An error occurred during the Internet connexion.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InternetHttpOpenRequestError">
	<summary>
An error occurred during the HTTP open request.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InternetHttpQueryError">
	<summary>
An error occurred during the HTTP query.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InternetHttpSendRequestError">
	<summary>
An error occurred sending an HTTP request.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InternetHttpInvalidFileLength">
	<summary>
The length of the file returned from the HTTP server is invalid or null.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InternetHttpTransferError">
	<summary>
An error occurred during the HTTP transfer.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InternetHTTPWriteFileError">
	<summary>
An error occurred during the HTTP writing operation.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InternetFtpGetFileError">
	<summary>
An error occurred downloading a file from the FTP server.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InternetFtpWriteFileError">
	<summary>
An error occurred writing a file to the FTP server.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PdfDocumentMustBeUnencrypted">
	<summary>
The PDF must be unencrypted before performing this operation.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PdfCanNotBeDecrypted">
	<summary>
The PDF can not be decrypted by GdPicture.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PdfPasswordNeeded">
	<summary>
A password was required to open this PDF.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PdfBadPassword">
	<summary>
The password supplied to open the PDF was invalid.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PdfCanNotOpenFile">
	<summary>
The PDF file can not be opened.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PdfRenderingPageError">
	<summary>
Indicates that GdPicture was not able to process the document.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PdfGenericError">
	<summary>
Indicates that there was an error related to PDF manipulation, which is identified as something other than those defined by the other elements of this enumeration.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PdfErrorAddingImage">
	<summary>
The image has not been added to the PDF.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PdfUnsupportedInPdfA">
	<summary>
The operation is not supported in PDF/A.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.PdfInvalidContent">
	<summary>
An invalid PDF structure or content have been encountered.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.GdimgplugDllRequired">
	<summary>
The GdPicture.NET.image.gdimgplug.dll library was needed or was not found on the computer.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.WrongGdimgplugVersion">
	<summary>
The GdPicture.NET.image.gdimgplug.dll version found on the computer is older.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.OCRTesseractDllRequired">
	<summary>
The GdPicture.NET.ocr.tesseract.dll library was needed or was not found on the computer.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.OCRDictionaryNotFound">
	<summary>
The GdPicture.NET.ocr.tesseract.dll raised an unhandled exception.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.OCRUnhandledException">
	<summary>
The dictionary files needed by the GdPicture Tesseract plugin was not found on the specified path.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.CertificateWrongPassword">
	<summary>
The password provided for the certificate in invalid.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.CertificateWrongFormat">
	<summary>
The provided certificate has wrong or unsupported format.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.CertificateWrongPrivateKey">
	<summary>
The provided certificate does not includes private key.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeInvalidLength">
	<summary>
Data format invalid. (Invalid length).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeInvalidStart">
	<summary>
Data format invalid. (Invalid START character).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeInvalidStop">
	<summary>
Data format invalid. (Invalid STOP character).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeLengthMustBe13or14">
	<summary>
Data length invalid. (Length must be 13 or 14).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeNotNumeric">
	<summary>
Numeric data only.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeCanNotDetermineStart">
	<summary>
Could not determine start character.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeUnknownStartType">
	<summary>
Unknown start type in fixed type encoding.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeNoStartInCurrentCodeSet">
	<summary>
No start character found in CurrentCodeSet.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeCouldNotInsertStart">
	<summary>
Could not insert start and code characters.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeNoEncodingValueFound">
	<summary>
Could not find encoding of a value in the formatted data.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeInvalidData">
	<summary>
Invalid Data.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeInvalidDestinationSize">
	<summary>
Destination not large enough to draw the barcode.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeInvalidManufacturerCode">
	<summary>
Country assigning manufacturer code not found.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeLengthMustBe7or8">
	<summary>
Invalid data length. (7 or 8 numbers only).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeLengthMustBeMultipleOf2">
	<summary>
Data length invalid. Must be a multiple of 2.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeMustStartWith978orBadLength">
	<summary>
Invalid input.  Must start with 978 and be length must be 9, 10, 12, 13 characters.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeMustStartWith49">
	<summary>
Invalid Country Code for JAN13 (49 required).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeBarcodeLengthMustBe5or6or9or11">
	<summary>
Invalid data length. (5, 6, 9, or 11 digits only).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeBarcodeLengthMustBe12">
	<summary>
Data length invalid. (Length must be 12).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeBarcodeLengthMustBe8or12">
	<summary>
Invalid data length. (8 or 12 numbers only).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeBarcodeMustBinaryChar">
	<summary>
Invalid Number System (only 0 and 1 are valid).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeIllegalUPCA">
	<summary>
Illegal UPC-A entered for conversion.  Unable to convert.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeBarcodeLengthMustBe2">
	<summary>
Invalid data length. (Length = 2 required).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeBarcodeLengthMustBe5">
	<summary>
Invalid data length. (Length = 5 required).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeLengthMustBe12or13">
	<summary>
Data length invalid. (Length must be 12 or 13).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeLengthMustBe11or12">
	<summary>
Data length invalid. (Length must be 11 or 12).
</summary>
</member><member name="F:GdPicture.GdPictureStatus.Barcode1DReaderPluginNotLoaded">
	<summary>
Can't load GdPicture.NET.barcode.1d.reader.dll.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.Barcode1DReaderUnknownError">
	<summary>
Unknown error reported from the 1D Barcode reader plugin.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeDataMatrixReaderPluginNotLoaded">
	<summary>
Can't load the DataMatrix reader dll.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeDataMatrixReaderUnknownError">
	<summary>
Unknown error reported from the DataMatrix Barcode reader plugin.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.BarcodeQRCodeReaderPluginNotLoaded">
	<summary>
Can't load the QR-Code reader dll.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.EncryptionSchemeNotSupported">
	<summary>
The selected encryption scheme is not supported.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.JBIG2PluginNotLoaded">
	<summary>
Can't load GdPicture.NET.jbig2.encoder.dll.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.InvalidLicense">
	<summary>
The license key provided doesn't include this feature.
</summary>
</member><member name="F:GdPicture.GdPictureStatus.WIAGenericError">
	<summary>
WIA error. Use WiaGetLastError() functions for diagnosing the error.
</summary>
</member><member name="F:GdPicture.JPEGTransformation.JPEGTransformationotate90">
	<summary>
Specifies that the image is to be rotated clockwise 90 degrees about its center.
</summary>
</member><member name="F:GdPicture.JPEGTransformation.JPEGTransformationRotate180">
	<summary>
Specifies that the image is to be rotated 180 degrees about its center.
</summary>
</member><member name="F:GdPicture.JPEGTransformation.JPEGTransformationRotate270">
	<summary>
Specifies that the image is to be rotated clockwise 270 degrees about its center.
</summary>
</member><member name="F:GdPicture.JPEGTransformation.JPEGTransformationFlipHorizontal">
	<summary>
Specifies that the image is to be flipped horizontally (about the vertical axis).
</summary>
</member><member name="F:GdPicture.JPEGTransformation.JPEGTransformationFlipVertical">
	<summary>
Specifies that the image is to be flipped vertically (about the horizontal axis).
</summary>
</member><member name="F:GdPicture.UnitMode.UnitWorld">
	<summary>
Do not use
</summary>
</member><member name="F:GdPicture.UnitMode.UnitDisplay">
	<summary>
Do not use
</summary>
</member><member name="F:GdPicture.UnitMode.UnitPixel">
	<summary>
Each unit is one device pixel.
</summary>
</member><member name="F:GdPicture.UnitMode.UnitPoint">
	<summary>
Each unit is a printer's point, or 1/72 inch.
</summary>
</member><member name="F:GdPicture.UnitMode.UnitInch">
	<summary>
Each unit is 1 inch.
</summary>
</member><member name="F:GdPicture.UnitMode.UnitDocument">
	<summary>
Each unit is 1/300 inch.
</summary>
</member><member name="F:GdPicture.UnitMode.UnitMillimeter">
	<summary>
Each unit is 1 millimeter.
</summary>
</member><member name="F:GdPicture.TwainStatus.TWAIN_ERROR">
	<summary>
Unknown Error.
</summary>
</member><member name="F:GdPicture.TwainStatus.TWAIN_PRESESSION">
	<summary>
Presession, Twain environment is enable.
</summary>
</member><member name="F:GdPicture.TwainStatus.TWAIN_SM_LOADED">
	<summary>
Source Manager was loaded.
</summary>
</member><member name="F:GdPicture.TwainStatus.TWAIN_SM_OPEN">
	<summary>
Source Manager is open.
</summary>
</member><member name="F:GdPicture.TwainStatus.TWAIN_SOURCE_OPEN">
	<summary>
A source is open.
</summary>
</member><member name="F:GdPicture.TwainStatus.TWAIN_SOURCE_ENABLED">
	<summary>
A source is enabled.
</summary>
</member><member name="F:GdPicture.TwainStatus.TWAIN_TRANSFER_READY">
	<summary>
A source is ready to transfer data.
</summary>
</member><member name="F:GdPicture.TwainStatus.TWAIN_TRANSFERRING">
	<summary>
A source is transfering data.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_BW">
	<summary>
Black and White.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_GRAY">
	<summary>
Grayscale.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_RGB">
	<summary>
RGB color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_PALETTE">
	<summary>
Color palette.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_CMY">
	<summary>
CMY color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_CMYK">
	<summary>
CMYK color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_YUV">
	<summary>
YUV color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_YUVK">
	<summary>
YUVK color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_CIEXYZ">
	<summary>
CIEXYZ color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_LAB">
	<summary>
LAB color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_SRGB">
	<summary>
SRGB color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_SCRGB">
	<summary>
SCRGB color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_BGR">
	<summary>
BGR color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_CIELAB">
	<summary>
CIELAB color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_CIELUV">
	<summary>
CIELLUV color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_YCBCR">
	<summary>
YCBR color space.
</summary>
</member><member name="F:GdPicture.TwainPixelType.TWPT_INFRARED">
	<summary>
Infrared color space.
</summary>
</member><member name="F:GdPicture.TwainBarCodeRotation.TWBCOR_ROT0">
	<summary>
Normal reading orientation.
</summary>
</member><member name="F:GdPicture.TwainBarCodeRotation.TWBCOR_ROT90">
	<summary>
Rotated 90 degrees clockwise.
</summary>
</member><member name="F:GdPicture.TwainBarCodeRotation.TWBCOR_ROT180">
	<summary>
Rotated 180 degrees clockwise.
</summary>
</member><member name="F:GdPicture.TwainBarCodeRotation.TWBCOR_ROT270">
	<summary>
Rotated 270 degrees clockwise.
</summary>
</member><member name="F:GdPicture.TwainBarCodeRotation.TWBCOR_ROTX">
	<summary>
The orientation is not known.
</summary>
</member><member name="F:GdPicture.TwainResultCode.TWRC_SUCCESS">
	<summary>
Operation was successful.
</summary>
</member><member name="F:GdPicture.TwainResultCode.TWRC_FAILURE">
	<summary>
Operation failed - get the Condition Code for more information.
</summary>
</member><member name="F:GdPicture.TwainResultCode.TWRC_CHECKSTATUS">
	<summary>
Partially successful operation; request further information.
</summary>
</member><member name="F:GdPicture.TwainResultCode.TWRC_CANCEL">
	<summary>
Abort transfer or the Cancel button was pressed.
</summary>
</member><member name="F:GdPicture.TwainResultCode.TWRC_DSEVENT">
	<summary>
Event or Windows message beIntegers to this Source.
</summary>
</member><member name="F:GdPicture.TwainResultCode.TWRC_NOTDSEVENT">
	<summary>
Event or Windows message does not beInteger to this source.
</summary>
</member><member name="F:GdPicture.TwainResultCode.TWRC_XFERDONE">
	<summary>
All data has been transfered.
</summary>
</member><member name="F:GdPicture.TwainResultCode.TWRC_ENDOFLIST">
	<summary>
No more sources found after MSG_GETNEXT.
</summary>
</member><member name="F:GdPicture.TwainResultCode.TWRC_INFONOTSUPPORTED">
	<summary>
The type of information requested is not supported by the data source.
</summary>
</member><member name="F:GdPicture.TwainResultCode.TWRC_DATANOTAVAILABLE">
	<summary>
Data for the requested information is not available.
</summary>
</member><member name="F:GdPicture.TwainPixelFlavor.TwainPixelFlavorUndefined">
	<summary>
Do not use.
</summary>
</member><member name="F:GdPicture.TwainPixelFlavor.TwainPixelFlavorChocolate">
	<summary>
zero pixel represents darkest shade.
</summary>
</member><member name="F:GdPicture.TwainPixelFlavor.TwainPixelFlavorVanilla">
	<summary>
zero pixel represents lightest shade.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_SUCCESS">
	<summary>
It worked!
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_BUMMER">
	<summary>
Failure due to unknown causes.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_LOWMEMORY">
	<summary>
Not enough memory to perform operation.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_NODS">
	<summary>
No Data Source.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_MAXCONNECTIONS">
	<summary>
DS is connected to max possible applications.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_OPERATIONERROR">
	<summary>
DS or DSM reported error, application shouldn't.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_BADCAP">
	<summary>
Unknown capability.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_BADPROTOCOL">
	<summary>
Unrecognized MSG DG DAT combination.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_BADVALUE">
	<summary>
Data parameter out of range.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_SEQERROR">
	<summary>
DG DAT MSG out of expected sequence.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_BADDEST">
	<summary>
Unknown destination Application/Source in DSM_Entry.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_CAPUNSUPPORTED">
	<summary>
Capability not supported by source.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_CAPBADOPERATION">
	<summary>
Operation not supported by capability.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_CAPSEQERROR">
	<summary>
Capability has dependancy on other capability.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_DENIED">
	<summary>
File System operation is denied (file is protected).
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_FILEEXISTS">
	<summary>
Operation failed because file already exists.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_FILENOTFOUND">
	<summary>
File not found.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_NOTEMPTY">
	<summary>
Operation failed because directory is not empty.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_PAPERJAM">
	<summary>
The feeder is jammed.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_PAPERDOUBLEFEED">
	<summary>
The feeder detected multiple pages.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_FILEWRITEERROR">
	<summary>
Error writing the file (meant for things like disk full conditions).
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_CHECKDEVICEONLINE">
	<summary>
Device seems to be offline.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_INTERLOCK">
	<summary>
Cover or door is open.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_DAMAGEDCORNER">
	<summary>
Document has a damaged corner.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_FOCUSERROR">
	<summary>
Focusing error during document capture.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_DOCTOOLIGHT">
	<summary>
Document is too light.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_DOCTOODARK">
	<summary>
Document is too dark.
</summary>
</member><member name="F:GdPicture.TwainConditionCode.TWCC_NOMEDIA">
	<summary>
No Media...
</summary>
</member><member name="F:GdPicture.TwainOrientation.TWOR_AUTO">
	<summary>
Orients the image according to criteria determined by the source.
</summary>
</member><member name="F:GdPicture.TwainOrientation.TWOR_AUTOTEXT">
	<summary>
Orients the document using text only algorithms.
</summary>
</member><member name="F:GdPicture.TwainOrientation.TWOR_AUTOPICTURE">
	<summary>
Orients the document using image only algorithms.
</summary>
</member><member name="F:GdPicture.PaletteType.PaletteTypeUndefined">
	<summary>
The palette type is undefined.
</summary>
</member><member name="F:GdPicture.PaletteType.PaletteTypeHasAlpha">
	<summary>
Indicates that the palette entries support alpha channel .
</summary>
</member><member name="F:GdPicture.PaletteType.PaletteTypeGrayScale">
	<summary>
Indicates that the palette is a grayscale palette.
</summary>
</member><member name="F:GdPicture.PaletteType.PaletteTypeGrayScaleAlpha">
	<summary>
Indicates that the palette is a grayscale palette with alpha channel support for his entries.
</summary>
</member><member name="F:GdPicture.PaletteType.PaletteTypeHalfTone">
	<summary>
Indicates that the palette is an half tone palette.
</summary>
</member><member name="F:GdPicture.PaletteType.PaletteTypeHalfToneAlpha">
	<summary>
Indicates that the palette is an half tone palette with alpha channel support for his entries.
</summary>
</member><member name="F:GdPicture.ImageColorSpace.ImageColorSpaceUnknown">
	<summary>
Specifies no format information.
</summary>
</member><member name="F:GdPicture.ImageColorSpace.ImageColorSpaceRGB">
	<summary>
Specifies that the image is stored using an RGB color space.
</summary>
</member><member name="F:GdPicture.ImageColorSpace.ImageColorSpaceCMYK">
	<summary>
Specifies that the image is stored using a CMYK color space.
</summary>
</member><member name="F:GdPicture.ImageColorSpace.ImageColorSpaceGRAY">
	<summary>
Specifies that the image is a grayscale image.
</summary>
</member><member name="F:GdPicture.ImageColorSpace.ImageColorSpaceYCBCR">
	<summary>
Specifies that the image is stored using a YCBCR color space.
</summary>
</member><member name="F:GdPicture.ImageColorSpace.ImageColorSpaceYCCK">
	<summary>
Specifies that the image is stored using a YCCK color space.
</summary>
</member><member name="F:GdPicture.Operators.OperatorAnd">
	<summary>
Result = Image1 And Image2.
</summary>
</member><member name="F:GdPicture.Operators.OperatorOr">
	<summary>
Result = Image1 Or Image2.
</summary>
</member><member name="F:GdPicture.Operators.OperatorXor">
	<summary>
Result = Image1 Xor Image2.
</summary>
</member><member name="F:GdPicture.Operators.OperatorMin">
	<summary>
Result = Min(Image1, Image2).
</summary>
</member><member name="F:GdPicture.Operators.OperatorMax">
	<summary>
Result = Max(Image1, Image2).
</summary>
</member><member name="F:GdPicture.Operators.OperatorAbs">
	<summary>
Result = Abs(Image1, Image2).
</summary>
</member><member name="F:GdPicture.Operators.OperatorMultiply">
	<summary>
Result = (Image1 * Image2) / 255.
</summary>
</member><member name="F:GdPicture.Operators.OperatorDivide">
	<summary>
Result = Image1 / Image2.
</summary>
</member><member name="F:GdPicture.Operators.OperatorPlus">
	<summary>
Result = Image1 + Image2.
</summary>
</member><member name="F:GdPicture.Operators.OperatorLess">
	<summary>
Result = Image1 - Image2.
</summary>
</member><member name="F:GdPicture.BitonalReduction.NearestColor">
	<summary>
Each pixel value is compared against a fixed threshold. This may be the simplest dithering algorithm there is, but it results in immense loss of detail and contouring.
</summary>
</member><member name="F:GdPicture.BitonalReduction.OrderedDither">
	<summary>
Produces a cross-hatch pattern. This is a form of dispersed dithering. Because the dots don't cluster, the result looks much less grainy.
</summary>
</member><member name="F:GdPicture.BitonalReduction.Burke">
	<summary>
A simplified form of Stucki dithering that is faster, but less clean than Stucki dithering.
</summary>
</member><member name="F:GdPicture.BitonalReduction.Stucki">
	<summary>
Based on Floyd Steinberg, but is slightly faster. Its output tends to be clean and sharp.
</summary>
</member><member name="F:GdPicture.BitonalReduction.FloydSteinberg">
	<summary>
Only diffuses the error to neighbouring pixels. This results in very fine-grained dithering.
</summary>
</member><member name="F:GdPicture.ViewerMouseMode.MouseModeDefault">
	<summary>
Do nothing
</summary>
</member><member name="F:GdPicture.ViewerMouseMode.MouseModeAreaSelection">
	<summary>
Allows user to select an area of the displayed document
</summary>
</member><member name="F:GdPicture.ViewerMouseMode.MouseModePan">
	<summary>
Allows user to pan the displayed document
</summary>
</member><member name="F:GdPicture.ViewerMouseMode.MouseModeAreaZooming">
	<summary>
Allows user to select for zooming an area of the displayed document
</summary>
</member><member name="F:GdPicture.ViewerMouseMode.MouseModeMagnifier">
	<summary>
Displays a magnifier tool.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeUNDEFINED">
	<summary>
Undefined. Don not use.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeBLACK">
	<summary>
Pixel is always 0.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeNOTMERGEPEN">
	<summary>
Pixel is the inverse of the ForegroundMixModeMERGEPEN color.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeMASKNOTPEN">
	<summary>
Pixel is a combination of the colors common to both the pen and the inverse of the screen.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeNOTCOPYPEN">
	<summary>
Pixel is the inverse of the pen color.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeMASKPENNOT">
	<summary>
Pixel is a combination of the colors common to both the pen and the inverse of the screen.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeNOT">
	<summary>
Pixel is the inverse of the screen color.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeXORPEN">
	<summary>
Pixel is a combination of the colors in the pen and in the screen, but not in both.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeNOTMASKPEN">
	<summary>
Pixel is the inverse of the ForegroundMixModeMASKPEN color.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeMASKPEN">
	<summary>
Pixel is a combination of the colors common to both the pen and the screen.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeNOTXORPEN">
	<summary>
Pixel is the inverse of the R2_XORPEN color.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeNOP">
	<summary>
Pixel remains unchanged.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeMERGENOTPEN">
	<summary>
Pixel is a combination of the screen color and the inverse of the pen color.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeCOPYPEN">
	<summary>
Pixel is the pen color.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeMERGEPENNOT">
	<summary>
Pixel is a combination of the pen color and the inverse of the screen color.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeMERGEPEN">
	<summary>
Pixel is a combination of the pen color and the screen color.
</summary>
</member><member name="F:GdPicture.ForegroundMixMode.ForegroundMixModeWHITE">
	<summary>
Pixel is always 1.
</summary>
</member><member name="F:GdPicture.WiaSourceType.WiaSourceUnspecified">
	<summary>
The source type is unknown.
</summary>
</member><member name="F:GdPicture.WiaSourceType.WiaSourceScanner">
	<summary>
The source is a scanner.
</summary>
</member><member name="F:GdPicture.WiaSourceType.WiaSourceCamera">
	<summary>
The source is a camera.
</summary>
</member><member name="F:GdPicture.WiaSourceType.WiaSourceVideo">
	<summary>
The source provides streaming video.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_OK">
	<summary>
All right !
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_GENERAL_ERROR">
	<summary>
An unknown error has occurred with the Windows Image Acquisition (WIA) device.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_PAPER_JAM">
	<summary>
Paper is jammed in the scanner's document feeder.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_PAPER_EMPTY">
	<summary>
The user requested a scan and there are no documents left in the document feeder.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_PAPER_PROBLEM">
	<summary>
An unspecified problem occurred with the scanner's document feeder.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_OFFLINE">
	<summary>
The WIA device is not online.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_BUSY">
	<summary>
The WIA device is busy.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_WARMING_UP">
	<summary>
The WIA device is warming up.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_USER_INTERVENTION">
	<summary>
An unspecified error has occurred with the WIA device that requires user intervention. The user should ensure that the device is turned on, online, and any cables are properly connected.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_ITEM_DELETED">
	<summary>
The WIA device was deleted. It can no longer be accessed.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_DEVICE_COMMUNICATION">
	<summary>
An unspecified error occurred during an attempted communication with the WIA device.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_INVALID_COMMAND">
	<summary>
The device does not support this command.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_INCORRECT_HARDWARE_SETTING">
	<summary>
There is an incorrect setting on the WIA device.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_DEVICE_LOCKED">
	<summary>
The scanner head is locked.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_EXCEPTION_IN_DRIVER">
	<summary>
The device driver threw an exception.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_ERROR_INVALID_DRIVER_RESPONSE">
	<summary>
The response from the driver is invalid.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_S_NO_DEVICE_AVAILABLE">
	<summary>
No WIA device of the selected type is available.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_OPEN_SOURCE_FIRST">
	<summary>
No WIA device is open.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_OPERATION_CANCELLED">
	<summary>
Operation cancelled.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_SCANNER_NOT_AVAILABLE">
	<summary>
Scanner is not available.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_OUTPUT_FILE_EXISTS">
	<summary>
Scanner is not available.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_CAN_NOT_SET_VALUE">
	<summary>
Can not set the specified value.
</summary>
</member><member name="F:GdPicture.WiaStatus.WIA_GENERIC_ERROR">
	<summary>
An unknown error has occurred out of the Windows Image Acquisition (WIA) device.
</summary>
</member><member name="F:GdPicture.WiaImageIntent.WiaImageIntentNone">
	<summary>
Default value. No intent is specified.
</summary>
</member><member name="F:GdPicture.WiaImageIntent.WiaImageIntentColor">
	<summary>
The application intends to prepare the device for a color scan.
</summary>
</member><member name="F:GdPicture.WiaImageIntent.WiaImageIntentGrayscale">
	<summary>
The application intends to prepare the device for a grayscale scan.
</summary>
</member><member name="F:GdPicture.WiaImageIntent.WiaImageIntentText">
	<summary>
The application intends to prepare the device for scanning text.
</summary>
</member><member name="F:GdPicture.WiaImageIntent.WiaImageIntentMask">
	<summary>
Mask for all of the image-type flags.
</summary>
</member><member name="F:GdPicture.WiaImageIntent.WiaImageIntentMinimizeSize">
	<summary>
The application intends to prepare the device for scanning an image that result's in a small scan.
</summary>
</member><member name="F:GdPicture.WiaImageIntent.WiaImageIntentMaximizeQuality">
	<summary>
The application intends to prepare the device for scanning a high-quality image.
</summary>
</member><member name="F:GdPicture.WiaImageIntent.WiaImageIntentBestPreview">
	<summary>
This flag is a mask for all of the size/quality flags.
</summary>
</member><member name="F:GdPicture.WiaImageIntent.WiaImageIntentSizeMask">
	<summary>
The application intends to prepare the device for scanning a preview.
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeUnknown">
	<summary>
8267 x 11692 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeA4">
	<summary>
8267 x 11692 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeLETTER">
	<summary>
8500 x 11000 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeCUSTOM">
	<summary>
current extent settings
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeUSLEGAL">
	<summary>
8500 x 14000 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeUSLETTER">
	<summary>
8500 x 11000 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeUSLEDGER">
	<summary>
11000 x 17000 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeUSSTATEMENT">
	<summary>
5500 x 8500 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeBUSINESSCARD">
	<summary>
3543 x 2165 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A0">
	<summary>
33110 x 46811 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A1">
	<summary>
23385 x 33110 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A2">
	<summary>
16535 x 23385 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A3">
	<summary>
11692 x 16535 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A4">
	<summary>
8267 x 11692 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A5">
	<summary>
5826 x 8267 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A6">
	<summary>
4133 x 5826 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A7">
	<summary>
2913 x 4133 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A8">
	<summary>
2047 x 2913 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A9">
	<summary>
1456 x 2047 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_A10">
	<summary>
1023 x 1456 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B0">
	<summary>
39370 x 55669 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B1">
	<summary>
27834 x 39370 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B2">
	<summary>
19685 x 27834 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B3">
	<summary>
13897 x 19685 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B4">
	<summary>
9842 x 13897 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B5">
	<summary>
6929 x 9842 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B6">
	<summary>
4921 x 6929 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B7">
	<summary>
3464 x 4921 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B8">
	<summary>
2440 x 3464 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B9">
	<summary>
1732 x 2440 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_B10">
	<summary>
1220 x 1732 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C0">
	<summary>
36102 x 51062 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C1">
	<summary>
25511 x 36102 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C2">
	<summary>
18031 x 25511 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C3">
	<summary>
12755 x 18031 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C4">
	<summary>
9015 x 12755 unfolded
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C5">
	<summary>
6377 x 9015 folded once (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C6">
	<summary>
4488 x 6377 folded twice (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C7">
	<summary>
3188 x 4488 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C8">
	<summary>
2244 x 3188 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C9">
	<summary>
1574 x 2244
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeISO_C10">
	<summary>
1102 x 1574 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B0">
	<summary>
40551 x 57322 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B1">
	<summary>
28661 x 40551 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B2">
	<summary>
20275 x 28661
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B3">
	<summary>
14330 x 20275 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B4">
	<summary>
10118 x 14330 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B5">
	<summary>
7165 x 10118 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B6">
	<summary>
5039 x 7165 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B7">
	<summary>
3582 x 5039 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B8">
	<summary>
2519 x 3582 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B9">
	<summary>
1771 x 2519 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_B10">
	<summary>
1259 x 1771 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_2A">
	<summary>
46811 x 66220 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeJIS_4A">
	<summary>
66220 x 93622 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeDIN_2B">
	<summary>
55669 x 78740 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeDIN_4B">
	<summary>
78740 x 111338 (Dimensions in thousandths of an inch).
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeAUTO">
	<summary>
Driver automatically detects page size
</summary>
</member><member name="F:GdPicture.WiaPageSize.WiaPageSizeCUSTOM_BASE">
	<summary>
Page size already known to driver and application
</summary>
</member><member name="F:GdPicture.ImagingContext.ContextDocument">
	<summary>
A document is processed.
</summary>
</member><member name="F:GdPicture.ImagingContext.ContextPhoto">
	<summary>
A digital photo is processed.
</summary>
</member><member name="F:GdPicture.OCRContext.OCRContextDocument">
	<summary>
For document with variable layout with lines, text or/and images. (Default).
</summary>
</member><member name="F:GdPicture.OCRContext.OCRContextSingleColumn">
	<summary>
For single column of text of variable sizes.
</summary>
</member><member name="F:GdPicture.OCRContext.OCRContextSingleBlock">
	<summary>
For document with single uniform block of text.
</summary>
</member><member name="F:GdPicture.OCRContext.OCRContextSingleBlockVertical">
	<summary>
For document with single uniform block of vertically aligned text.
</summary>
</member><member name="F:GdPicture.OCRContext.OCRContextSingleLine">
	<summary>
For single text line image.
</summary>
</member><member name="F:GdPicture.OCRContext.OCRContextSingleWord">
	<summary>
For single word image.
</summary>
</member><member name="F:GdPicture.OCRContext.OCRContextSingleWordCircle">
	<summary>
For single word in a circle image.
</summary>
</member><member name="F:GdPicture.OCRContext.OCRContextSingleChar">
	<summary>
For single character image.
</summary>
</member><member name="P:GdPicture.BookmarksTree.GdViewer">
	<summary>
 Defines the GdViewer object to be linked with the control.
 </summary>
	<example>
		<code lang="vb.net">
  Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
  'Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
   BookmarksTree1.GdViewer = GdViewer1
  End Sub
 </code>
	</example>
</member><member name="P:GdPicture.BookmarksTree.FontSize">
	<summary>
 Defines the size of the displayed text on the tree.
 </summary>
</member><member name="M:GdPicture.LicenseManager.RegisterKEY(System.String)">
	<summary>
 Unlocks the toolkit with a commercial key or a demo key. You can subsequently use this method to
 register any Plugin or Toolkit core keys. To register a license upgrade, you have to call first this
 method passing the previous ordered key, then call it again with the upgrade key.
 </summary>
	<param name="Key">The license key. </param>
	<returns>
 True if Success, else False (invalid license KEY).
 </returns>
	<example>
 Example of how to use RegisterKEY to unlock a plugin and to unlock the toolkit core with an upgrade
 key.
 
 <code lang="vb.net">
 Private Sub form_Load(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles MyBase.Load
     Dim LicMgr As New LicenseManager
     LicMgr.RegisterKEY(MY_PLUGIN_KEY)
     LicMgr.RegisterKEY(MY_GDPICTURENET7_KEY)
     LicMgr.RegisterKEY(MY_GDPICTURENET8_UPGRADE_KEY)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.LicenseManager.GetVersion">
	<summary>
  This function returns the GdPicture source code version used in the following format M.mrrr where 'M' describes the major version, 'm' the medium version and 'rrr' the release number.
  </summary>
	<returns>
  The GdPicture core version. 
  </returns>
</member><member name="P:GdPicture.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:GdPicture.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:GdPicture.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:GdPicture.Annotation.CreationTime">
	<summary>
 The date and time when the annotation was created. IE: "29-Mar-11 12:36 PM".
 </summary>
</member><member name="P:GdPicture.Annotation.ModificationTime">
	<summary>
 The date and time when the annotation was modified. IE: "29-Mar-11 12:36 PM".
 </summary>
</member><member name="P:GdPicture.Annotation.Visible">
	<summary>
 Determines if the annotation is visible or not. 
 </summary>
</member><member name="P:GdPicture.Annotation.Rotation">
	<summary>
 The rotation of the annotation, in degrees, in the range [0;360].
 </summary>
</member><member name="P:GdPicture.Annotation.Zorder">
	<summary>
 Specifies the the order in which the annotation is rendered from front to back. The annotation having the higher Zorder will be displayed in front of all others.
 </summary>
</member><member name="P:GdPicture.Annotation.Tag">
	<summary>
 Stores arbitrary value that can be used to store optional information about the annotation.
 </summary>
</member><member name="P:GdPicture.Annotation.Author">
	<summary>
 The name of the author who created the annotation.
 </summary>
</member><member name="P:GdPicture.Annotation.Subject">
	<summary>
 The subject of the annotation, if any.
 </summary>
</member><member name="P:GdPicture.Annotation.Left">
	<summary>
 Left position, in inches, of the middle point of the bounding box of the annotation.
 </summary>
</member><member name="P:GdPicture.Annotation.Top">
	<summary>
 Top position, in inches, of the middle point of the bounding box of the annotation.
 </summary>
</member><member name="P:GdPicture.Annotation.Width">
	<summary>
 Width, in inches, of the bounding box of the annotation.
 </summary>
</member><member name="P:GdPicture.Annotation.Height">
	<summary>
 Height, in inches, of the bounding box of the annotation.
 </summary>
</member><member name="P:GdPicture.Annotation.CanRotate">
	<summary>
 Defines if the annotation can be rotated in design time.
 </summary>
</member><member name="P:GdPicture.Annotation.CanResize">
	<summary>
 Defines if the annotation can be resized in design time.
 </summary>
</member><member name="P:GdPicture.Annotation.CanMove">
	<summary>
 Defines if the annotation can be moved in design time.
 </summary>
</member><member name="P:GdPicture.Annotation.CanSelect">
	<summary>
 Defines if the annotation can be selected in design time.
 </summary>
</member><member name="P:GdPicture.Annotation.Selected">
	<summary>
 Defines if the annotation is selected.
 </summary>
</member><member name="P:GdPicture.Annotation.Printable">
	<summary>
 Defines if the annotation is rendered during printing process.
 </summary>
</member><member name="P:GdPicture.Annotation.PreventBurning">
	<summary>
 Defines if during burning process, the annotation is prevented to be rendered. 
 </summary>
</member><member name="M:GdPicture.Annotation.GetAnnotationType">
	<summary>
 Returns the type of the annotation.
 </summary>
	<returns>
  A member of the GdPictureAnnotationType enumeration. 
  </returns>
</member><member name="P:GdPicture.Annotation.Opacity">
	<summary>
 Opacity (or blending level) of the annotation in the range [0;1]. 0 means full transparency, 1 means full opacity.
 </summary>
</member><member name="P:GdPicture.Annotation.BorderWidth">
	<summary>
 The width, in inches, of each lines in stroking operations.
 </summary>
</member><member name="P:GdPicture.Annotation.Stroke">
	<summary>
 Determines if the annotation must be stroked or not. 
 </summary>
</member><member name="P:GdPicture.Annotation.StrokeColor">
	<summary>
 The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth parameter.
 </summary>
</member><member name="P:GdPicture.Annotation.Fill">
	<summary>
 Determines if the annotation must be filled or not. 
 </summary>
</member><member name="P:GdPicture.Annotation.FillColor">
	<summary>
 The color to be used for filling the annotation. 
 </summary>
</member><member name="P:GdPicture.Annotation.RadiusFactor">
	<summary>
 The radius factor used to draw rounded borders, in the range [0;1]. 0 means: 0% rounded borders, 1 means 100% rounded.
 </summary>
</member><member name="P:GdPicture.Annotation.Link">
	<summary>
 The destination of the link.
 </summary>
</member><member name="P:GdPicture.Annotation.Image">
	<summary>
 The image to be rendered.
 </summary>
</member><member name="P:GdPicture.Annotation.Text">
	<summary>
 The text to display.
 </summary>
</member><member name="P:GdPicture.Annotation.FontName">
	<summary>
 The name of the font to be used to render the text.
 </summary>
</member><member name="P:GdPicture.Annotation.FontSize">
	<summary>
 The size of the font to be used to render the text.
 </summary>
</member><member name="P:GdPicture.Annotation.FontStyle">
	<summary>
 The style of the font to be used to render the text.
 </summary>
</member><member name="P:GdPicture.Annotation.HoverFontStyle">
	<summary>
 The style of the font to be used to render the hovered text.
 </summary>
</member><member name="P:GdPicture.Annotation.ArrowWidth">
	<summary>
 The width of the arrow, in inches.
 </summary>
</member><member name="P:GdPicture.Annotation.ArrowHeight">
	<summary>
 The height of the arrow, in inches.
 </summary>
</member><member name="P:GdPicture.Annotation.ArrowFilled">
	<summary>
 Defines if the arrow must be filled or not.
 </summary>
</member><member name="P:GdPicture.Annotation.ForeColor">
	<summary>
 Defines the color of the font.
 </summary>
</member><member name="P:GdPicture.Annotation.HoverForeColor">
	<summary>
 Defines the color of the font when the text is hovered.
 </summary>
</member><member name="P:GdPicture.Annotation.EndCap">
	<summary>
 Defines the cap style used at the end of lines drawn.
 </summary>
</member><member name="P:GdPicture.Annotation.StartCap">
	<summary>
 Defines the cap style used at the start of lines drawn.
 </summary>
</member><member name="P:GdPicture.Annotation.LineJoin">
	<summary>
 Defines the the join style for the ends of two consecutive lines drawn.
 </summary>
</member><member name="P:GdPicture.Annotation.DashStyle">
	<summary>
 Determines the dash style for stroking operations. 
 </summary>
</member><member name="P:GdPicture.Annotation.DashCap">
	<summary>
 Determines the cap style for stroking operations when DashStyle is different of Solid. Cap is used at
 the end of the dashes that make up dashed lines drawn. 
 </summary>
</member><member name="E:GdPicture.AnnotationManager.SavingProgress">
	<summary>
 Occurs when a document is being saved.
 </summary>
	<param name="PageNo">The number of the page (1-based) that is currently in creation</param>
	<param name="PageCount">The total number of pages to be saved</param>
</member><member name="M:GdPicture.AnnotationManager.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>
 Returns a 32-bit Color value from a set of alpha, red, green, and blue color components.
 </summary>
	<param name="Alpha">The alpha component (also called transparency). Valid values are 0 (full
                     transparency) through 255 (full opacity). </param>
	<param name="Red">The red component. Valid values are 0 through 255. </param>
	<param name="Green">The green component. Valid values are 0 through 255. </param>
	<param name="Blue">The blue component. Valid values are 0 through 255. </param>
	<returns>
 A 32-bit Color value.
 </returns>
	<example>
  Getting ARGB Red color Using ARGBI.
 
 <code lang="vb.net">
 Integer RedColor = object.ARGBI(255, 255, 0, 0) ' A = 255; R = 255:  G = 0: B = 0
 </code>
	</example>
</member><member name="M:GdPicture.AnnotationManager.SelectPage(System.Int32)">
	<summary>
 Changes the current page of the native document. 
 </summary>
	<param name="PageNo">Page number between 1 and page count. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.Close">
	<summary>
 Closes the annotation manager object. Call this function when you are done with annotation handling
 of the document.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Opens a PDF, drawn a rubber stamp annot, then display the stamped document into a GdViewer object
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   Dim oGdPicturePDF As New GdPicturePDF
 
   oGdPicturePDF.LoadFromFile("c:\\test.pdf", False)
   Dim oAnnotationManager As New AnnotationManager
   oAnnotationManager.InitFromGdPicturePDF(oGdPicturePDF)
   oAnnotationManager.SelectPage(1)
   Dim annot As AnnotationRubberStamp = oAnnotationManager.AddRubberStampAnnot(Color.Red, 0, 0, oGdPicturePDF.GetPageWidth / 72, oGdPicturePDF.GetPageHeight / 72, "APPROVED")
   annot.Rotation = 20
   oAnnotationManager.Close()
   GdViewer1.DisplayFromGdPicturePDF(oGdPicturePDF)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.AnnotationManager.InitFromGdPicturePDF(GdPicture.GdPicturePDF)">
	<summary>
 Initialize the annotation manager object from a PDF document handled by a GdPicturePDF object. 
 </summary>
	<param name="PDF">The PDF document.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Opens a PDF, drawn a rubber stamp annot, then display the stamped document into a GdViewer object
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   Dim oGdPicturePDF As New GdPicturePDF
 
   oGdPicturePDF.LoadFromFile("c:\test.pdf", False)
   Dim oAnnotationManager As New AnnotationManager
   oAnnotationManager.InitFromGdPicturePDF(oGdPicturePDF)
   oAnnotationManager.SelectPage(1)
   Dim annot As AnnotationRubberStamp = oAnnotationManager.AddRubberStampAnnot(Color.Red, 0, 0, oGdPicturePDF.GetPageWidth / 72, oGdPicturePDF.GetPageHeight / 72, "APPROVED")
   annot.Rotation = 20
   oAnnotationManager.Close()
   GdViewer1.DisplayFromGdPicturePDF(oGdPicturePDF)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.AnnotationManager.InitFromGdPictureImage(System.Int32)">
	<summary>
 Initialize the annotation manager object from a GdPicture Image. 
 </summary>
	<param name="ImageID">A GdPicture Image identifier.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Opens a multipage tiff image, drawn a rubber stamp annot, then display the stamped document into a GdViewer object
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   Dim oGdPictureImaging As New GdPictureImaging
 
   Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\multipage.tif")
   Dim oAnnotationManager As New AnnotationManager
   oAnnotationManager.InitFromGdPictureImage(ImageID)
   oAnnotationManager.SelectPage(1)
   Dim annot As AnnotationRubberStamp = oAnnotationManager.AddRubberStampAnnot(Color.Red, 0, 0, CSng(oGdPictureImaging.GetWidthInches(ImageID)), CSng(oGdPictureImaging.GetHeightInches(ImageID)), "APPROVED")
   annot.Rotation = 20
   oAnnotationManager.Close()
   GdViewer1.DisplayFromGdPictureImage(ImageID)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.AnnotationManager.InitFromGdViewer(GdPicture.GdViewer)">
	<summary>
 Initialize the annotation manager object from a GdViewer object. 
 </summary>
	<param name="GdViewer">The GdViewer object.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.GetAnnotationCount">
	<summary>
 Returns the number of GdPicture/XMP annotations available on the current page of the native document.
 </summary>
	<returns>
 the number of available annotations.
 </returns>
	<example>
 Displays creation data and author of all available annotations
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
       For i As Integer = 0 To oAnnotationManager.GetAnnotationCount() - 1
          Dim Annot As GdPicture.Annotation = oAnnotationManager.GetAnnotationFromIdx(i)
          MsgBox("Author: " + Annot.Author)
          MsgBox("Creation time: " + Annot.CreationTime.ToString)
       Next
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.AnnotationManager.GetAnnotationFromIdx(System.Int32)">
	<summary>
 Returns a GdPicture/XMP annotations available on the current page of the native document.
 </summary>
	<returns>
 An Annotation object.
 </returns>
	<param name="AnnotIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
	<example>
 Displays creation data and author of all available annotations
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
       For i As Integer = 0 To oAnnotationManager.GetAnnotationCount() - 1
          Dim Annot As GdPicture.Annotation = oAnnotationManager.GetAnnotationFromIdx(i)
          MsgBox("Author: " + Annot.Author)
          MsgBox("Creation time: " + Annot.CreationTime.ToString)
       Next
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.AnnotationManager.SetAnnotationPropertyValue(System.Int32,System.String,System.Object)">
	<summary>
 Changes the value of a specific annotation property by its name. 
 This function has been initially introduced for COM interop usage.
 </summary>
	<param name="AnnotIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
	<param name="Name">The name of the annotation property. IE: FillColor.</param>
	<param name="Value">The new value to apply to the property.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Change to filling color of all annotations to semi transparent red color.
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim annotationManager As New AnnotationManager
     annotationManager.InitFromGdViewer(GdViewer1)
     For i As Integer = 0 To annotationManager.GetAnnotationCount() - 1
         annotationManager.SetAnnotationPropertyValue(i, "FillColor", annotationManager.ARGBI(100, 255, 255, 255))
     Next
     annotationManager.Close()
 End Sub
 </code>
	</example>
	<seealso cref="M:GdPicture.AnnotationManager.GetAnnotationPropertyValue(System.Int32,System.String)"/>
</member><member name="M:GdPicture.AnnotationManager.GetAnnotationPropertyValue(System.Int32,System.String)">
	<summary>
 Get the value of a specific annotation property by its name. 
 This function has been initially introduced for COM interop usage.
 </summary>
	<param name="AnnotIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
	<param name="Name">The name of the annotation property. IE: FillColor.</param>
	<returns>
 The  value of the specified property. An empty object is returned in case the function failed.
 </returns>
	<seealso cref="M:GdPicture.AnnotationManager.SetAnnotationPropertyValue(System.Int32,System.String,System.Object)"/>
</member><member name="M:GdPicture.AnnotationManager.DeleteAnnotation(System.Int32)">
	<summary>
 Removes a GdPicture/XMP annotation on the current page of the native document.
 </summary>
	<param name="AnnotIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Remove all available annotations
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
       For i As Integer = 1 To oAnnotationManager.GetAnnotationCount() 
            oAnnotationManager.DeleteAnnotation(0)
       Next
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.AnnotationManager.AddRectangleAnnot(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new rectangle annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="BackColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for filling the annotation. </param>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<returns>An AnnotationRectangle object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddRectangleAnnot(System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new rectangle annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="BackColor">The color to be used for filling the annotation. </param>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<returns>An AnnotationRectangle object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddRectangleHighlighterAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new rectangle highlighter annotation on the current page of the native document.
 </summary>
	<param name="BackColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for filling the annotation. </param>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<returns>An AnnotationRectangleHighlighter object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddRectangleHighlighterAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new rectangle highlighter annotation on the current page of the native document.
 </summary>
	<param name="BackColor">The color to be used for filling the annotation. </param>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<returns>An AnnotationRectangleHighlighter object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddEllipseAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new ellipse annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<returns>An AnnotationEllipse object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddEllipseAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new ellipse annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<returns>An AnnotationEllipse object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddLineAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new line annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="SrcLeft">The left position, in inches, of the starting point of the annotation.</param>
	<param name="SrcTop">The top position, in inches, of the starting point of the annotation.</param>
	<param name="DstLeft">The left position, in inches, of the ending point of the annotation.</param>
	<param name="DstTop">The top position, in inches, of the ending point of the annotation.</param>
	<returns>An AnnotationLine object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddLineAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new line annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="SrcLeft">The left position, in inches, of the starting point of the annotation.</param>
	<param name="SrcTop">The top position, in inches, of the starting point of the annotation.</param>
	<param name="DstLeft">The left position, in inches, of the ending point of the annotation.</param>
	<param name="DstTop">The top position, in inches, of the ending point of the annotation.</param>
	<returns>An AnnotationLine object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddLineArrowAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new line arrow annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="SrcLeft">The left position, in inches, of the starting point of the annotation.</param>
	<param name="SrcTop">The top position, in inches, of the starting point of the annotation.</param>
	<param name="DstLeft">The left position, in inches, of the ending point of the annotation.</param>
	<param name="DstTop">The top position, in inches, of the ending point of the annotation.</param>
	<returns>An AnnotationLineArrow object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddLineArrowAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new line arrow annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="SrcLeft">The left position, in inches, of the starting point of the annotation.</param>
	<param name="SrcTop">The top position, in inches, of the starting point of the annotation.</param>
	<param name="DstLeft">The left position, in inches, of the ending point of the annotation.</param>
	<param name="DstTop">The top position, in inches, of the ending point of the annotation.</param>
	<returns>An AnnotationLineArrow object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddFreeHandAnnot(System.Int32,System.Drawing.PointF[])">
	<summary>
 Adds a new free hand annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="Points">An array of the annotation points, in inches.</param>
	<returns>An AnnotationFreeHand object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddFreeHandAnnot(System.Drawing.Color,System.Drawing.PointF[])">
	<summary>
 Adds a new free hand annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="Points">An array of the annotation points, in inches.</param>
	<returns>An AnnotationFreeHand object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddFreeHandHighlighterAnnot(System.Int32,System.Drawing.PointF[])">
	<summary>
 Adds a new free hand highlighter annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="Points">An array of polygon points, in inches.</param>
	<returns>An AnnotationFreeHandHighlighter object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddFreeHandHighlighterAnnot(System.Drawing.Color,System.Drawing.PointF[])">
	<summary>
 Adds a new free hand highlighter annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="Points">An array of polygon points, in inches.</param>
	<returns>An AnnotationFreeHandHighlighter object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddPolygonAnnot(System.Int32,System.Int32,System.Drawing.PointF[])">
	<summary>
 Adds a new polygon annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="BackColor">The color to be used for filling the annotation. </param>
	<param name="Points">An array of polygon points, in inches.</param>
	<returns>An AnnotationPolygon object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddPolygonAnnot(System.Drawing.Color,System.Drawing.Color,System.Drawing.PointF[])">
	<summary>
 Adds a new polygon annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="BackColor">The color to be used for filling the annotation. </param>
	<param name="Points">An array of polygon points, in inches.</param>
	<returns>An AnnotationPolygon object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddConnectedLinesAnnot(System.Int32,System.Drawing.PointF[])">
	<summary>
 Adds a new connected lines annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="Points">An array of line segments points, in inches.</param>
	<returns>An AnnotationConnectedLines object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddConnectedLinesAnnot(System.Drawing.Color,System.Drawing.PointF[])">
	<summary>
 Adds a new connected lines annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="Points">An array of line segments points, in inches.</param>
	<returns>An AnnotationConnectedLines object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddRubberStampAnnot(System.Int32,System.Single,System.Single,System.Single,System.Single,System.String)">
	<summary>
 Adds a new rubber stamp annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">Color value. You can obtain a suitable value by using the ARGBI() function. The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<param name="Text">The text of the annotation.</param>
	<returns>An AnnotationRubberStamp object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddRubberStampAnnot(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.String)">
	<summary>
 Adds a new rubber stamp annotation on the current page of the native document.
 </summary>
	<param name="BorderColor">The color to be used for line painting of the annotation. 
 The width of the stroked line is determined by the BorderWidth property of the annotation.</param>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<param name="Text">The text of the annotation.</param>
	<returns>An AnnotationRubberStamp object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddLinkAnnot(System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
	<summary>
 Adds a new link annotation on the current page of the native document.
 </summary>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<param name="Text">The text of the annotation.</param>
	<param name="Link">The destination of the link.</param>
	<returns>An AnnotationLink object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddTextAnnot(System.Single,System.Single,System.Single,System.Single,System.String)">
	<summary>
 Adds a new text annotation on the current page of the native document.
 </summary>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<param name="Text">The text of the annotation.</param>
	<returns>An AnnotationText object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddStickyNoteAnnot(System.Single,System.Single,System.Single,System.Single,System.String)">
	<summary>
 Adds a new sticky note annotation on the current page of the native document.
 </summary>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<param name="Text">The text of the annotation.</param>
	<returns>An AnnotationStickyNote object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.AddEmbeddedImageAnnot(System.Drawing.Bitmap,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a new embedded image annotation on the current page of the native document.
 </summary>
	<param name="Image">A Bitmap object. The image of the annotation.</param>
	<param name="Left">The left position, in inches, of the top-left point of the annotation.</param>
	<param name="Top">The top position, in inches, of the top-left point of the annotation.</param>
	<param name="Width">The width of the annotation, in inches.</param>
	<param name="Height">The height of the annotation, in inches.</param>
	<returns>An AnnotationEmbeddedImage object. The new added annotation.</returns>
</member><member name="M:GdPicture.AnnotationManager.SaveDocumentToPDF(System.String)">
	<summary>
 Saves the native document in PDF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
	<param name="FilePath">The path of the PDF to create</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.SaveDocumentToPDF(System.IO.Stream)">
	<summary>
 Saves the native document to a stream in PDF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
	<param name="Stream">The stream to save the document.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.SaveDocumentToTIFF(System.String,GdPicture.TiffCompression)">
	<summary>
 Saves the native document in TIFF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
	<param name="FilePath">The path of the TIFF to create</param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.SaveDocumentToTIFF(System.IO.Stream,GdPicture.TiffCompression)">
	<summary>
 Saves the native document to a Stream, in TIFF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
	<param name="Stream">The stream to save the TIFF image.</param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.SaveDocumentToJPEG(System.String,System.Int32)">
	<summary>
 Saves the native document in JPEG format with GdPicture/XMP annotation support.
 </summary>
	<param name="FilePath">The path of JPEG to create</param>
	<param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
                        best quality and worse compression. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.SaveDocumentToJPEG(System.IO.Stream,System.Int32)">
	<summary>
 Saves the native document in JPEG format with GdPicture/XMP annotation support.
 </summary>
	<param name="Stream">The stream to save the JPEG image.</param>
	<param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
                        best quality and worse compression. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.SaveAnnotationsToXMP(System.String)">
	<summary>
 Saves the GdPicture/XMP annotation part of the current page of the native document to a XML file.
 </summary>
	<param name="FilePath">The path of XML file to create</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.SaveAnnotationsToXMP(System.IO.Stream)">
	<summary>
 Saves the GdPicture/XMP annotation part of the current page of the native document to a stream.
 </summary>
	<param name="Stream">The stream to save the annotations</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Save annotations to stream and load them back.
 <code lang="vb.net">
 'Part 1: Open image, add annot and save annotation to Stream object
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\001.tif")
 Dim oAnnotationManager As New AnnotationManager
 Dim annotStream As New IO.MemoryStream()

 oAnnotationManager.InitFromGdPictureImage(ImageID)
 Dim annot As AnnotationStickyNote = oAnnotationManager.AddStickyNoteAnnot(0, 0, 3, 3, "To Be Investigated")
 annot.CanSelect = False
 annot.Author = "John"
 oAnnotationManager.SaveAnnotationsToXMP(annotStream)

 oGdPictureImaging.ReleaseGdPictureImage(ImageID)

 'Part 2 open a new image and load the previously saved annotation from the Stream object
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("c:\002.tif")
 oAnnotationManager.InitFromGdPictureImage(ImageID)
 oAnnotationManager.LoadAnnotationsFromXMP(annotStream)
 oAnnotationManager.SaveAnnotationsToPage()

 GdViewer1.DisplayFromGdPictureImage(ImageID) 'Display the image including annotation into a GdViewer object
 annotStream.Dispose()
 </code>
	</example>
</member><member name="M:GdPicture.AnnotationManager.LoadAnnotationsFromXMP(System.String)">
	<summary>
 Loads and applies to the native document GdPicture/XMP annotation from a XML file previously generated by the SaveAnnotationsToXMP method.
 </summary>
	<param name="FilePath">The path of XML file to load</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.LoadAnnotationsFromXMP(System.IO.Stream)">
	<summary>
 Loads and applies to the native document GdPicture/XMP annotation from a stream containing data previously generated by the SaveAnnotationsToXMP method.
 </summary>
	<param name="Stream">The Stream object containing the annotations data</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Save annotations to stream and load them back.
 <code lang="vb.net">
 'Part 1: Open image, add annot and save annotation to Stream object
 Dim oGdPictureImaging As New GdPictureImaging
 Dim ImageID As Integer = oGdPictureImaging.CreateGdPictureImageFromFile("c:\001.tif")
 Dim oAnnotationManager As New AnnotationManager
 Dim annotStream As New IO.MemoryStream()

 oAnnotationManager.InitFromGdPictureImage(ImageID)
 Dim annot As AnnotationStickyNote = oAnnotationManager.AddStickyNoteAnnot(0, 0, 3, 3, "To Be Investigated")
 annot.CanSelect = False
 annot.Author = "John"
 oAnnotationManager.SaveAnnotationsToXMP(annotStream)

 oGdPictureImaging.ReleaseGdPictureImage(ImageID)

 'Part 2 open a new image and load the previously saved annotation from the Stream object
 ImageID = oGdPictureImaging.CreateGdPictureImageFromFile("c:\002.tif")
 oAnnotationManager.InitFromGdPictureImage(ImageID)
 oAnnotationManager.LoadAnnotationsFromXMP(annotStream)
 oAnnotationManager.SaveAnnotationsToPage()

 GdViewer1.DisplayFromGdPictureImage(ImageID) 'Display the image including annotation into a GdViewer object
 annotStream.Dispose()
 </code>
	</example>
</member><member name="M:GdPicture.AnnotationManager.RotateAnnotations(System.Int32)">
	<summary>
 Rotates all annotations (use the page coordinate system) by a specific angle.
 </summary>
	<param name="Angle">The angle of rotation. Supported values are 90, 180 and 270.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.BurnAnnotationsToPage(System.Boolean)">
	<summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the native document.
 </summary>
	<param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.BurnAnnotationsToPage(System.Boolean,GdPicture.GdPictureOutputIntent)">
	<summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the native document.
 </summary>
	<param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
	<param name="Intent">A member of the GdPictureOutputIntent enumeration. Defines the intent of the produced page. Default value is IntentColor. Other intents produce smaller PDF page.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.AnnotationManager.SaveAnnotationsToPage">
	<summary>
 Forces the object to save the annotations to the current page. This function is automatically called internally on page change.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.GetAnnotationCount">
	<summary>
 Returns the number of GdPicture/XMP annotations available on the current page of the displayed document.
 </summary>
	<returns>
 the number of available annotations.
 </returns>
	<example>
 Displays creation data and author of all available annotations
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
    For i As Integer = 0 To GdViewer1.GetAnnotationCount() - 1
        Dim Annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(i)
        MsgBox("Author: " + Annot.Author)
        MsgBox("Creation time: " + Annot.CreationTime.ToString)
    Next
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.GetAnnotationFromIdx(System.Int32)">
	<summary>
 Returns a GdPicture/XMP annotations available on the current page of the displayed document.
 </summary>
	<returns>
 An Annotation object.
 </returns>
	<param name="AnnotIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
	<example>
 Displays creation data and author of all available annotations
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
       For i As Integer = 0 To GdViewer1.GetAnnotationCount() - 1
          Dim Annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(i)
          MsgBox("Author: " + Annot.Author)
          MsgBox("Creation time: " + Annot.CreationTime.ToString)
       Next
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.DeleteAnnotation(System.Int32)">
	<summary>
 Removes a GdPicture/XMP annotation on the current page of the displayed document.
 </summary>
	<param name="AnnotIdx">The index of the annotation (0-based). Must be a value between 0 and GetAnnotationCount() - 1.</param>
	<example>
 Remove all available annotations
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
       For i As Integer = 1 To GdViewer1.GetAnnotationCount() 
            GdViewer1.DeleteAnnotation(0)
       Next
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.GetSelectedAnnotationIdx">
	<summary>
 Returns the index of the selected GdPicture/XMP annotation.
 </summary>
	<returns>
 An Annotation object index. Must be a value between 0 and GetAnnotationCount() - 1 if an annotation is selected, else -1.
 </returns>
	<example>
 Displays creation data and author of the selected annotation
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
       Dim AnnotIdx as integer = GdViewer1.GetSelectedAnnotationIdx()
       If AnnotIdx &gt;= 0 Then
          Dim Annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(AnnotIdx)
          MsgBox("Author: " + Annot.Author)
          MsgBox("Creation time: " + Annot.CreationTime.ToString)
       Else
          Msgbox "There is no annotation selected"
       End If
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.SetAnnotationEditorMode(System.Boolean)">
	<summary>
 Defines the "editor mode" for the GdPicture/XMP annotation support.
 </summary>
	<param name="EditorMode">True to let the user to edit available GdPicture/XMP annotations, else
                          False (all annotations locked).</param>
</member><member name="M:GdPicture.GdViewer.CancelLastAnnotInteractiveAdd">
	<summary>
 Asks to the control to ignore the latest request of interactive annotation creation.
 </summary>
</member><member name="M:GdPicture.GdViewer.SaveAnnotationsToPage">
	<summary>
 Forces the viewer to save the annotations to the current page. This function is automatically called internally on page change.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.RotateAnnotations(System.Int32)">
	<summary>
 Rotates all annotations (use the page coordinate system) by a specific angle. A call to the Redraw method is needed to refresh the screen.
 </summary>
	<param name="Angle">The angle of rotation. Supported values are 90, 180 and 270.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.ReloadAnnotations">
	<summary>
 Forces the viewer to reload the annotations of the current page. 
 Use this function only if the displayed image have been edited by another object. A call to the Redraw method is needed to refresh the screen.
 </summary>
</member><member name="M:GdPicture.GdViewer.AddLineAnnotInteractive(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Single)">
	<summary>
 Allows the user to add a new line annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="StartCap">Defines the cap style used at the start of lines drawn</param>
	<param name="EndCap">Defines the cap style used at the end of lines drawn</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddLineArrowAnnotInteractive(System.Drawing.Color,System.Single,System.Single,System.Single,System.Boolean,System.Single)">
	<summary>
 Allows the user to add a new line arrow annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="ArrowWidth">the arrow width, in inches</param>
	<param name="ArrowHeight">the arrow height, in inches</param>
	<param name="ArrowFilled">True if the arrow must be filled, else false (stroked only)</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0
                       (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddFreeHandAnnotInteractive(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap,System.Single)">
	<summary>
 Allows the user to add a new free-hand annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="StartCap">Defines the cap style used at the start of lines drawn</param>
	<param name="EndCap">Defines the cap style used at the end of lines drawn</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddFreeHandHighlighterAnnotInteractive(System.Drawing.Color,System.Single)">
	<summary>
 Allows the user to add a new free-hand highlighter annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border</param>
	<param name="BorderWidth">The border width, in inches</param>
</member><member name="M:GdPicture.GdViewer.AddPolygonAnnotInteractive(System.Drawing.Color,System.Single,System.Drawing.Color,System.Single)">
	<summary>
 Allows the user to add a new polygon annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="BackColor">The background color</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddFreeHandPolygonAnnotInteractive(System.Drawing.Color,System.Single,System.Drawing.Color,System.Single)">
	<summary>
 Allows the user to add a new free-hand polygon annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="BackColor">The background color</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddConnectedLinesAnnotInteractive(System.Drawing.Color,System.Single,System.Single)">
	<summary>
 Allows the user to add a new connected lines annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddRectangleAnnotInteractive(System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single)">
	<summary>
 Allows the user to add a new rectangle annotation using the mouse.
 </summary>
	<param name="Fill">Defines if the rectangle must be filled</param>
	<param name="Stroke">Defines if the rectangle must be stroked</param>
	<param name="BackColor">The background color to use if the rectangle must be filled</param>
	<param name="BorderColor">The border color to use if the rectangle must be stroked</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddRectangleHighlighterAnnotInteractive(System.Drawing.Color)">
	<summary>
 Allows the user to add a new Highlighter rectangle annotation using the mouse.
 </summary>
	<param name="BackColor">The background color to use</param>
</member><member name="M:GdPicture.GdViewer.AddTextAnnotationInteractive(System.String,System.Drawing.Color,System.String,System.Drawing.FontStyle,System.Single,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single)">
	<summary>
 Allows the user to add a new text annotation using the mouse.
 </summary>
	<param name="Text">The text to render</param>
	<param name="ForeColor">The color of the font</param>
	<param name="FontName">The name of the font, IE: Arial</param>
	<param name="FontStyle">The style of the font</param>
	<param name="FontSize">The size of the font, in points</param>
	<param name="Fill">Defines if the annotation must be filled or not</param>
	<param name="BorderColor">The color of the border</param>
	<param name="BackColor">The background color</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
	<param name="Rotation">The rotation of the annotation, in degrees</param>
</member><member name="M:GdPicture.GdViewer.AddLinkAnnotationInteractive(System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.String,System.Drawing.FontStyle,System.Drawing.FontStyle,System.Single,System.Single)">
	<summary>
 Allows the user to add a new link annotation using the mouse.
 </summary>
	<param name="Text">The text to render</param>
	<param name="Link">The destination of the annotation. IE: http://www.gdpicture.com</param>
	<param name="ForeColor">The color of the font</param>
	<param name="HoverForeColor">The color of the font when the mouse if over the annotation</param>
	<param name="FontName">The name of the font, IE: Arial</param>
	<param name="FontStyle">The style of the font</param>
	<param name="HoverFontStyle">The style of the font when the mouse if over the annotation</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full
                       transparency) and 1 (full opacity)</param>
	<param name="Rotation">The rotation of the annotation, in degrees</param>
</member><member name="M:GdPicture.GdViewer.AddStickyNoteAnnotationInteractive(System.String,System.Drawing.Color,System.String,System.Drawing.FontStyle,System.Int32,System.Single,System.Single)">
	<summary>
 Allows the user to add a new sticky note annotation using the mouse.
 </summary>
	<param name="Text">The text to render</param>
	<param name="ForeColor">The color of the font</param>
	<param name="FontName">The name of the font, IE: Arial</param>
	<param name="FontStyle">The style of the font</param>
	<param name="FontSize">The size of the font, in points</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
	<param name="Rotation">The rotation of the annotation, in degrees</param>
</member><member name="M:GdPicture.GdViewer.AddRubberStampAnnotInteractive(System.String,System.Drawing.Color,System.String,System.Drawing.FontStyle,System.Drawing.Color,System.Single,System.Single,System.Single)">
	<summary>
 Allows the user to add a new rubber stamp annotation using the mouse.
 </summary>
	<param name="Text">The text to render</param>
	<param name="ForeColor">The color of the font</param>
	<param name="FontName">The name of the font, IE: Arial</param>
	<param name="FontStyle">The style of the font</param>
	<param name="BorderColor">The border color</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
	<param name="Rotation">The rotation of the annotation, in degrees</param>
</member><member name="M:GdPicture.GdViewer.AddEllipseAnnotInteractive(System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single)">
	<summary>
 Allows the user to add a new ellipse annotation using the mouse.
 </summary>
	<param name="Fill">Defines if the ellipse must be filled</param>
	<param name="Stroke">Defines if the ellipse must be stroked</param>
	<param name="BackColor">The background color to use if the ellipse must be filled</param>
	<param name="BorderColor">The border color to use if the ellipse must be stroked</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddEmbeddedImageAnnotInteractive(System.Int32,System.Boolean,System.Drawing.Color,System.Single,System.Single)">
	<summary>
 Allows the user to add a new embedded image annotation, from a GdPicture image, using the mouse.
 </summary>
	<param name="ImageID">A GdPicture Image identifier. The image to render</param>
	<param name="Stroke">Defines if the annotation must be stroked</param>
	<param name="BorderColor">The border color to use if the annotation must be stroked</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddEmbeddedImageAnnotInteractive(System.String,System.Boolean,System.Drawing.Color,System.Single,System.Single)">
	<summary>
 Allows the user to add a new embedded image annotation, from a file, using the mouse.
 </summary>
	<param name="ImagePath">The path of the image to render. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Stroke">Defines if the annotation must be stroked</param>
	<param name="BorderColor">The border color to use if the annotation must be stroked</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddLineAnnotInteractive(System.Int32,System.Single,System.Single)">
	<summary>
 Allows the user to add a new line annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddLineArrowAnnotInteractive(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Single)">
	<summary>
 Allows the user to add a new line arrow annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="ArrowWidth">the arrow width, in inches</param>
	<param name="ArrowHeight">the arrow height, in inches</param>
	<param name="ArrowFilled">True if the arrow must be filled, else false (stroked only)</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0
                       (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddFreeHandAnnotInteractive(System.Int32,System.Single,System.Single)">
	<summary>
 Allows the user to add a new free-hand annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddFreeHandHighlighterAnnotInteractive(System.Int32,System.Single)">
	<summary>
 Allows the user to add a new free-hand highlighter annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
</member><member name="M:GdPicture.GdViewer.AddPolygonAnnotInteractive(System.Int32,System.Single,System.Int32,System.Single)">
	<summary>
 Allows the user to add a new polygon annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="BackColor">The background color. Use ARGBI function to get a valid value.</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddFreeHandPolygonAnnotInteractive(System.Int32,System.Single,System.Int32,System.Single)">
	<summary>
 Allows the user to add a new free-hand polygon annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="BackColor">The background color. Use ARGBI function to get a valid value.</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddConnectedLinesAnnotInteractive(System.Int32,System.Single,System.Single)">
	<summary>
 Allows the user to add a new connected lines annotation using the mouse.
 </summary>
	<param name="BorderColor">The color of the border. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddRectangleHighlighterAnnotInteractive(System.Int32)">
	<summary>
 Allows the user to add a new Highlighter rectangle annotation using the mouse.
 </summary>
	<param name="BackColor">The background color to use. Use ARGBI function to get a valid value.</param>
</member><member name="M:GdPicture.GdViewer.AddTextAnnotationInteractive(System.String,System.Int32,System.String,GdPicture.FontStyle,System.Single,System.Boolean,System.Int32,System.Int32,System.Single,System.Single)">
	<summary>
 Allows the user to add a new text annotation using the mouse.
 </summary>
	<param name="Text">The text to render</param>
	<param name="ForeColor">The color of the font. Use ARGBI function to get a valid value.</param>
	<param name="FontName">The name of the font, IE: Arial</param>
	<param name="FontStyle">The style of the font</param>
	<param name="FontSize">The size of the font, in points</param>
	<param name="Fill">Defines if the annotation must be filled or not</param>
	<param name="BorderColor">The color of the border. Use ARGBI function to get a valid value.</param>
	<param name="BackColor">The background color</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
	<param name="Rotation">The rotation of the annotation, in degrees</param>
</member><member name="M:GdPicture.GdViewer.AddLinkAnnotationInteractive(System.String,System.String,System.Int32,System.Int32,System.String,GdPicture.FontStyle,GdPicture.FontStyle,System.Single,System.Single)">
	<summary>
 Allows the user to add a new link annotation using the mouse.
 </summary>
	<param name="Text">The text to render</param>
	<param name="Link">The destination of the annotation. IE: http://www.gdpicture.com</param>
	<param name="ForeColor">The color of the font. Use ARGBI function to get a valid value.</param>
	<param name="HoverForeColor">The color of the font when the mouse if over the annotation. Use ARGBI function to get a valid value.</param>
	<param name="FontName">The name of the font, IE: Arial</param>
	<param name="FontStyle">The style of the font</param>
	<param name="HoverFontStyle">The style of the font when the mouse if over the annotation</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full
                       transparency) and 1 (full opacity)</param>
	<param name="Rotation">The rotation of the annotation, in degrees</param>
</member><member name="M:GdPicture.GdViewer.AddStickyNoteAnnotationInteractive(System.String,System.Int32,System.String,GdPicture.FontStyle,System.Int32,System.Single,System.Single)">
	<summary>
 Allows the user to add a new sticky note annotation using the mouse.
 </summary>
	<param name="Text">The text to render</param>
	<param name="ForeColor">The color of the font. Use ARGBI function to get a valid value.</param>
	<param name="FontName">The name of the font, IE: Arial</param>
	<param name="FontStyle">The style of the font</param>
	<param name="FontSize">The size of the font, in points</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
	<param name="Rotation">The rotation of the annotation, in degrees</param>
</member><member name="M:GdPicture.GdViewer.AddRubberStampAnnotInteractive(System.String,System.Int32,System.String,GdPicture.FontStyle,System.Int32,System.Single,System.Single,System.Single)">
	<summary>
 Allows the user to add a new rubber stamp annotation using the mouse.
 </summary>
	<param name="Text">The text to render</param>
	<param name="ForeColor">The color of the font. Use ARGBI function to get a valid value.</param>
	<param name="FontName">The name of the font, IE: Arial</param>
	<param name="FontStyle">The style of the font.</param>
	<param name="BorderColor">The border color. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
	<param name="Rotation">The rotation of the annotation, in degrees</param>
</member><member name="M:GdPicture.GdViewer.AddRectangleAnnotInteractive(System.Boolean,System.Boolean,System.Int32,System.Int32,System.Single,System.Single)">
	<summary>
 Allows the user to add a new rectangle annotation using the mouse.
 </summary>
	<param name="Fill">Defines if the rectangle must be filled</param>
	<param name="Stroke">Defines if the rectangle must be stroked</param>
	<param name="BackColor">The background color to use if the rectangle must be filled. Use ARGBI function to get a valid value.</param>
	<param name="BorderColor">The border color to use if the rectangle must be stroked. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddEllipseAnnotInteractive(System.Boolean,System.Boolean,System.Int32,System.Int32,System.Single,System.Single)">
	<summary>
 Allows the user to add a new ellipse annotation using the mouse.
 </summary>
	<param name="Fill">Defines if the ellipse must be filled</param>
	<param name="Stroke">Defines if the ellipse must be stroked</param>
	<param name="BackColor">The background color to use if the ellipse must be filled. Use ARGBI function to get a valid value.</param>
	<param name="BorderColor">The border color to use if the ellipse must be stroked. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddEmbeddedImageAnnotInteractive(System.Int32,System.Boolean,System.Int32,System.Single,System.Single)">
	<summary>
 Allows the user to add a new embedded image annotation, from a GdPicture image, using the mouse.
 </summary>
	<param name="ImageID">A GdPicture Image identifier. The image to render</param>
	<param name="Stroke">Defines if the annotation must be stroked</param>
	<param name="BorderColor">The border color to use if the annotation must be stroked. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.AddEmbeddedImageAnnotInteractive(System.String,System.Boolean,System.Int32,System.Single,System.Single)">
	<summary>
 Allows the user to add a new embedded image annotation, from a file, using the mouse.
 </summary>
	<param name="ImagePath">The path of the image to render. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="Stroke">Defines if the annotation must be stroked</param>
	<param name="BorderColor">The border color to use if the annotation must be stroked. Use ARGBI function to get a valid value.</param>
	<param name="BorderWidth">The border width, in inches</param>
	<param name="Opacity">Defines the opacity of the annotation. Must be a value between 0 (full transparency) and 1 (full opacity)</param>
</member><member name="M:GdPicture.GdViewer.SaveDocumentToPDF(System.String)">
	<summary>
 Saves the displayed document in PDF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
	<param name="FilePath">The path of PDF to create</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SaveDocumentToPDF(System.IO.Stream)">
	<summary>
 Saves the displayed document into a stream, in PDF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
	<param name="Stream">The stream to save the PDF.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SaveDocumentToPDF(System.String,System.String,System.String)">
	<summary>
 Saves the displayed document in PDF format with GdPicture/XMP annotation support on a distant server
 using HTTP or FTP transfer. In case of multipage document saving, the SavingProgress callback can be
 raised.
 </summary>
	<param name="Uri">The full uri of the file to create. IE: ftp://ftp.gdpicture.com/upload/myfile.pdf
                   or http://www.gdpicture.com/upload/myfile.pdf</param>
	<param name="Login">The login required to be authenticated on the server. Can be an empty string.</param>
	<param name="Password">The password required to be authenticated on the server. Can be an empty
                        string.</param>
	<seealso cref="M:GdPicture.GdViewer.GetLastTransferError"/>
	<returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError function can be used for diagnosing the error.
 </returns>
</member><member name="M:GdPicture.GdViewer.SaveDocumentToTIFF(System.IO.Stream,GdPicture.TiffCompression)">
	<summary>
 Saves the displayed document into a stream, in TIFF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
	<param name="Stream">The Stream to save the TIFF image</param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SaveDocumentToTIFF(System.String,GdPicture.TiffCompression)">
	<summary>
 Saves the displayed document in TIFF format with GdPicture/XMP annotation support.
 In case of multipage document saving, the SavingProgress callback can be raised.
 </summary>
	<param name="FilePath">The path of TIFF to create</param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SaveDocumentToTIFF(System.String,System.String,System.String,GdPicture.TiffCompression)">
	<summary>
 Saves the displayed document in TIFF format with GdPicture/XMP annotation support on a distant server
 using HTTP or FTP transfer. In case of multipage document saving, the SavingProgress callback can be
 raised.
 </summary>
	<param name="Uri">The full uri of the file to create. IE: ftp://ftp.gdpicture.com/upload/myfile.tif
                   or http://www.gdpicture.com/upload/myfile.tif</param>
	<param name="Login">The login required to be authenticated on the server. Can be an empty
                     string.</param>
	<param name="Password">The password required to be authenticated on the server. Can be an empty
                        string.</param>
	<param name="Compression">A member of the TiffCompression enumeration. </param>
	<seealso cref="M:GdPicture.GdViewer.GetLastTransferError"/>
	<returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError function can be used for diagnosing the error.
 </returns>
</member><member name="M:GdPicture.GdViewer.SaveDocumentToJPEG(System.String,System.Int32)">
	<summary>
 Saves the displayed document in JPEG format with GdPicture/XMP annotation support.
 </summary>
	<param name="FilePath">The path of JPEG to create</param>
	<param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
                        best quality and worse compression. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SaveDocumentToJPEG(System.IO.Stream,System.Int32)">
	<summary>
 Saves the displayed document into a stream, in JPEG format with GdPicture/XMP annotation support.
 </summary>
	<param name="Stream">The stream to save the JPEG image.</param>
	<param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
                        best quality and worse compression. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SaveDocumentToJPEG(System.String,System.String,System.String,System.Int32)">
	<summary>
 Saves the displayed document in JPEG format with GdPicture/XMP annotation support on a distant server
 using HTTP or FTP transfer. 
 </summary>
	<param name="Uri">The full uri of the file to create. IE: ftp://ftp.gdpicture.com/upload/myfile.jpg
                   or http://www.gdpicture.com/upload/myfile.jpg</param>
	<param name="Login">The login required to be authenticated on the server. Can be an empty string.</param>
	<param name="Password">The password required to be authenticated on the server. Can be an empty
                        string.</param>
	<param name="Quality">Compression level [0 to 100]. 0: worse quality and better compression, 100:
                        best quality and worse compression. </param>
	<seealso cref="M:GdPicture.GdViewer.GetLastTransferError"/>
	<returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError function can be used for diagnosing the error.
 </returns>
</member><member name="M:GdPicture.GdViewer.SaveAnnotationsToXMP(System.String)">
	<summary>
 Saves the GdPicture/XMP annotation part of the current page of the displayed document to a XML file.
 </summary>
	<param name="FilePath">The path of XML file to create</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SaveAnnotationsToXMP(System.IO.Stream)">
	<summary>
 Saves the GdPicture/XMP annotation part of the current page of the displayed document to a stream.
 </summary>
	<param name="Stream">The stream to save the annotations</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<example>
 Save annotations to stream.
 <code lang="vb.net">
 Dim annotStream As New IO.MemoryStream
 GdViewer1.SaveAnnotationsToXMP(annotStream)
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.LoadAnnotationsFromXMP(System.String)">
	<summary>
 Loads and displays GdPicture/XMP annotation from a XML file previously generated by the SaveAnnotationsToXMP method.
 </summary>
	<param name="FilePath">The path of XML file to load</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.LoadAnnotationsFromXMP(System.IO.Stream)">
	<summary>
 Loads and displays GdPicture/XMP annotation from a stream containing data previously generated by the SaveAnnotationsToXMP method.
 </summary>
	<param name="Stream">The Stream object containing the annotations data</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.BurnAnnotationsToPage(System.Boolean)">
	<summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the displayed document.
 </summary>
	<param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.BurnAnnotationsToPage(System.Boolean,GdPicture.GdPictureOutputIntent)">
	<summary>
 Burns (or flatten) the GdPicture/XMP annotation of the current page of the displayed document.
 </summary>
	<param name="RemoveInitialAnnots">True to remove annotation blob content from the file, else False.</param>
	<param name="Intent">A member of the GdPictureOutputIntent enumeration. Defines the intent of the produced page. Default value is IntentColor. Other intents produce smaller PDF page.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayTextEditBox(System.Int32)">
	<summary>
 Prompts the annotation text modification dialog box to the user. Can be used with StickyNote and Text annotations only.
 This function is particularly useful if you want to let the user subsequently define the text of the annotation after having added it (see example).
 </summary>
	<param name="AnnotationIdx">The index of the annotation.</param>
	<example>
 Prompts the user to modify annotation text by intercepting the AnnotationAddedByUse event.
 
 <code lang="vb.net">
 Private Sub GdViewer1_AnnotationAddedByUser(ByVal AnnotationIdx As Integer) Handles GdViewer1.AnnotationAddedByUser
    GdViewer1.DisplayTextEditBox(AnnotationIdx)
 End Sub
 </code>
	</example>
</member><member name="E:GdPicture.GdViewer.DropFile">
	<summary>
 Occurs when a file is dropped in the Viewer.
 </summary>
	<remarks>The AllowDropFile property must be turned to True to use this event.</remarks>
	<param name="File">The path of the file dropped in the Viewer.</param>
	<seealso cref="E:GdPicture.GdViewer.DropFile"/>
</member><member name="E:GdPicture.GdViewer.SavingProgress">
	<summary>
 Occurs when a document is being saved.
 </summary>
	<param name="PageNo">The number of the page (1-based) that is curently in creation</param>
	<param name="PageCount">The total number of pages to be saved</param>
</member><member name="E:GdPicture.GdViewer.AnnotationStartEditingText">
	<summary>
 Occurs when the user is editing the text content of a GdPicture/XMP annotation by double-clicking it.
 </summary>
	<param name="AnnotationIdx">The index of the selected annotation</param>
</member><member name="E:GdPicture.GdViewer.AnnotationEndEditingText">
	<summary>
 Occurs when the user finished to edit the text content of a GdPicture/XMP annotation by leaving it.
 </summary>
	<param name="AnnotationIdx">The index of the selected annotation</param>
</member><member name="E:GdPicture.GdViewer.AnnotationSelected">
	<summary>
 Occurs when a GdPicture/XMP annotation have been selected by the user.
 </summary>
	<param name="AnnotationIdx">The index of the selected annotation</param>
</member><member name="E:GdPicture.GdViewer.AnnotationClicked">
	<summary>
 Occurs when a GdPicture/XMP annotation have been clicked by the user.
 </summary>
	<param name="AnnotationIdx">The index of the clicked annotation</param>
</member><member name="E:GdPicture.GdViewer.BeforeAnnotationAddedByUser">
	<summary>
 Occurs when a GdPicture/XMP annotation have been added by the user. This event occurs in mouse down action, 
 therefore it can be particularly useful to change some properties of the new annotation to add before rendering it to the screen. See example.
 </summary>
	<param name="AnnotationIdx">The index of the annotation</param>
	<example>
 Catch the BeforeAnnotationAddedByUser event to modify the background color of the new added sticky-note annotations.
 
 <code lang="vb.net">
  Private Sub GdViewer1_AnnotationAddedByUser(ByVal AnnotationIdx As Integer) Handles GdViewer1.BeforeAnnotationAddedByUser
      Dim annot As GdPicture.Annotation = GdViewer1.GetAnnotationFromIdx(AnnotationIdx)
      If TypeOf annot Is AnnotationStickyNote Then
         DirectCast(annot, AnnotationStickyNote).FillColor = Color.Beige
         GdViewer1.DisplayTextEditBox(AnnotationIdx)
      End If
  End Sub
 </code>
	</example>
</member><member name="E:GdPicture.GdViewer.AnnotationAddedByUser">
	<summary>
 Occurs when a GdPicture/XMP annotation have been added  by the user.This event occurs in mouse up action.
 </summary>
	<param name="AnnotationIdx">The index of the annotation</param>
</member><member name="E:GdPicture.GdViewer.AnnotationRotated">
	<summary>
 Occurs when a GdPicture/XMP annotation is rotated  by the user
 </summary>
	<param name="AnnotationIdx">The index of the annotation</param>
</member><member name="E:GdPicture.GdViewer.AnnotationMoved">
	<summary>
 Occurs when a GdPicture/XMP annotation is moved  by the user
 </summary>
	<param name="AnnotationIdx">The index of the annotation</param>
</member><member name="E:GdPicture.GdViewer.AnnotationResized">
	<summary>
 Occurs when a GdPicture/XMP annotation is resized  by the user
 </summary>
	<param name="AnnotationIdx">The index of the annotation</param>
</member><member name="E:GdPicture.GdViewer.PdfPasswordRequest">
	<summary>
 Occurs if a password is needed to decrypt the loaded PDF. This event is raised when the
 PDFShowDialogForPassword property have been set to False.
 </summary>
	<param name="PassWord">The password to decrypt the PDF. </param>
</member><member name="E:GdPicture.GdViewer.BeforePrintPage">
	<summary>
 Occurs before a page is printed.
 </summary>
	<param name="Page">The page to be print. </param>
	<param name="PageLeft">The number of page remaining. </param>
</member><member name="E:GdPicture.GdViewer.AfterPrintPage">
	<summary>
 Occurs after a page is printed.
 </summary>
	<param name="Page">The page to be print. </param>
	<param name="PageLeft">The number of page remaining. </param>
</member><member name="E:GdPicture.GdViewer.DataReceived">
	<summary>
 Occurs when data has received after a call of the DisplayFromHTTP() or DisplayFromFTP() function.
 </summary>
	<param name="PercentProgress">The percentage of the data transferred.</param>
	<param name="SizeLeft">The total size of the data left to transfer in byte. </param>
	<param name="TotalLength">The total size of the data to transfer in byte.</param>
</member><member name="E:GdPicture.GdViewer.TransferEnded">
	<summary>
 Occurs when the latest asynchronous web transfer is done.
 </summary>
	<param name="status">A member of the GdPictureStatus enumeration.</param>
	<param name="Download">True if latest transfer was a download, else False (upload).</param>
</member><member name="E:GdPicture.GdViewer.AfterZoomChange">
	<summary>
 Occurs after changing level of zoom.
 </summary>
</member><member name="E:GdPicture.GdViewer.BeforeZoomChange">
	<summary>
 Occurs before changing level of zoom.
 </summary>
</member><member name="E:GdPicture.GdViewer.ScrollViewer">
	<summary>
 Occurs when the user scrolls through the client area using the vertical or the horizontal scrollbar.
 </summary>
</member><member name="E:GdPicture.GdViewer.RectEditedByUser">
	<summary>
 Occurs when the rectangle of area selection is edited by the user.
 </summary>
</member><member name="E:GdPicture.GdViewer.RegionEditedByUser">
	<summary>
 Occurs when a region is edited by the user.
 </summary>
	<param name="RegionID">The ID of the edited region.</param>
</member><member name="E:GdPicture.GdViewer.RegionSelectedByUser">
	<summary>
 Occurs when a region is selected by the user.
 </summary>
	<param name="RegionID">The ID of the edited region.</param>
</member><member name="E:GdPicture.GdViewer.Rotation">
	<summary>
 Occurs when the displayed document is rotated.
 </summary>
	<param name="Rotation">A member of the RotateFlipType enumeration.</param>
</member><member name="E:GdPicture.GdViewer.BeforeRotation">
	<summary>
 Occurs before the displayed document is rotated.
 </summary>
	<param name="Rotation">A member of the RotateFlipType enumeration.</param>
</member><member name="E:GdPicture.GdViewer.PageChanged">
	<summary>
 Occurs when changing page of the displayed document.
 </summary>
</member><member name="E:GdPicture.GdViewer.BeforeDocumentChange">
	<summary>
 Occurs before changing displayed document. 
 </summary>
</member><member name="E:GdPicture.GdViewer.AfterDocumentChange">
	<summary>
 Occurs after changing displayed document.
 </summary>
</member><member name="E:GdPicture.GdViewer.DocumentClosed">
	<summary>
 Occurs when the displayed document is closed.
 </summary>
</member><member name="E:GdPicture.GdViewer.PageDisplayed">
	<summary>
 Occurs when a page has been successfully displayed.
 </summary>
</member><member name="E:GdPicture.GdViewer.ClickMenu">
	<summary>
 Occurs when an item of the contextual menu has been clicked.
 </summary>
	<param name="MenuItem">Item Index.<para></para>Can be: 2: Pages / Frames -&gt; Goto First<para></para>3:
                        Pages / Frames -&gt; Goto Previous<para></para>4: Pages / Frames -&gt;
                        Goto Next<para></para>5: Pages / Frames -&gt; Goto Last<para></para>6:
                        Play Gif<para></para>7: Stop Gif Animation<para></para>9: Rotations -
                        Flips -&gt; Rotate 90°<para></para>10: Rotations - Flips -&gt; Rotate
                        180°<para></para>11: Rotations - Flips -&gt; Rotate 270°<para></para>12:
                        Rotations - Flips -&gt; Flip X<para></para>13: Rotations - Flips -&gt;
                        RotateFlip 90°<para></para>14: Rotations - Flips -&gt; RotateFlip 180°<para></para>15:
                        Rotations - Flips -&gt; RotateFlip 270°<para></para>16: ScrollBars<para></para>17:
                        Copy to Clipboard<para></para>19: Zoom -&gt; Zoom in<para></para>20: Zoom
                        -&gt; Zoom out<para></para>21: Zoom -&gt; Zoom 100%<para></para>22: Zoom
                        -&gt; Zoom to selected area<para></para>23: Zoom -&gt; Fit image to viewer
                        (keep aspect ratio)<para></para>24: Zoom -&gt; Fit image to viewer (don't
                        keep aspect ratio)<para></para>25: Zoom -&gt; Fit image to viewer width<para></para>26:
                        Zoom -&gt; Fit image to viewer height<para></para>28: Mouse Mode -&gt;
                        Nothing<para></para>29: Mouse Mode -&gt; Hand Pan Tool<para></para>30:
                        Mouse Mode -&gt; Area Selection Tool<para></para>31: Left Click -&gt; Area
                        Zooming Tool<para></para>33: Viewer Quality -&gt; Automatic<para></para>34:
                        Viewer Quality -&gt; Quality Low<para></para>35: Viewer Quality -&gt;
                        Quality Bilinear<para></para>36: Viewer Quality -&gt; Quality Bicubic<para></para>37:
                        Viewer Quality -&gt; Quality Bilinear HQ<para></para>38: Viewer Quality -&gt;
                        Quality Bicubic HQ<para></para>39: Mouse Mode -&gt; Magnifier Tool<para></para></param>
</member><member name="P:GdPicture.GdViewer.AllowDropFile">
	<summary>
 Defines if the user is able to drop files from the explorer to the control.
 </summary>
	<remarks>When set to true and when file is dropped within the viewer the DropFile event is raised.</remarks>
	<seealso cref="E:GdPicture.GdViewer.DropFile"/>
</member><member name="P:GdPicture.GdViewer.HQAnnotationRendering">
	<summary>
 Defines if annotations must be rendered in High Quality mode.
 </summary>
</member><member name="P:GdPicture.GdViewer.HScrollVisible">
	<summary>
 Returns if the horizontal scrollbar is visible or not. 
 </summary>
</member><member name="P:GdPicture.GdViewer.VScrollVisible">
	<summary>
 Returns if the vertical scrollbar is visible or not. 
 </summary>
</member><member name="M:GdPicture.GdViewer.GetHdc">
	<summary>
  Gets the handle to the device context associated to the viewer.
 </summary>
	<returns>The handle to the device context associated to the viewer</returns>
</member><member name="M:GdPicture.GdViewer.GetLastPath">
	<summary>
  Returns the path of the latest loaded or saved file.
  </summary>
	<returns>
  The latest loaded or saved file path.
  </returns>
	<example>
 Prompt the user to select a document to display and retrieve the path of the selected file.
  
  <code lang="vb.net">
  Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
      GdViewer.DisplayFromFile("") 'Specifying empty string prompts the user to select a file
      Msgbox "File loaded: " + GdViewer.GetLastPath()
  End Sub
  </code>
	</example>
</member><member name="M:GdPicture.GdViewer.ReleaseHdc(System.IntPtr)">
	<summary>
 Releases a device context obtained by a previous call to the GetHdc() method.
 </summary>
	<param name="Hdc">The handle to the device context associated to the viewer.</param>
</member><member name="P:GdPicture.GdViewer.Graphics">
	<summary>
 The graphics object of the viewer. 
 </summary>
</member><member name="P:GdPicture.GdViewer.ZoomCenterAtMousePosition">
	<summary>
 Defines if during a zoom operation the document must be centered at the current mouse position. 
 </summary>
</member><member name="P:GdPicture.GdViewer.EnabledProgressBar">
	<summary>
 Defines if during a operation raising a progression callback (IE: saving document, loading from HTTP), a progressbar is displayed in the control.
 </summary>
</member><member name="P:GdPicture.GdViewer.PDFShowDialogForPassword">
	<summary>
 If the PDF to open is protected, the control will prompt the user for a password. Turn this property
 to False to use your own dialog box (you will have to catch the PDFPasswordRequest event). 
 </summary>
</member><member name="P:GdPicture.GdViewer.Cursor">
	<summary>
 The cursor that appears when the pointer moves over the viewer. It is recommended to not use this function.
 </summary>
</member><member name="P:GdPicture.GdViewer.ScrollBars">
	<summary>
 Defines if scrollbars can be displayed or not within the viewer. If true, scrollbars appears when the area to render is larger than the control. 
 </summary>
</member><member name="P:GdPicture.GdViewer.OptimizeDrawingSpeed">
	<summary>
 Defines if the viewer must optimize drawing speed or document loading time.
 
 True: Decrease dramatically drawing time but increase a bit the document loading time. Suggested for
 large documents. If used, it is also recommended to set the DisplayQualityAuto to True.
 
 False (default): Increase drawing time but decrease document loading time. Suggested for small
 documents.
 </summary>
</member><member name="P:GdPicture.GdViewer.ForceScrollBars">
	<summary>
 Turn this property to True to force the viewer to always displaying scrollbars. 
 </summary>
</member><member name="P:GdPicture.GdViewer.EnableMenu">
	<summary>
 To enable or disable the viewer contextual menu. 
 </summary>
</member><member name="P:GdPicture.GdViewer.Zoom">
	<summary>
 Zoom factor.
 
 1 for 100%, 1.5 for 150%, 2 for 200%... 
 </summary>
</member><member name="P:GdPicture.GdViewer.ZoomMax">
	<summary>
 The maximum zoom factor which can be used with the displayed document. 
 </summary>
</member><member name="P:GdPicture.GdViewer.PageWidth">
	<summary>
 Width in pixel of the current page of the displayed document. 
 </summary>
</member><member name="P:GdPicture.GdViewer.PageHeight">
	<summary>
 Height in pixel of the current page of the displayed document. 
 </summary>
</member><member name="P:GdPicture.GdViewer.MouseMode">
	<summary>
 Defines the viewer mouse mode.
 </summary>
	<returns>
 A member of the ViewerMouseMode enumeration. 
 </returns>
</member><member name="P:GdPicture.GdViewer.RectBorderColor">
	<summary>
 Defines the color of the rectangle of area selection. 
 </summary>
</member><member name="P:GdPicture.GdViewer.MagnifierWidth">
	<summary>
 Defines the width, in pixel, of the magnifier.
 </summary>
</member><member name="P:GdPicture.GdViewer.MagnifierHeight">
	<summary>
 Defines the height, in pixel, of the magnifier.
 </summary>
</member><member name="P:GdPicture.GdViewer.MagnifierZoomX">
	<summary>
 Defines the horizontal zoom (or scale) of the, of the magnifier. IE: 2.0 defines a zoom of 200%.
 </summary>
</member><member name="P:GdPicture.GdViewer.MagnifierZoomY">
	<summary>
 Defines the vertical zoom (or scale) of the, of the magnifier. IE: 2.0 defines a zoom of 200%.
 </summary>
</member><member name="P:GdPicture.GdViewer.ZoomStep">
	<summary>
 Defines the percentage of increasing or decreasing of the level of zoom for Zoom In &amp; Zoom Out
 operations.
 
 Default is 25.
 </summary>
</member><member name="P:GdPicture.GdViewer.RectBorderSize">
	<summary>
 Defines the border size in pixel of the rectangle of area selection. 
 </summary>
</member><member name="P:GdPicture.GdViewer.ScrollSmallChange">
	<summary>
 Scrollbars small change value. 
 </summary>
</member><member name="P:GdPicture.GdViewer.ScrollLargeChange">
	<summary>
 Scrollbars large change value. 
 </summary>
</member><member name="P:GdPicture.GdViewer.VerticalResolution">
	<summary>
 Vertical resolution in DPI (Dot Per Inch) of the current page of the displayed document. 
 </summary>
</member><member name="P:GdPicture.GdViewer.HorizontalResolution">
	<summary>
 Horizontal resolution in DPI (Dot Per Inch) of the current page of the displayed document. 
 </summary>
</member><member name="P:GdPicture.GdViewer.PageCount">
	<summary>
 Number of pages in the displayed document. 
 </summary>
</member><member name="P:GdPicture.GdViewer.CurrentPage">
	<summary>
 Current page of the displayed document. (Starts from 1). 
 </summary>
</member><member name="P:GdPicture.GdViewer.SilentMode">
	<summary>
 Turn this property to True to deactivate error reporting through MessageBox. 
 </summary>
</member><member name="P:GdPicture.GdViewer.ForceTemporaryModeForPDF">
	<summary>
 Forces the viewer to use a temporary copy when it displays a PDF. 
 </summary>
</member><member name="P:GdPicture.GdViewer.ForceTemporaryModeForImage">
	<summary>
 Forces the viewer to use a temporary copy when it displays an image. 
 </summary>
</member><member name="P:GdPicture.GdViewer.IgnoreDocumentResolution">
	<summary>
 Set to True to ignore vertical &amp; horizontal resolutions measurement when the viewer displays an
 image. 
 </summary>
</member><member name="P:GdPicture.GdViewer.LockViewer">
	<summary>
 Turn this property to True to avoid viewer refreshes. 
 </summary>
</member><member name="P:GdPicture.GdViewer.ZoomMode">
	<summary>
 Zoom mode used by the viewer.
 </summary>
	<returns>
 A member of the ViewerZoomMode enumeration. 
 </returns>
</member><member name="P:GdPicture.GdViewer.EnableMouseWheel">
	<summary>
 Specifies whether the object can change zoom during to the mouse Wheel events. 
 </summary>
</member><member name="P:GdPicture.GdViewer.DocumentAlignment">
	<summary>
 Default image alignment within the viewer when the area of the viewer if smaller than the displayed
 document in its current zoom configuration.
 
 IE: set this property to ImagePositionTopLeft to show to top-left area of the image when the user
 make a positive zoom.
 </summary>
	<returns>
 A member of the ViewerDocumentAlignment enumeration.
 </returns>
</member><member name="P:GdPicture.GdViewer.DocumentPosition">
	<summary>
 Default page position within the viewer when the displayed document in its current zoom configuration
 if smaller than then area of the viewer.
 </summary>
	<returns>
 A member of the ViewerDocumentPosition enumeration. 
 </returns>
</member><member name="P:GdPicture.GdViewer.AnimateGIF">
	<summary>
 Defines if by default the viewer must animate loaded multiframe GIF images. True by default.
 </summary>
</member><member name="P:GdPicture.GdViewer.DisplayQuality">
	<summary>
 Defines the level of displaying quality.
 </summary>
	<returns>
 A member of the DisplayQuality enumeration. 
 </returns>
</member><member name="P:GdPicture.GdViewer.DisplayQualityAuto">
	<summary>
 Defines if the level of displaying quality is automatic or not. 
 </summary>
</member><member name="P:GdPicture.GdViewer.PdfDisplayFormField">
	<summary>
 Defines if the viewer displays form fields included into PDF. 
 </summary>
</member><member name="P:GdPicture.GdViewer.PdfEnableLinks">
	<summary>
 By default, if a hyperlink of a PDF document is clicked, the control will follow the link. Turn this
 property to False to disable this behavior.
 </summary>
</member><member name="P:GdPicture.GdViewer.KeepDocumentPosition">
	<summary>
 Defines if the viewer must keep the page position when a new document is loaded. 
 </summary>
</member><member name="P:GdPicture.GdViewer.MouseWheelMode">
	<summary>
 Defines the Mouse Wheel function.
 </summary>
	<returns>
 A member of the ViewerMouseWheelMode enumeration. 
 </returns>
</member><member name="P:GdPicture.GdViewer.Gamma">
	<summary>
 Defines the gamma value, which represents the brightness of the displayed document.
 
 Gamma values range from 0.1 to 5.0 (normally 0.1 to 2.2), where a value less than 1 lightens the
 image, a value of 1 leaves the image unaffected and an value greater than 1 darkens the image.
 </summary>
</member><member name="P:GdPicture.GdViewer.RectIsEditable">
	<summary>
 Determines if the rectangle of area selection can be moved and resized by the user. 
 </summary>
</member><member name="P:GdPicture.GdViewer.RegionsAreEditable">
	<summary>
 Determines if regions can be moved and resized by the user. 
 </summary>
</member><member name="P:GdPicture.GdViewer.ContinuousViewMode">
	<summary>
 For multipage documents viewing, determines if the viewer displays automatically the next or the
 previous page when the user scroll the current page. 
 </summary>
</member><member name="P:GdPicture.GdViewer.MouseButtonForMouseMode">
	<summary>
 Defines the mouse button used for the MouseMode configuration.
 </summary>
	<returns>
 A member of the MouseButton enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.SetBackgroundColor(System.Int32)">
	<summary>
  Defines the background color of the Viewer. Must be a 32 bit ARGB
 value.
 </summary>
	<param name="ARGBColor">The background color.</param>
	<example>
 Set background color to RED.
 
 <code lang="vb.net">
 GdViewer1.SetBackgroundColor(GdViewer1.ARGBI(255, 255, 0, 0))
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.ARGBI(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>
 Returns a 32-bit Color value from a set of alpha, red, green, and blue color components.
 </summary>
	<param name="Alpha">The alpha component (also called transparency). Valid values are 0 (full
                     transparency) through 255 (full opacity). </param>
	<param name="Red">The red component. Valid values are 0 through 255. </param>
	<param name="Green">The green component. Valid values are 0 through 255. </param>
	<param name="Blue">The blue component. Valid values are 0 through 255. </param>
	<returns>
 A 32-bit Color value.
 </returns>
	<example>
  Getting ARGB Red color Using ARGBI.
 
 <code lang="vb.net">
 Integer RedColor = GdViewer1.ARGBI(255, 255, 0, 0) ' A = 255; R = 255:  G = 0: B = 0
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.ARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
	<summary>
 Returns a Color Object from a set of alpha, red, green, and blue color components.
 </summary>
	<param name="Alpha">The alpha component (also called transparency). Valid values are 0 (full
                     transparency) through 255 (full opacity). </param>
	<param name="Red">The red component. Valid values are 0 through 255. </param>
	<param name="Green">The green component. Valid values are 0 through 255. </param>
	<param name="Blue">The blue component. Valid values are 0 through 255. </param>
	<returns>
 A Color Object.
 </returns>
	<example>
  Getting a Red color Object.
 
 <code lang="vb.net">
 Color RedColor = GdViewer1.ARGB(255, 255, 0, 0) ' A = 255; R = 255:  G = 0: B = 0
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.ARGB(System.Byte,System.Byte,System.Byte)">
	<summary>
 Returns a Color Object from a set of red, green, and blue color components.
 </summary>
	<param name="Red">The red component. Valid values are 0 through 255. </param>
	<param name="Green">The green component. Valid values are 0 through 255. </param>
	<param name="Blue">The blue component. Valid values are 0 through 255. </param>
	<returns>
 A Color Object.
 </returns>
	<example>
  Getting a Red color Object.
 
 <code lang="vb.net">
 Color RedColor = GdViewer1.ARGB(255, 0, 0) ' R = 255:  G = 0: B = 0
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.ARGB(System.Int32)">
	<summary>
 Returns a Color Object from a 32-bit ARGB value.
 </summary>
	<param name="iargb">A value specifying the 32-bit ARGB value. </param>
	<returns>
 A Color Object.
 </returns>
	<example>
  Getting a Red color Object.
 
 <code lang="vb.net">
 Color RedColor = GdViewer1.ARGB(Color.Red.ToArgb()) 
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)">
	<summary>
 Adds a region on the current page of the displayed document using pixels to specify the location and size.
 </summary>
	<param name="Name">The name of the region. Can be an empty string. </param>
	<param name="Left">Left pixel (0 based) position of the region on the page. </param>
	<param name="Top">Top pixel (0 based) position of the region on the page. </param>
	<param name="Width">Width, in pixel, of the rectangle of the region on the page. </param>
	<param name="Height">Height, in pixel, of the rectangle of the region on the page. </param>
	<param name="MixMode">A member of the ForegroundMixMode enumeration. Specifies the foreground
                       mix mode to use to combine the region and the displayed image. </param>
	<param name="RegionColor">Color Object. You can build a Color Object using the ARGB() function.
                           Color used to fill the rectangle. </param>
	<returns>
 The ID of the added region.
 </returns>
	<remarks>
 Call the Redraw function to display the created region on the viewer. 
 </remarks>
	<example>
 Adding a region to the displayed document
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdViewer As New GdViewer
     Dim gdRegion As Integer
 
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     oGdViewer.DisplayFromFile("")
 
     gdRegion = oGdViewer.AddRegion("GdPicture Region", 50, 50, 100, 150, ForegroundMixMode.ForegroundMixModeBLACK, oGdViewer.ARGB(255, 255, 0, 0))
 
     oGdViewer.CloseDocument()
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)">
	<summary>
 Adds a region on the current page of the displayed document using inches to specify the location and
 size.
 </summary>
	<param name="Name">The name of the region. Can be an empty string. </param>
	<param name="Left">Left position in inches of the region on the page. </param>
	<param name="Top">Top position in inches of the region on the page. </param>
	<param name="Width">Width, in inches, of the rectangle of the region on the page. </param>
	<param name="Height">Height, in inches, of the rectangle of the region on the page. </param>
	<param name="MixMode">A member of the ForegroundMixMode enumeration. Specifies the foreground
                       mix mode to use to combine the region and the displayed image. </param>
	<param name="RegionColor">Color Object. You can build a Color Object using the ARGB() function.
                           Color used to fill the rectangle. </param>
	<returns>
 The ID of the added region.
 </returns>
	<remarks>
 Call the Redraw function to display the created region on the viewer.
 </remarks>
	<example>
 Adding a region to the displayed document using inches measurement unit
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdViewer As New GdViewer
     Dim gdRegion As Integer
 
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     oGdViewer.DisplayFromFile("")
 
     gdRegion = oGdViewer.AddRegionInches("GdPicture Region", 15.0, 15.0, 45.0, 50.0, ForegroundMixMode.ForegroundMixModeBLACK, oGdViewer.ARGB(255, 255, 0, 0))
 
     oGdViewer.CloseDocument()
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.RemoveRegionByID(System.Int32)">
	<summary>
 Remove a region using its ID. 
 </summary>
	<param name="RegionID">A region ID returned by the AddRegion or the AddRegionInches function. </param>
	<returns>
 True if success, else False (region does not exist). 
 </returns>
	<example>
 Removing a region from a displayed document using the RegionID
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oGdViewer As New GdViewer
     Dim bRemoved As Boolean
     Dim RegionID As Integer
 
     Dim oLicenseManager As New LicenseManager  'Please, replace XXXX by a valid demo or commercial license key.
     oLicenseManager.RegisterKEY("XXXX") ' Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
 
     oGdViewer.DisplayFromFile("")
 
     RegionID = oGdViewer.GetRegionID(1)
     bRemoved = oGdViewer.RemoveRegionByID(RegionID)
 
     oGdViewer.CloseDocument()
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.GetRegionID(System.Int32)">
	<summary>
 Returns a region ID.
 </summary>
	<param name="RegionNo">A region number. This number must be between 1 and the total number of
                        regions which can be get using the RegionCount function. </param>
	<returns>
 A region ID. 0 if the RegionNo parameter is invalid, else the ID of the selected region. 
 </returns>
</member><member name="M:GdPicture.GdViewer.GetRegionName(System.Int32)">
	<summary>
 Retrieve the name of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The name of the region.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionColor(System.Int32)">
	<summary>
 Retrieve the color of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The color of the region.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionColorSelection(System.Int32)">
	<summary>
 Retrieve the color of a region, when it is selected by the user, from its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The color of the region when it is selected.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionBorderColor(System.Int32)">
	<summary>
 Retrieve the border color of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The border color of the region.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionBorderWidth(System.Int32)">
	<summary>
 Retrieve the border width of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The border width of the region.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionPage(System.Int32)">
	<summary>
 Retrieve the page in a multipage document on which the region is drawn (set), by using the Region ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The page of the region.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionSelected(System.Int32)">
	<summary>
 Gets the selection status of a region, by using the Region ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 True if the specified region is selected, else False.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionSelected(System.Int32,System.Boolean)">
	<summary>
 Sets the selection status of a region, by using the Region ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 True if the success, else False.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionLeft(System.Int32)">
	<summary>
 Retrieve the left position in inches on the document, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The left position in inches of the region. The returned value corresponds to the left position of the region on the actual document, and not on the GdViewer.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionLeftPixels(System.Int32)">
	<summary>
 Retrieve the left position in pixels on the document, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The left position in pixels of the region. The returned value corresponds to the left position of the region on the actual document, and not on the GdViewer.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionTop(System.Int32)">
	<summary>
 Retrieve the top position in inches on the document, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The top position in inches of the region. The returned value corresponds to the top position of the region on the actual document, and not on the GdViewer.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionTopPixels(System.Int32)">
	<summary>
 Retrieve the top position in pixels on the document, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The top position in pixels of the region. The returned value corresponds to the top position of the region on the actual document, and not on the GdViewer.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionWidth(System.Int32)">
	<summary>
 Retrieve the width in inches on the document, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The width in inches of the region. The returned value corresponds to the width of the region on the actual document, and not on the GdViewer.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionWidthPixels(System.Int32)">
	<summary>
 Retrieve the width in pixels on the document, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The width in pixels of the region. The returned value corresponds to the width of the region on the actual document, and not on the GdViewer.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionHeightPixels(System.Int32)">
	<summary>
 Retrieve the height in pixels on the document, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The height in pixels of the region. The returned value corresponds to the width of the region on the actual document, and not on the GdViewer.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionHeight(System.Int32)">
	<summary>
 Retrieve the height in inches on the document, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The height in inches of the region. The returned value corresponds to the height of the region on the actual document, and not on the GdViewer.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.GetRegionMixMode(System.Int32)">
	<summary>
 Retrieve region's foreground mix mode using its id.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<returns>
 The foreground mix mode to use to combine the region and the displayed image. A member of the
 ForegroundMixMode enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionName(System.Int32,System.String)">
	<summary>
 Sets the name of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="Name">The name of the region.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionColor(System.Int32,System.Drawing.Color)">
	<summary>
 Sets the color of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="BgColor">The color of the region.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionColorSelection(System.Int32,System.Drawing.Color)">
	<summary>
 Sets the color of a region, when it is selected by the user, using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="BgColorSelected">The color of the region when it is selected.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionBorderColor(System.Int32,System.Drawing.Color)">
	<summary>
 Sets the border color of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="BorderColor">The border color of the region.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionBorderWidth(System.Int32,System.Int32)">
	<summary>
 Sets the border width of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="BorderWidth">The border width of the region.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionPage(System.Int32,System.Int32)">
	<summary>
 Sets the page on which the region is to be drawn (set) by using the region's ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="Page">The page of the region.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionLeft(System.Int32,System.Single)">
	<summary>
 Sets the left position in inches, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="Left">The left position in inches of the region.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionTop(System.Int32,System.Single)">
	<summary>
 Sets the top position in inches, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="Top">The top position in inches of the region.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionWidth(System.Int32,System.Single)">
	<summary>
 Sets the width in inches, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="Width">The width in inches of the region.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionHeight(System.Int32,System.Single)">
	<summary>
 Sets the height in inches, of a region using its ID.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="Height">The height in inches of the region.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionEditable(System.Int32,System.Boolean)">
	<summary>
 Defines if a region can be edited by user or not (can be by default).
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="Editable">True if the region can be edited by user, else False.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.SetRegionMixMode(System.Int32,GdPicture.ForegroundMixMode)">
	<summary>
 Defines the foreground mix mode to use to combine the region and the displayed image.
 </summary>
	<param name="RegionID">The ID of the region.</param>
	<param name="MixMode">The foreground mix mode to use to combine the region and the displayed image. A
                       member of the ForegroundMixMode enumeration.</param>
	<returns>
 True if success, else False (Unknown Region).
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetRegionID(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.RemoveRegionByName(System.String)">
	<summary>
 Remove a region by using its name.
 </summary>
	<param name="Name">The name of the region created using the AddRegion or the AddRegionInches function.
                    </param>
	<returns>
 True if success, else False (region does not exist). 
 </returns>
</member><member name="M:GdPicture.GdViewer.RemoveAllRegions">
	<summary>
 Remove all regions from the current document.
 </summary>
	<returns>
 True if success, else False (no region found).
 </returns>
</member><member name="M:GdPicture.GdViewer.RegionCount">
	<summary>
 Returns the number of regions on the displayed document.
 </summary>
	<seealso cref="M:GdPicture.GdViewer.AddRegion(System.String,System.Int32,System.Int32,System.Int32,System.Int32,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
	<seealso cref="M:GdPicture.GdViewer.AddRegionInches(System.String,System.Single,System.Single,System.Single,System.Single,GdPicture.ForegroundMixMode,System.Drawing.Color)"/>
</member><member name="M:GdPicture.GdViewer.DisplayNextPage">
	<summary>
 Displays the next page of the current multipage document.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayPreviousPage">
	<summary>
 Displays the previous page of the current multipage document.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayFirstPage">
	<summary>
 Displays the first page of the current multipage document.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayLastPage">
	<summary>
 Displays the last page of the current multipage document.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayPage(System.Int32)">
	<summary>
 Changes the displayed page of the current multipage document.
 </summary>
	<param name="Page">Page number between 1 and page count. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.CloseDocument">
	<summary>
 Closes the displayed document and clears the viewer.
 </summary>
</member><member name="M:GdPicture.GdViewer.CloseDocument(System.Boolean)">
	<summary>
 Closes the displayed document specifying to clear the viewer or not.
 </summary>
	<param name="NoCLear">Specify if the viewer must be cleared or not. </param>
</member><member name="M:GdPicture.GdViewer.ReleaseGdPictureImage(System.Int32)">
	<summary>
 Removes a GdPicture Image from the memory.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. The image to release. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.IsRect">
	<summary>
 Returns True if the rectangle of area selection is drawn on the viewer, else false.
 </summary>
	<example>
  Determining whether the rectangle of selection is drawn on the viewer or not
  <code lang="vb.net">
      Dim RectDrawnOnViewer As Boolean
      RectDrawnOnViewer = oGdViewer.IsRect()
  </code>
	</example>
</member><member name="M:GdPicture.GdViewer.IsRectDrawing">
	<summary>
 Returns True if the user is drawing the rectangle of area selection, else false.
 </summary>
	<example>
  Determining whether the user is drawing the rectangle of selection on the viewer or not
  <code lang="vb.net">
      Dim RectDrawningOnViewer As Boolean
      RectDrawningOnViewer = oGdViewer.IsRectDrawing()
  </code>
	</example>
</member><member name="M:GdPicture.GdViewer.IsRectEditing">
	<summary>
 Returns True if the user is moving or editing the rectangle of area selection, else false.
 </summary>
	<example>
  Determining whether the user is moving or editing the rectangle of selection on the viewer or not
  <code lang="vb.net">
      Dim RectIsEdited As Boolean
      RectIsEdited = oGdViewer.IsRectEditing()
  </code>
	</example>
</member><member name="M:GdPicture.GdViewer.GetDisplayedArea(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Returns the coordinates in pixel of the visible area of the displayed document.
 </summary>
	<param name="Left">Returns Left pixel (0 based) position of the area. </param>
	<param name="Top">Returns Top pixel (0 based) position of the area. </param>
	<param name="Width">Returns Width of the area in pixel. </param>
	<param name="Height">Returns Height of the area in pixel.</param>
</member><member name="M:GdPicture.GdViewer.GetDisplayedAreaInches(System.Single@,System.Single@,System.Single@,System.Single@)">
	<summary>
 Returns the coordinates in inches of the visible area of the displayed document.
 </summary>
	<param name="Left">Returns Left pixel (0 based) position of the area. </param>
	<param name="Top">Returns Top pixel (0 based) position of the area. </param>
	<param name="Width">Returns Width of the area in pixel. </param>
	<param name="Height">Returns Height of the area in pixel.</param>
</member><member name="M:GdPicture.GdViewer.GetRectCoordinatesOnDocument(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Returns the coordinates in pixel of the rectangle of area selection over the page of the displayed
 document.
 </summary>
	<param name="Left">Returns Left pixel position (0 based) of the rectangle of area selection. </param>
	<param name="Top">Returns Top pixel position (0 based) of the rectangle of area selection. </param>
	<param name="Width">Returns Width of the rectangle of area selection in pixel. </param>
	<param name="Height">Returns Height of the rectangle of area selection in pixel.</param>
</member><member name="M:GdPicture.GdViewer.GetRectCoordinatesOnDocumentInches(System.Single@,System.Single@,System.Single@,System.Single@)">
	<summary>
 Returns the coordinates in inches of the rectangle of area selection over the page of the displayed
 document.
 </summary>
	<param name="Left">Returns Left position of the rectangle of area selection in inches. </param>
	<param name="Top">Returns Top position of the rectangle of area selection in inches. </param>
	<param name="Width">Returns Width of the rectangle of area selection in inches. </param>
	<param name="Height">Returns Height of the rectangle of area selection in inches.</param>
</member><member name="M:GdPicture.GdViewer.GetRectCoordinatesOnViewer(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Returns the coordinates in pixel of the rectangle of area selection over the viewer.
 </summary>
	<param name="Left">Returns Left pixel position of the rectangle of area selection. </param>
	<param name="Top">Returns Top pixel position of the rectangle of area selection. </param>
	<param name="Width">Returns Width of the rectangle of area selection in pixel. </param>
	<param name="Height">Returns Height of the rectangle of area selection in pixel.</param>
</member><member name="M:GdPicture.GdViewer.GetRectLeftOnDocument">
	<summary>
 Returns the left coordinate in pixel of the rectangle of area selection over the page of the
 displayed document.
 </summary>
	<returns>
 Left pixel position (0 based) of the rectangle of area selection.
 </returns>
</member><member name="M:GdPicture.GdViewer.GetRectLeftOnViewer">
	<summary>
 Returns the left coordinate in pixel of the rectangle of area selection over the viewer.
 </summary>
	<returns>
 Left pixel position of the rectangle of area selection.
 </returns>
</member><member name="M:GdPicture.GdViewer.GetRectTopOnDocument">
	<summary>
 Returns the top coordinate in pixel of the rectangle of area selection over the page of the
 displayed document.
 </summary>
	<returns>
 Top pixel position (0 based) of the rectangle of area selection.
 </returns>
</member><member name="M:GdPicture.GdViewer.GetRectTopOnViewer">
	<summary>
 Returns the top coordinate in pixel of the rectangle of area selection over the viewer.
 </summary>
	<returns>
 Top pixel position of the rectangle of area selection.
 </returns>
</member><member name="M:GdPicture.GdViewer.GetRectHeightOnDocument">
	<summary>
 Returns the height in pixel of the rectangle of area selection over the page of the displayed
 document.
 </summary>
	<returns>
 Height of the rectangle of area selection.
 </returns>
</member><member name="M:GdPicture.GdViewer.GetRectWidthOnDocument">
	<summary>
 Returns the width in pixel of the rectangle of area selection over the page of the displayed
 document.
 </summary>
	<returns>
 Width of the rectangle of area selection.
 </returns>
</member><member name="M:GdPicture.GdViewer.GetRectWidthOnViewer">
	<summary>
 Returns the width in pixel of the rectangle of area selection over the viewer.
 </summary>
	<returns>
 Width of the rectangle of area selection.
 </returns>
</member><member name="M:GdPicture.GdViewer.GetRectHeightOnViewer">
	<summary>
 Returns the height in pixel of the rectangle of area selection over the viewer.
 </summary>
	<returns>
 Width of the rectangle of area selection.
 </returns>
</member><member name="M:GdPicture.GdViewer.SetRectCoordinatesOnDocument(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Sets the coordinates in pixel of the rectangle of area selection over the page of the displayed
 document.
 </summary>
	<param name="Left">Left pixel (0 based) position of the rectangle of area selection. </param>
	<param name="Top">Top pixel (0 based) position of the rectangle of area selection. </param>
	<param name="Width">Width of the rectangle of area selection in pixel. </param>
	<param name="Height">Height of the rectangle of area selection in pixel.</param>
</member><member name="M:GdPicture.GdViewer.SetRectCoordinatesOnDocumentInches(System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Sets the coordinates in inches of the rectangle of area selection over the page of the displayed
 document.
 </summary>
	<param name="Left">Left position of the rectangle of area selection in inches. </param>
	<param name="Top">Top position of the rectangle of area selection in inches. </param>
	<param name="Width">Width of the rectangle of area selection in inches. </param>
	<param name="Height">Height of the rectangle of area selection in inches.</param>
</member><member name="M:GdPicture.GdViewer.SetRectCoordinatesOnViewer(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Sets the coordinates in pixel of the rectangle of area selection over the viewer.
 </summary>
	<param name="Left">Required. Long. Left pixel position of the rectangle of area selection. </param>
	<param name="Top">Required. Long. Top pixel position of the rectangle of area selection. </param>
	<param name="Width">Required. Long. Width of the rectangle of area selection in pixel. </param>
	<param name="Height">Required. Long. height of the rectangle of area selection in pixel.</param>
</member><member name="M:GdPicture.GdViewer.GifPlay">
	<summary>
 Plays a GIF animation in loop.
 </summary>
</member><member name="M:GdPicture.GdViewer.GifStop">
	<summary>
 Stops a GIF animation.
 </summary>
</member><member name="M:GdPicture.GdViewer.DisplayFromStream(System.IO.Stream)">
	<summary>
 Displays document from a Stream object.
 </summary>
	<param name="Stream">System.IO.Stream object storing the document.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are PDF, RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromStream(System.IO.Stream,System.String)">
	<summary>
 Displays a document from a stream object specifying a password to uncrypt its content (required for encrypted PDF).
 </summary>
	<param name="Stream">System.IO.Stream object storing the document.</param>
	<param name="PassWord">Sets the password to use for reading the content of a PDF document. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are PDF, RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG,
 JPG, JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM,
 WBMP, TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR,
 Raw Fax G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromIStream(System.Runtime.InteropServices.ComTypes.IStream,System.String)">
	<summary>
 Displays a document from an IStream object.
 </summary>
	<param name="Stream">an IStream object storing the document. </param>
	<param name="PassWord">If any, defines the password to use to uncrypt the content of the document. Use empty string if no password is required.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are PDF, RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG,
 JPG, JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM,
 WBMP, TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR,
 Raw Fax G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromIStreamICM(System.Runtime.InteropServices.ComTypes.IStream)">
	<summary>
 Displays an image stored into an IStream object. This function uses embedded color management (ICM).
 </summary>
	<param name="Stream">an IStream object storing the image.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are  RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG,
 JPG, JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM,
 WBMP, TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR,
 Raw Fax G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromStreamICM(System.IO.Stream)">
	<summary>
 Displays an image stored into a Stream object. This function uses embedded color management (ICM).
 </summary>
	<param name="Stream">System.IO.Stream object storing the image data.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are  RAW, PICT, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG, JPE,
 JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP, TGA,
 SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax G3,
 EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromFTP(System.String,System.String,System.String,System.String,System.Int32)">
	<summary>
 Displays a document from a file stored in a distant server using FTP access. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
	<param name="Host">The host server IE: ftp.gdicture.com </param>
	<param name="Path">The image file path into the distant server IE: /images/nature.jpg </param>
	<param name="Login">User Login. </param>
	<param name="Password">User Password. </param>
	<param name="FTPPort">The FTP port number used. Usually 21. </param>
	<returns>
 A member of the GdPictureStatus enumeration. If non OK the GetLastTransferError() function can be used for diagnosing the error.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetLastTransferError"/>
	<remarks>
 Supported formats are PDF, RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromFTP(System.String,System.String,System.String)">
	<summary>
 Displays a document from a file stored in a distant server using FTP access. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
	<param name="Uri">The path of the document. IE: ftp://ftp.mywebsite.com/mydocument.pdf </param>
	<param name="Login">User Login. </param>
	<param name="Password">User Password. </param>
	<returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError function can be used for diagnosing the error.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetLastTransferError"/>
	<remarks>
 Supported formats are PDF, RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.SetHttpTransfertBufferSize(System.Int32)">
	<summary>
 Changes the default packet size used by the DisplayFromHTTP() and DisplayFromFTP functions. Default value used is 4096.
 </summary>
	<param name="BufferSize">New buffer size. ex 1024, 2048, 4096, 8192 etc </param>
	<seealso cref="M:GdPicture.GdViewer.DisplayFromHTTP(System.String,System.String,System.Int32)"/>
</member><member name="M:GdPicture.GdViewer.SetFtpPassiveMode(System.Boolean)">
	<summary>
 Defines if the FTP transfer mode is Passive or not for the DisplayFromFTP() function. True by
 default.
 </summary>
	<param name="PassiveMode">True for passive FTP transfer mode, else Flase. </param>
	<seealso cref="M:GdPicture.GdViewer.DisplayFromFTP(System.String,System.String,System.String,System.String,System.Int32)"/>
</member><member name="M:GdPicture.GdViewer.DisplayFromHTTPStop">
	<summary>
 Avoids the downloading started by the DisplayFromHTTP() or DisplayFromFTP() function.
 </summary>
	<seealso cref="M:GdPicture.GdViewer.DisplayFromHTTP(System.String,System.String,System.Int32)"/>
</member><member name="M:GdPicture.GdViewer.DisplayFromHTTP(System.String,System.String,System.Int32)">
	<summary>
 Displays a document from a file stored in a distant server using HTTP. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
	<param name="Host">The host server. IE: http://www.gdpicture.com </param>
	<param name="Path">The image file path into the distant server. IE: /images/nature.jpg </param>
	<param name="HTTPPort">The HTTP port number used. Usually 80 or 443 to use https transfer mode. </param>
	<returns>
 A member of the GdPictureStatus enumeration. If non OK the GetLastTransferError() function can be used for diagnosing the error.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.DisplayFromHTTPStop"/>
	<seealso cref="M:GdPicture.GdViewer.SetHttpTransfertBufferSize(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.GetLastTransferError"/>
	<remarks>
 Supported formats are PDF, RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromHTTP(System.String,System.String,System.String)">
	<summary>
 Displays a document from a file stored in a distant server using HTTP. The document will be loaded in an asynchronous way. You can catch the TransferProgress and the TransferEnded events to monitor the transfer.
 </summary>
	<param name="Uri">The destination Uri. IE: http://guides.gdpicture.com/v8/pdf/GdPicture.NET8.pdf</param>
	<param name="Login">The login required to access the URI. Can be an empty string.</param>
	<param name="Password">The password required to access the URI. Can be an empty string.</param>
	<returns>
 A member of the GdPictureStatus enumeration. If HTTP or FTP error status is returned the GetLastTransferError function can be used for diagnosing the error.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.DisplayFromHTTPStop"/>
	<seealso cref="M:GdPicture.GdViewer.SetHttpTransfertBufferSize(System.Int32)"/>
	<seealso cref="M:GdPicture.GdViewer.GetLastTransferError"/>
	<remarks>
 Supported formats are PDF, RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.GetLastTransferError">
	<summary>
 Returns, if any, the last HTTP or FTP transfer error description.
 </summary>
	<returns>
 The error description.
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayFromByteArray(System.Byte[])">
	<summary>
 Displays a document from a file stored within an array of bytes.
 </summary>
	<param name="Data">The document data.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are PDF RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
	<example>
 Displaying an image on the GdViewer from a byte Array
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
    Dim oFile As System.IO.FileInfo
    oFile = New System.IO.FileInfo("myimage.gif")
 
    Dim oFileStream As System.IO.FileStream = oFile.OpenRead()
    Dim lBytes As Integer = CInt(oFileStream.Length)
 
    If (lBytes &gt; 0) Then
       Dim fileData(lBytes - 1) As Byte
       Dim ImageID As Integer
 
       oFileStream.Read(fileData, 0, lBytes)
       oFileStream.Close()
       oGdViewer.DisplayFromByteArray(fileData)
    End If
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.DisplayFromByteArrayICM(System.Byte[])">
	<summary>
 Displays a document from a file stored within an array of bytes. This function uses embedded color
 management (ICM).
 </summary>
	<param name="Data">The document data. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are PDF, RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
	<example>
 Displaying an image on the GdViewer from a byte Array supporting ICM
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim oFile As System.IO.FileInfo
     oFile = New System.IO.FileInfo("myimage.gif")
 
     Dim oFileStream As System.IO.FileStream = oFile.OpenRead()
     Dim lBytes As Integer = CInt(oFileStream.Length)
 
     If (lBytes &gt; 0) Then
       Dim fileData(lBytes - 1) As Byte
       Dim ImageID As Integer
 
       oFileStream.Read(fileData, 0, lBytes)
       oFileStream.Close()
       oGdViewer.DisplayFromByteArrayICM(fileData)
     End If
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.DisplayFromMemory(System.IntPtr,System.Int32,System.Boolean)">
	<summary>
 Displays a document from a file stored within an area of the memory. 
 </summary>
	<param name="hMem">A pointer to the area of the memory which stores the document</param>
	<param name="Length">The length in byte of the area</param>
	<param name="UseICM">Set to true to use embedded color management (ICM) if any. Default value is False</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are PDF, RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromRawBits(System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.IntPtr)">
	<summary>
 Displays an Image from raw bitmap in memory.
 </summary>
	<remarks>
 Warning: Do not remove the raw bitmap from the memory until you closed the displayed document.
 </remarks>
	<param name="Width">Specifies the width, in pixels, of the bitmap. </param>
	<param name="Height">Specifies the height, in pixels, of the bitmap. </param>
	<param name="Stride">Specifies the byte offset between the beginning of one scan line and the
                      next. This is usually (but not necessarily) the number of bytes in the
                      pixel format (for example, 2 for 16 bits per pixel) multiplied by the
                      width of the bitmap. The value passed to this parameter must be a multiple
                      of four. </param>
	<param name="PixelFormat">specifies the pixel format of the bitmap. A member of the PixelFormat
                           enumeration. </param>
	<param name="Bits">Pointer to an array of bytes that contains the pixel data. The caller is
                    responsible for allocating and freeing the block of memory pointed to by
                    this parameter. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.GetStat"/>
	<example>
 Using DisplayFromRawBits. The following code assumes that the bits of the image are stored in an IntPtr called iBits
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     oGdViewer.DisplayFromRawBits(250, 250, 750, Imaging.PixelFormat.Format24bppRgb, iBits)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.DisplayFromString(System.String)">
	<summary>
 Displays a document from a file stored within string data (Encoding 1252).
 </summary>
	<param name="Data">String which contains the image file data. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromStringICM(System.String)">
	<summary>
 Displays a document from a file stored within string data (Encoding 1252). This function uses embedded color
 management (ICM).
 </summary>
	<param name="Data">String which contains the image file data. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromFile(System.String)">
	<summary>
 Displays a document from a file.
 </summary>
	<param name="FilePath">The path of the document to display. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromFile(System.String,System.String)">
	<summary>
 Displays a document from a file specifying a password to decrypt it (useful for encrypted PDF).
 </summary>
	<param name="FilePath">The path of the document to display. Can be an empty string. If empty, prompts the user to select a file. You can subsequently use the GetLastPath() function to retrieve the path of the selected file.</param>
	<param name="PassWord">Sets the password to use for reading the content of a PDF document. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromFileICM(System.String)">
	<summary>
 Displays a document from a file. This function uses embedded color management (ICM).
 </summary>
	<param name="FilePath">The path of the document to display. If this parameter is empty, prompts the
                        user to select a file. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Supported formats are RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromFileICM(System.String,System.String)">
	<param name="FilePath">The path of the document to display. If this parameter is empty, prompts the
                        user to select a file. </param>
	<param name="PassWord">Sets the password to use for reading the content of a PDF document.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Displays a document from a file specifying a password to decrypt it (useful for encrypted PDF). This
 function uses embedded color management (ICM).
 
 Supported formats are RAW, PICT, PDF, BMP, DIB, RLE, ICO, EMF, WMF, GIF, ANIMATED GIF, JPEG, JPG,
 JPE, JFIF, PNG, TIFF, MULTIPAGE TIFF, PNM, PPM, PBM, PGM, PFM, RPPM, RPGM, RPBM, PCX, XPM, XBM, WBMP,
 TGA, SGI, Sun RAS, PSD, MNG, Kodak PhotoCD files, KOALA files, JP2, J2K, JNG, JBIG2 (requires Plugin), IFF, HDR, Raw Fax
 G3, EXR, DDS and Dr. Halo files. 
 </remarks>
</member><member name="M:GdPicture.GdViewer.DisplayFromGdPictureImage(System.Int32)">
	<summary>
 Displays a GdPicture Image.
 
 IE: GdViewer1.DisplayFromGdPictureImage(GdPictureImaging1.GetNativeImage()).
 </summary>
	<param name="ImageID">GdPicture Image Identifier of the image to display. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayFromGdPicturePDF(GdPicture.GdPicturePDF)">
	<summary>
 Displays a PDF document from a GdPicturePDF object.
 </summary>
	<param name="PDF">A GdPicturePDF object. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayFromHBitmap(System.IntPtr)">
	<summary>
 Displays an image from a handle to a Windows Microsoft Windows Graphics Device Interface (GDI).
 </summary>
	<param name="Hbitmap">Windows Microsoft Windows Graphics Device Interface (GDI). </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayFromBitmap(System.Drawing.Bitmap)">
	<summary>
 Displays an image from a System.Drawing.Bitmap object.
 </summary>
	<param name="bm">Bitmap object. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayFromHICON(System.IntPtr)">
	<summary>
 Displays an image from a handle to a Windows handle to icon.
 </summary>
	<param name="HICON">Windows handle to icon. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayFromClipboard">
	<summary>
 Displays an image stored into the clipboard.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.DisplayFromDIB(System.IntPtr)">
	<summary>
 Displays a Device Independent Bitmap handle (DIB).
 </summary>
	<param name="Dib">Pointer to a Microsoft® Windows® Graphics Device Interface (GDI) BITMAPINFO
                   structure. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.ZoomIN">
	<summary>
 Increases the current level of zoom.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.ZoomOUT">
	<summary>
 Decreases the current level of zoom.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.ClearRect">
	<summary>
 Removes the rectangle of area selection from the viewer.
 </summary>
</member><member name="M:GdPicture.GdViewer.SetZoom100">
	<summary>
 Adjusts zoom level to 100% of the displayed document.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SetZoomFitViewer">
	<summary>
 Fits the displayed document to the viewer (keep aspect ratio).
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SetZoomWidthViewer">
	<summary>
 Fits the displayed document to the viewer width.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SetZoomHeightViewer">
	<summary>
 Fits the displayed document to the viewer height.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SetZoomViewer">
	<summary>
 Fits the displayed document to viewer area (don't keep aspect ratio).
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.SetLicenseNumber(System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member><member name="M:GdPicture.GdViewer.SetLicenseNumberUpgrade(System.String,System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member><member name="M:GdPicture.GdViewer.Redraw">
	<summary>
 Redraws the displayed document.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.Rotate(System.Drawing.RotateFlipType)">
	<summary>
 Rotates or flips the displayed document.
 </summary>
	<param name="Rotation">A member of the RotateFlipType enumeration. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Not available for MetaFile documents.
 </remarks>
</member><member name="M:GdPicture.GdViewer.GetDocumentType">
	<summary>
 Returns the type of the displayed document.
 </summary>
	<returns>
 A member of the DocumentType enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.GetHScrollBarMaxPosition">
	<summary>
 Returns the maximum position of the horizontal scrollbar.
 </summary>
</member><member name="M:GdPicture.GdViewer.GetVScrollBarMaxPosition">
	<summary>
 Returns the maximum position of the vertical scrollbar.
 </summary>
</member><member name="M:GdPicture.GdViewer.GetHScrollBarPosition">
	<summary>
 Returns the current position of the horizontal scrollbar.
 </summary>
</member><member name="M:GdPicture.GdViewer.GetVScrollBarPosition">
	<summary>
 Returns the current position of the vertical scrollbar.
 </summary>
</member><member name="M:GdPicture.GdViewer.SetHScrollBarPosition(System.Int32)">
	<summary>
 Moves to horizontal scrollbar to a specific position.
 </summary>
	<param name="NewPos">The position to move the scrollbar.</param>
</member><member name="M:GdPicture.GdViewer.SetVScrollBarPosition(System.Int32)">
	<summary>
 Moves to vertical scrollbar to a specific position.
 </summary>
	<param name="NewPos">The position to move the scrollbar.</param>
</member><member name="M:GdPicture.GdViewer.SetHVScrollBarPosition(System.Int32,System.Int32)">
	<summary>
 Moves in one shot the vertical and horizontal scrollbars to custom positions.
 </summary>
	<param name="NewPosH">The position to move the horizontal scrollbar. </param>
	<param name="NewPosV">The position to move the vertical scrollbar.</param>
</member><member name="M:GdPicture.GdViewer.ZoomRect">
	<summary>
 Adjusts zoom to the area covered by the rectangle of selection.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.ZoomArea(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Adjusts zoom &amp; position to display a custom area of the current document.
 </summary>
	<param name="Left">Left pixel position the area. </param>
	<param name="Top">Top pixel position the area. </param>
	<param name="Width">Width in pixel of the area. </param>
	<param name="Height">Height in pixel of the area. </param>
	<returns>
 A member of the GdPictureStatus enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.CenterOnRect">
	<summary>
 Moves the page of the displayed document to set the rectangle of selection at the middle of the
 viewer.
 </summary>
</member><member name="M:GdPicture.GdViewer.GetMouseLeftInDocument">
	<summary>
 Return the left coordinate in pixel (0 based) of the mouse position over the page of the displayed
 document.
 </summary>
</member><member name="M:GdPicture.GdViewer.GetMouseTopInDocument">
	<summary>
 Return the top coordinate in pixel (0 based) of the mouse position over the page of the displayed
 document.
 </summary>
</member><member name="M:GdPicture.GdViewer.GetPageThumbnail(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
 Creates a High Quality thumbnail (returns a GdPicture image) of custom size from a page of the
 displayed document.
 
 This function fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color.
 
 This GdPicture image can be used by another GdPictureImaging or GdViewer object.
 </summary>
	<param name="Width">The width of the thumbnail to create. </param>
	<param name="Height">The height of the thumbnail to create. </param>
	<param name="Page">The page of the document. </param>
	<param name="BackColor">Color Object. Background color of the thumbnail. </param>
	<returns>
 GdPicture Image Identifier. The Image thumbnail.
 </returns>
	<remarks>
 To delete the created GdPicture image from the memory you must use the ReleaseGdPictureImage()
 function.
 </remarks>
	<example>
 Creates a thumbnail of the current page and save it to PNG image.
 <code lang="vb.net">
  Dim ImageID As Integer = GdViewer1.GetPageThumbnail(256, 256, GdViewer1.CurrentPage, GdViewer1.ARGB(255, 180, 180, 180))
  Using oGdPictureImaging As New GdPictureImaging
      oGdPictureImaging.SaveAsPNG(ImageID, "c:\thumbnail.png")
  End Using
  GdViewer1.ReleaseGdPictureImage(ImageID)
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.GetPageThumbnailAsBitmap(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
	<summary>
 Creates a High Quality thumbnail (returns a Bitmap object) of custom size from a page of the
 displayed document.
 
 This function fits the image thumbnail within a rectangle of specified dimensions having a specified
 background color.
 </summary>
	<param name="Width">The width of the thumbnail to create. </param>
	<param name="Height">The height of the thumbnail to create. </param>
	<param name="Page">The page of the document. </param>
	<param name="BackColor">Color Object. Background color of the thumbnail.</param>
	<returns>
 The Image thumbnail.
 </returns>
	<example>
 Creates a thumbnail of the current page and save it to PNG image.
 <code lang="vb.net">
 Using myBitmap As Bitmap = GdViewer1.GetPageThumbnailAsBitmap(256, 256, GdViewer1.CurrentPage, Color.Gray)
     myBitmap.Save("c:\thumbnail.png")
 End Using
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.PdfSearchText(System.String,System.Int32,System.Boolean)">
	<summary>
 Searches the current page of the displayed PDF for a given text string.
 </summary>
	<param name="Text">The text to search for. </param>
	<param name="Occurrence">Optional. The occurrence of the text to search for. 0 to search and
                          highlight all occurrences found else 1 to search for the first
                          occurrence, 2 for the second...<para></para>If you specify a value
                          different of 0 the area covered by the occurrence found is made the
                          current selection. </param>
	<param name="CaseSensitive">True to apply case-sensitive search, else False. </param>
	<returns>
 True if the string has been found, else False.
 </returns>
	<example>
 Searches the current page for a string and highlight the result
 <code lang="vb.net">
 Dim Text As String = InputBox("Search...")
 Dim Occurrence As Integer = 1
 Dim Left, Top, Width, Height As Single
 Dim TextFound As Boolean = False
 
 GdViewer1.RemoveAllRegions()
 While GdViewer1.PdfSearchText(GdViewer1.CurrentPage, Text, Occurrence, False, Left, Top, Width, Height)
     TextFound = True
     GdViewer1.AddRegionInches("Region" &amp; Str(Occurrence), Left, Top, Width, Height, ForegroundMixMode.ForegroundMixModeMASKPEN, GdViewer1.ARGB(255, 255, 255, 0))
     Occurrence = Occurrence + 1
 End While
 If TextFound Then
     GdViewer1.Redraw()
 Else
     MsgBox("Not found !")
 End If
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.PdfSearchText(System.String,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Searches the current page of the displayed PDF for a given text string.
 </summary>
	<param name="Text">The text to search for. </param>
	<param name="Occurrence">Optional. The occurrence of the text to search for. 0 to search and
                          highlight all occurrences found else 1 to search for the first
                          occurrence, 2 for the second...<para></para>If you specify a value
                          different of 0 the area covered by the occurrence found is made the
                          current selection. </param>
	<param name="CaseSensitive">True to apply case-sensitive search, else False. </param>
	<param name="WholeWords">Searches for whole words only. </param>
	<returns>
 True if the string has been found, else False.
 </returns>
	<example>
 Searches the current page for a string and highlight the result
 <code lang="vb.net">
 Dim Text As String = InputBox("Search...")
 Dim Occurrence As Integer = 1
 Dim Left, Top, Width, Height As Single
 Dim TextFound As Boolean = False
 
 GdViewer1.RemoveAllRegions()
 While GdViewer1.PdfSearchText(GdViewer1.CurrentPage, Text, Occurrence, False, Left, Top, Width, Height)
     TextFound = True
     GdViewer1.AddRegionInches("Region" &amp; Str(Occurrence), Left, Top, Width, Height, ForegroundMixMode.ForegroundMixModeMASKPEN, GdViewer1.ARGB(255, 255, 255, 0))
     Occurrence = Occurrence + 1
 End While
 If TextFound Then
     GdViewer1.Redraw()
 Else
     MsgBox("Not found !")
 End If
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.PdfSearchText(System.Int32,System.String,System.Int32,System.Boolean,System.Single@,System.Single@,System.Single@,System.Single@)">
	<summary>
 Searches a specific page of the displayed PDF for an occurrence of a given text string and returns
 its bounding box.
 </summary>
	<param name="Page">The page to search. </param>
	<param name="Text">The text to search for. </param>
	<param name="Occurrence">The occurrence of the text to search for. 1 to search for the first
                          occurrence, 2 for the second... 0 is not accepted.<para></para></param>
	<param name="CaseSensitive">True to apply case-sensitive search, else False. </param>
	<param name="Left">If the occurrence is found, returns the left position in inches of the
                    area covering the text. </param>
	<param name="Top">If the occurrence is found, returns the top position in inches of the
                   area covering the text. </param>
	<param name="Width">If the occurrence is found, returns the width in inches of the area
                     covering the text. </param>
	<param name="Height">If the occurrence is found, returns the height in inches of the area
                      covering the text. </param>
	<returns>
 True if the string has been found, else False. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PdfSearchText(System.Int32,System.String,System.Int32,System.Boolean,System.Boolean,System.Single@,System.Single@,System.Single@,System.Single@)">
	<summary>
 Searches a specific page of the displayed PDF for an occurrence of a given text string and returns
 its bounding box.
 </summary>
	<param name="Page">The page to search. </param>
	<param name="Text">The text to search for. </param>
	<param name="Occurrence">The occurrence of the text to search for. 1 to search for the first
                          occurrence, 2 for the second... 0 is not accepted.<para></para></param>
	<param name="CaseSensitive">True to apply case-sensitive search, else False. </param>
	<param name="WholeWords">Searches for whole words only. </param>
	<param name="Left">If the occurrence is found, returns the left position in inches of the
                    area covering the text. </param>
	<param name="Top">If the occurrence is found, returns the top position in inches of the
                   area covering the text. </param>
	<param name="Width">If the occurrence is found, returns the width in inches of the area
                     covering the text. </param>
	<param name="Height">If the occurrence is found, returns the height in inches of the area
                      covering the text. </param>
	<returns>
 True if the string has been found, else False. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PdfGetPageText">
	<summary>
 Returns the text of the current page of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetPageWidth">
	<summary>
 Returns the page width in PDF point unit of the selected page of the displayed PDF.
 </summary>
	<returns>
 The page width. Returns 0 if failed: You can use the GetStat() function to determine the reason.
 </returns>
	<remarks>
 1 point = 1/72 inch.
   * To get the page width in inches: Width = PdfGetPageWidth() / 72
   * To get the page width in centimeters: Width = PdfGetPageWidth() / 72 * 2.54
 </remarks>
</member><member name="M:GdPicture.GdViewer.PdfGetPageHeight">
	<summary>
 Returns the page height in PDF point unit of the selected page of the displayed PDF.
 </summary>
	<returns>
 The page width. Returns 0 if failed: You can use the GetStat() function to determine the reason.
 </returns>
	<remarks>
 1 point = 1/72 inch.
   * To get the page height in inches: Height = PdfGetPageHeight() / 72
   * To get the page height in centimeters: Height = PdfGetPageHeight() / 72 * 2.54
 
 </remarks>
</member><member name="M:GdPicture.GdViewer.PdfGetPageText(System.Int32)">
	<summary>
 Returns the text of a specific page of the displayed PDF.
 </summary>
	<param name="Page">The page to extract the text. </param>
</member><member name="M:GdPicture.GdViewer.PdfGetPageTextArea(System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Returns the text in a specific rectangle in the current page of the displayed PDF.
 </summary>
	<param name="Left">Left position of the rectangle in inches. </param>
	<param name="Top">Top position of the rectangle in inches. </param>
	<param name="Width">Width of the rectangle in inches. </param>
	<param name="Height">Height of the rectangle in inches. </param>
	<returns>
 The text within the specified area. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PdfGetPageTextArea(System.Int32,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Returns the text in a specific rectangle in a specific page of the displayed PDF.
 </summary>
	<param name="Page">The page to extract the text. </param>
	<param name="Left">Left position of the rectangle in inches. </param>
	<param name="Top">Top position of the rectangle in inches. </param>
	<param name="Width">Width of the rectangle in inches. </param>
	<param name="Height">Height of the rectangle in inches. </param>
	<returns>
 The text within the specified area. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PdfGetVersion">
	<summary>
 Returns the version of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetMetadata">
	<summary>
 Returns if any, the Metadata of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetEncryptionScheme">
	<summary>
 Returns if any, the mode of encryption of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetAuthor">
	<summary>
 Returns the author of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetTitle">
	<summary>
 Returns the title of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetSubject">
	<summary>
 Returns the subject of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetKeywords">
	<summary>
 Returns the keywords of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetCreator">
	<summary>
 Returns the creator of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetProducer">
	<summary>
 Returns the producer of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetCreationDate">
	<summary>
 Returns the date of creation of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.PdfGetModificationDate">
	<summary>
 Returns the date of modification of the displayed PDF.
 </summary>
</member><member name="M:GdPicture.GdViewer.GetDocumentTop">
	<summary>
 Returns the top coordinate in pixel of the current page of the displayed document within the viewer.
 </summary>
</member><member name="M:GdPicture.GdViewer.GetDocumentLeft">
	<summary>
 Returns the left coordinate in pixel of the current page of the displayed document within the
 viewer.
 </summary>
</member><member name="M:GdPicture.GdViewer.GetVersion">
	<summary>
 This function returns the GdPicture source code version used in the following format M.mrrr where 'M' describes the major version, 'm' the medium version and 'rrr' the release number.
 </summary>
</member><member name="M:GdPicture.GdViewer.Clear">
	<summary>
 Clears the viewer.
 </summary>
</member><member name="M:GdPicture.GdViewer.CoordViewerToDocument(System.Int32,System.Int32,System.Int32@,System.Int32@)">
	<summary>
 Makes a translation of a point coordinates from the viewer space to the image space.
 </summary>
	<param name="ViewerLeft">The Left coordinate in pixel of the point over the viewer. </param>
	<param name="ViewerTop">The Top coordinate in pixel of the point over the viewer. </param>
	<param name="ImageLeft">Returns The Left coordinate in pixel of the point over the displayed
                         document. </param>
	<param name="ImageTop">Returns The Top coordinate in pixel of the point over the displayed
                        document.</param>
	<example>
 Using CoordViewerToDocument
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim ImageLeft as Integer
     Dim ImageTop as Integer
     oGdViewer.CoordViewerToDocument(10, 10, ImageLeft, ImageTop)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.CoordDocumentToViewer(System.Int32,System.Int32,System.Int32@,System.Int32@)">
	<summary>
 Makes a translation of a point coordinates from the image space to the viewer space.
 </summary>
	<param name="ImageLeft">The Left coordinate in pixel of the point over the displayed document. </param>
	<param name="ImageTop">The Top coordinate in pixel of the point over the displayed document. </param>
	<param name="ViewerLeft">Returns the Left coordinate in pixel of the point over the viewer. </param>
	<param name="ViewerTop">Returns the Top coordinate in pixel of the point over the viewer.</param>
	<example>
 Using CoordDocumentToViewer
 
 <code lang="vb.net">
 Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
     Dim ViewerLeft as Integer
     Dim ViewerTop as Integer
     oGdViewer.CoordDocumentToViewer(10, 10, ViewerLeft, ViewerTop)
 End Sub
 </code>
	</example>
</member><member name="M:GdPicture.GdViewer.SetItemMenuCaption(System.Int32,System.String)">
	<summary>
 Changes the caption of an item of the contextual menu.
 </summary>
	<param name="MenuItemIdx">Item Index.<para></para>Can be: 1: Pages / Frames<para></para>2:
                           Pages / Frames -&gt; Goto First<para></para>3: Pages / Frames -&gt;
                           Goto Previous<para></para>4: Pages / Frames -&gt; Goto Next<para></para>5:
                           Pages / Frames -&gt; Goto Last<para></para>6: Play Gif<para></para>7:
                           Stop Gif Animation<para></para>8: Rotations - Flips<para></para>9:
                           Rotations - Flips -&gt; Rotate 90°<para></para>10: Rotations -
                           Flips -&gt; Rotate 180°<para></para>11: Rotations - Flips -&gt;
                           Rotate 270°<para></para>12: Rotations - Flips -&gt; Flip X<para></para>13:
                           Rotations - Flips -&gt; RotateFlip 90°<para></para>14: Rotations -
                           Flips -&gt; RotateFlip 180°<para></para>15: Rotations - Flips -&gt;
                           RotateFlip 270°<para></para>16: ScrollBars<para></para>17: Copy to
                           Clipboard<para></para>18: Zoom<para></para>19: Zoom -&gt; Zoom in<para></para>20:
                           Zoom -&gt; Zoom out<para></para>21: Zoom -&gt; Zoom 100%<para></para>22:
                           Zoom -&gt; Zoom to selected area<para></para>23: Zoom -&gt; Fit
                           image to viewer (keep aspect ratio)<para></para>24: Zoom -&gt; Fit
                           image to viewer (don't keep aspect ratio)<para></para>25: Zoom -&gt;
                           Fit image to viewer width<para></para>26: Zoom -&gt; Fit image to
                           viewer height<para></para>27: Mouse Mode<para></para>28: Mouse Mode
                           -&gt; Nothing<para></para>29: Mouse Mode -&gt; Hand Pan Tool<para></para>30:
                           Mouse Mode -&gt; Area Selection Tool<para></para>31: Mouse Mode -&gt;
                           Area Zooming Tool<para></para>32: Viewer Quality<para></para>33:
                           Viewer Quality -&gt; Automatic<para></para>34: Viewer Quality -&gt;
                           Quality Low<para></para>35: Viewer Quality -&gt; Quality Bilinear<para></para>36:
                           Viewer Quality -&gt; Quality Bicubic<para></para>37: Viewer Quality
                           -&gt; Quality Bilinear HQ<para></para>38: Viewer Quality -&gt;
                           Quality Bicubic HQ<para></para>39: Mouse Mode -&gt; Magnifier Tool<para></para></param>
	<param name="NewMenuCaption">New Item caption.</param>
</member><member name="M:GdPicture.GdViewer.SetItemMenuEnabled(System.Int32,System.Boolean)">
	<summary>
 Enables or disables an item of the contextual menu.
 </summary>
	<param name="MenuItemIdx">Item Index.<para></para>Can be: 1: Pages / Frames<para></para>2: Pages
                           / Frames -&gt; Goto First<para></para>3: Pages / Frames -&gt; Goto
                           Previous<para></para>4: Pages / Frames -&gt; Goto Next<para></para>5:
                           Pages / Frames -&gt; Goto Last<para></para>6: Play Gif<para></para>7:
                           Stop Gif Animation<para></para>8: Rotations - Flips<para></para>9:
                           Rotations - Flips -&gt; Rotate 90°<para></para>10: Rotations - Flips
                           -&gt; Rotate 180°<para></para>11: Rotations - Flips -&gt; Rotate 270°<para></para>12:
                           Rotations - Flips -&gt; Flip X<para></para>13: Rotations - Flips -&gt;
                           RotateFlip 90°<para></para>14: Rotations - Flips -&gt; RotateFlip 180°<para></para>15:
                           Rotations - Flips -&gt; RotateFlip 270°<para></para>16: ScrollBars<para></para>17:
                           Copy to Clipboard<para></para>18: Zoom<para></para>19: Zoom -&gt; Zoom
                           in<para></para>20: Zoom -&gt; Zoom out<para></para>21: Zoom -&gt; Zoom
                           100%<para></para>22: Zoom -&gt; Zoom to selected area<para></para>23:
                           Zoom -&gt; Fit image to viewer (keep aspect ratio)<para></para>24: Zoom
                           -&gt; Fit image to viewer (don't keep aspect ratio)<para></para>25: Zoom
                           -&gt; Fit image to viewer width<para></para>26: Zoom -&gt; Fit image to
                           viewer height<para></para>27: Mouse Mode<para></para>28: Mouse Mode -&gt;
                           Nothing<para></para>29: Mouse Mode -&gt; Hand Pan Tool<para></para>30:
                           Mouse Mode -&gt; Area Selection Tool<para></para>31: Mouse Mode -&gt;
                           Area Zooming Tool<para></para>32: Viewer Quality<para></para>33: Viewer
                           Quality -&gt; Automatic<para></para>34: Viewer Quality -&gt; Quality
                           Low<para></para>35: Viewer Quality -&gt; Quality Bilinear<para></para>36:
                           Viewer Quality -&gt; Quality Bicubic<para></para>37: Viewer Quality -&gt;
                           Quality Bilinear HQ<para></para>38: Viewer Quality -&gt; Quality Bicubic
                           HQ<para></para>39: Mouse Mode -&gt; Magnifier Tool<para></para></param>
	<param name="Enable">True for enable menu item, else False.</param>
</member><member name="M:GdPicture.GdViewer.RemoveItemMenu(System.Int32)">
	<summary>
 Removes an item of the contextual menu.
 </summary>
	<param name="MenuItemIdx">Item Index.<para></para>Can be: 1: Pages / Frames<para></para>2: Pages
                           / Frames -&gt; Goto First<para></para>3: Pages / Frames -&gt; Goto
                           Previous<para></para>4: Pages / Frames -&gt; Goto Next<para></para>5:
                           Pages / Frames -&gt; Goto Last<para></para>6: Play Gif<para></para>7:
                           Stop Gif Animation<para></para>8: Rotations - Flips<para></para>9:
                           Rotations - Flips -&gt; Rotate 90°<para></para>10: Rotations - Flips
                           -&gt; Rotate 180°<para></para>11: Rotations - Flips -&gt; Rotate 270°<para></para>12:
                           Rotations - Flips -&gt; Flip X<para></para>13: Rotations - Flips -&gt;
                           RotateFlip 90°<para></para>14: Rotations - Flips -&gt; RotateFlip 180°<para></para>15:
                           Rotations - Flips -&gt; RotateFlip 270°<para></para>16: ScrollBars<para></para>17:
                           Copy to Clipboard<para></para>18: Zoom<para></para>19: Zoom -&gt; Zoom
                           in<para></para>20: Zoom -&gt; Zoom out<para></para>21: Zoom -&gt; Zoom
                           100%<para></para>22: Zoom -&gt; Zoom to selected area<para></para>23:
                           Zoom -&gt; Fit image to viewer (keep aspect ratio)<para></para>24: Zoom
                           -&gt; Fit image to viewer (don't keep aspect ratio)<para></para>25: Zoom
                           -&gt; Fit image to viewer width<para></para>26: Zoom -&gt; Fit image to
                           viewer height<para></para>27: Mouse Mode<para></para>28: Mouse Mode -&gt;
                           Nothing<para></para>29: Mouse Mode -&gt; Hand Pan Tool<para></para>30:
                           Mouse Mode -&gt; Area Selection Tool<para></para>31: Mouse Mode -&gt;
                           Area Zooming Tool<para></para>32: Viewer Quality<para></para>33: Viewer
                           Quality -&gt; Automatic<para></para>34: Viewer Quality -&gt; Quality
                           Low<para></para>35: Viewer Quality -&gt; Quality Bilinear<para></para>36:
                           Viewer Quality -&gt; Quality Bicubic<para></para>37: Viewer Quality -&gt;
                           Quality Bilinear HQ<para></para>38: Viewer Quality -&gt; Quality Bicubic
                           HQ<para></para>39: Mouse Mode -&gt; Magnifier Tool<para></para></param>
</member><member name="M:GdPicture.GdViewer.CopyToClipboard">
	<summary>
 Copies the displayed document into the Clipboard.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Not available for MetaFile documents.
 </remarks>
</member><member name="M:GdPicture.GdViewer.CopyRegionToClipboard(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Copies a region of the displayed document into the Clipboard.
 </summary>
	<param name="SrcLeft">The left source pixel. </param>
	<param name="SrcTop">The top source pixel. </param>
	<param name="Width">Width of the region in pixel. </param>
	<param name="Height">Height of the region in pixel. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
	<remarks>
 Not available for MetaFile documents.
 </remarks>
</member><member name="M:GdPicture.GdViewer.GetStat">
	<summary>
 Returns the last viewer Status.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.TagCount">
	<summary>
 Returns the number of Tags (Exif, Extra, Thumbnails &amp; GPS) attached to the displayed document.
 </summary>
	<returns>
 The number of tags attached to the displayed document.
 </returns>
	<remarks>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs
 </remarks>
</member><member name="M:GdPicture.GdViewer.IPTCCount">
	<summary>
 Returns the number of IPTC Tags attached to the displayed document.
 </summary>
	<returns>
 Number of IPTC tag
 </returns>
</member><member name="M:GdPicture.GdViewer.TagGetID(System.Int32)">
	<summary>
 Returns an Exif Tag ID attached to the displayed document.
 </summary>
	<param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to the displayed
                     document. </param>
	<returns>
 A member of the Tags enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.TagCount"/>
	<remarks>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs
 </remarks>
</member><member name="M:GdPicture.GdViewer.IPTCGetID(System.Int32)">
	<summary>
 Returns an IPTC Tag ID attached to the displayed document.
 </summary>
	<param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to the displayed
                     document. </param>
	<returns>
 The IPTC tag ID. A member of the IPTCTags enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.IPTCCount"/>
</member><member name="M:GdPicture.GdViewer.TagGetName(System.Int32)">
	<summary>
 Returns as string a Tag name attached to the displayed document.
 </summary>
	<param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to the displayed
                     document. </param>
	<returns>
 The name of the tag.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.TagCount"/>
	<remarks>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs
 </remarks>
</member><member name="M:GdPicture.GdViewer.TagGetValueString(System.Int32)">
	<summary>
 Returns as string, the value of a Tag attached to the displayed document.
 </summary>
	<param name="TagNo">Must be a value between 1 and the number of Exif TAGs attached to the displayed
                     document. </param>
	<returns>
 The value of the tag.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.TagCount"/>
	<remarks>
 Available for EXIF TAGs, Image property ID Tags, Extra TAGs (Like Adobe Image Information tags etc.),
 Thumbnail related TAGs and Gps TAGs
 </remarks>
</member><member name="M:GdPicture.GdViewer.IPTCGetValueString(System.Int32)">
	<summary>
 Returns as string, the value of an IPTC Tag attached to the displayed document.
 </summary>
	<param name="TagNo">Must be a value between 1 and the number of IPTC TAGs attached to the displayed
                     document. </param>
	<returns>
 The value of the tag.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.IPTCCount"/>
</member><member name="M:GdPicture.GdViewer.PrintGetColorMode">
	<summary>
 Returns the active printer color Mode.
 </summary>
	<returns>
 A member of the PrinterColorMode enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintSetColorMode(GdPicture.PrinterColorMode)">
	<summary>
 Sets to the active printer the color mode for the print process.
 </summary>
	<param name="ColorMode">A member of the PrinterColorMode enumeration. </param>
</member><member name="M:GdPicture.GdViewer.PrintGetDocumentName">
	<summary>
 Gets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
	<returns>
 The document name to display. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintSetDocumentName(System.String)">
	<summary>
 Sets the document name to display during the next print process (for example, in a print status
 dialog box or printer queue) while printing the document.
 </summary>
	<param name="DocumentName">The document name to display. </param>
</member><member name="M:GdPicture.GdViewer.PrintSetShowPrintingProgress(System.Boolean)">
	<summary>
 Tells the component to show or hide progress indicator during printing (showed by default).
 </summary>
	<param name="Show">True to show progress indicators printing, else False.</param>
</member><member name="M:GdPicture.GdViewer.PrintSetPaperBin(System.Int32)">
	<summary>
 Sets the paper bin used by the active printer.
 </summary>
	<param name="PaperBin">The paper bin to use.<para></para></param>
	<returns>
 True if the paper bin has been selected else false (unsupported paper bin). Standard values are:
 
 1 - Upper
 
 2 - Lower
 
 3 - Middle
 
 4 - Manual
 
 5 - Envelope
 
 6 - ManualFeed
 
 7 - AutomaticFeed
 
 8 - TractorFeed
 
 9 - SmallFormat
 
 10 - LargeFormat
 
 11 - LargeCapacity
 
 14 - Cassette
 
 15 - FormSource
 
 256 or larger - Custom 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintSetPaperBin(System.Drawing.Printing.PaperSource)">
	<summary>
 Sets the paper bin to be used by the active printer.
 </summary>
	<param name="PaperBin">The paper bin to use. A PaperSource object. </param>
	<returns>
 True if the paper bin has been selected else false (unsupported paper bin). 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintGetPaperBin">
	<summary>
 Returns the paperbin used by the active printer.
 </summary>
	<returns>
 The paperbin used.
 
 Standard values are:
 
 1 - Upper
 
 2 - Lower
 
 3 - Middle
 
 4 - Manual
 
 5 - Envelope
 
 6 - ManualFeed
 
 7 - AutomaticFeed
 
 8 - TractorFeed
 
 9 - SmallFormat
 
 10 - LargeFormat
 
 11 - LargeCapacity
 
 14 - Cassette
 
 15 - FormSource
 
 256 or larger - Custom 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintSetFromToPage(System.Int32,System.Int32)">
	<summary>
 Ask to the component for the next print process to print a range of page with multipage document.
 </summary>
	<param name="FromPage">First page to print. </param>
	<param name="ToPage">Last page to print. </param>
</member><member name="M:GdPicture.GdViewer.PrintGetQuality">
	<summary>
 Returns the current quality of the active printer.
 </summary>
	<returns>
 A member of the PrintQuality enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintSetQuality(GdPicture.PrintQuality)">
	<summary>
 Sets the quality of the active printer.
 </summary>
	<param name="Quality">A member of the PrintQuality enumeration. </param>
</member><member name="M:GdPicture.GdViewer.PrintGetStat">
	<summary>
 Returns the last Printer status.
 </summary>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintForcePdfDpiRendering(System.Int32)">
	<summary>
 Force the PDF rendering resolution to use during PDF printing. For expert only.
 </summary>
	<param name="DPI">The PDF rendering resolution to use for PDF printing. Set -1 for Automatic
                   (default behavior). </param>
</member><member name="M:GdPicture.GdViewer.PrintSetCopies(System.Int16)">
	<summary>
 Tell to the active printer the number of copies to print.
 </summary>
	<param name="Copies">The number of copies to print. </param>
</member><member name="M:GdPicture.GdViewer.PrintGetCopies">
	<summary>
 Returns the number of copies to print with the selected printer.
 </summary>
	<returns>
 Number of copies to print. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintSetDuplexMode(System.Drawing.Printing.Duplex)">
	<summary>
 Sets duplex mode for the selected printer.
 </summary>
	<param name="DuplexMode">A member of the Duplex enumeration. </param>
</member><member name="M:GdPicture.GdViewer.PrintGetDuplexMode">
	<summary>
 Returns the print duplex mode for the selected printer.
 </summary>
	<returns>
 A member of the Duplex enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintSetOrientation(GdPicture.PrinterOrientation)">
	<summary>
 Defines the page orientation when printing.
 </summary>
	<param name="Orientation">A member of the PrinterOrientation enumeration. </param>
</member><member name="M:GdPicture.GdViewer.PrintGetOrientation">
	<summary>
 Returns the page orientation when printing.
 </summary>
	<returns>
 A member of the PrinterOrientation enumeration. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintGetActivePrinter">
	<summary>
 Returns the selected printer name.
 </summary>
	<returns>
 The name of the selected printer. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintSetActivePrinter(System.String)">
	<summary>
 Changes the active printer.
 </summary>
	<param name="PrinterName">The name of the new active printer. </param>
	<returns>
 True if success, else False. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintGetPrintersCount">
	<summary>
 Returns the number of available printers.
 </summary>
	<returns>
 Number of copies. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintGetPrinterName(System.Int32)">
	<summary>
 Returns the name of an available printer.
 </summary>
	<param name="PrinterNo">Value between 1 and printer count. </param>
	<returns>
 The name of the printer. 
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintDialog">
	<summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document.
 </summary>
	<returns>
 True if success, else False.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.PrintGetStat"/>
</member><member name="M:GdPicture.GdViewer.PrintSetPrinterSettings(System.Drawing.Printing.PrinterSettings)">
	<summary>
 Sets the current printer settings.
 </summary>
	<param name="PS">A System.Drawing.Printing.PrinterSettings object. The printer settings.</param>
</member><member name="M:GdPicture.GdViewer.PrintGetPrinterSettings">
	<summary>
 Returns the current printer settings.
 </summary>
	<returns>
 A System.Drawing.Printing.PrinterSettings object. The current printer settings.
 </returns>
</member><member name="M:GdPicture.GdViewer.PrintDialog(System.Windows.Forms.IWin32Window)">
	<summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document.
 
 This function allows to specify the top-level window that will own the modal dialog box.
 </summary>
	<param name="owner">Represents the top-level window that will own the modal dialog box. </param>
</member><member name="M:GdPicture.GdViewer.PrintDialogFit">
	<summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document adjusting pages size to the default paper size.
 </summary>
	<returns>
 True if success, else False.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.PrintGetStat"/>
</member><member name="M:GdPicture.GdViewer.PrintDialogFit(System.Windows.Forms.IWin32Window)">
	<summary>
 Invokes the standard Windows Printer Dialog, which allows users to choose the printer settings, then
 prints the displayed document adjusting pages size to the default paper size.
 
 This function allows to specify the top-level window that will own the modal dialog box.
 </summary>
	<param name="owner">Represents the top-level window that will own the modal dialog box. </param>
	<returns>
 True if success, else False.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.PrintGetStat"/>
</member><member name="M:GdPicture.GdViewer.Print">
	<summary>
 Prints the displayed document the active printer.
 </summary>
	<seealso cref="M:GdPicture.GdViewer.PrintGetStat"/>
</member><member name="M:GdPicture.GdViewer.PrintInterop">
	<summary>
 This function is just a wrapper of the Print() function that is not supported under some legacy environments of development such as VB6.
 </summary>
	<seealso cref="M:GdPicture.GdViewer.Print"/>
</member><member name="M:GdPicture.GdViewer.PrintFit">
	<summary>
 Prints the displayed document to the active printer. Adjusts the pages size to the default paper
 size.
 </summary>
	<seealso cref="M:GdPicture.GdViewer.PrintGetStat"/>
</member><member name="M:GdPicture.GdViewer.PrintSetStdPaperSize(System.Int32)">
	<summary>
 Sets a standard paper size to use by the active printer.
 </summary>
	<param name="PaperSize">Paper size constant.<para></para>Can be:<para></para>0 - Custom<para></para>1
                         - Letter<para></para>2 - LetterSmall<para></para>3 - Tabloid<para></para>4
                         - Ledger<para></para>5 - Legal<para></para>6 - Statement<para></para>7 -
                         Executive<para></para>8 - A3<para></para>9 - A4<para></para>10 - A4Small<para></para>11
                         - A5<para></para>12 - B4<para></para>13 - B5<para></para>14 - Folio<para></para>15
                         - Quarto<para></para>16 - Standard10x14<para></para>17 - Standard11x17<para></para>18
                         - Note<para></para>19 - Number9Envelope<para></para>20 - Number10Envelope<para></para>21
                         - Number11Envelope<para></para>22 - Number12Envelope<para></para>23 -
                         Number14Envelope<para></para>24 - CSheet<para></para>25 - DSheet<para></para>26
                         - ESheet<para></para>27 - DLEnvelope<para></para>28 - C5Envelope<para></para>29
                         - C3Envelope<para></para>30 - C4Envelope<para></para>31 - C6Envelope<para></para>32
                         - C65Envelope<para></para>33 - B4Envelope<para></para>34 - B5Envelope<para></para>35
                         - B6Envelope<para></para>36 - ItalyEnvelope<para></para>37 -
                         MonarchEnvelope<para></para>38 - PersonalEnvelope<para></para>39 -
                         USStandardFanfold<para></para>40 - GermanStandardFanfold<para></para>41 -
                         GermanLegalFanfold<para></para>42 - IsoB4<para></para>43 - JapanesePostcard<para></para>44
                         - Standard9x11<para></para>45 - Standard10x11<para></para>46 -
                         Standard15x11<para></para>47 - InviteEnvelope<para></para>50 - LetterExtra<para></para>51
                         - LegalExtra<para></para>52 - TabloidExtra<para></para>53 - A4Extra<para></para>54
                         - LetterTransverse<para></para>55 - A4Transverse<para></para>56 -
                         LetterExtraTransverse<para></para>57 - APlus<para></para>58 - BPlus<para></para>59
                         - LetterPlus<para></para>60 - A4Plus<para></para>61 - A5Transverse<para></para>62
                         - B5Transverse<para></para>63 - A3Extra<para></para>64 - A5Extra<para></para>65
                         - B5Extra<para></para>66 - A2<para></para>67 - A3Transverse<para></para>68
                         - A3ExtraTransverse<para></para>69 - JapanesePostcard<para></para>70 - A6<para></para>71
                         - JapaneseEnvelopeKakuNumber2<para></para>72 - JapaneseEnvelopeKakuNumber3<para></para>73
                         - JapaneseEnvelopeChouNumber3<para></para>74 - JapaneseEnvelopeChouNumber4<para></para>75
                         - LetterRotated<para></para>76 - A3Rotated<para></para>77 - A4Rotated<para></para>78
                         - A5Rotated<para></para>79 - B4JisRotated<para></para>80 - B5JisRotated<para></para>81
                         - JapanesePostcardRotated<para></para>82 - JapaneseDoublePostcardRotated<para></para>83
                         - A6Rotated<para></para>84 - JapaneseEnvelopeKakuNumber2Rotated<para></para>85
                         - JapaneseEnvelopeChouNumber3Rotated<para></para>86 -
                         JapaneseEnvelopeChouNumber4Rotated<para></para>87 -
                         JapaneseEnvelopeChouNumber4Rotated<para></para>88 - B6Jis<para></para>89 -
                         B6JisRotated<para></para>90 - Standard12x11<para></para>91 -
                         JapaneseEnvelopeYouNumber4<para></para>92 -
                         JapaneseEnvelopeYouNumber4Rotated<para></para>93 - Prc16K<para></para>94 -
                         Prc32K<para></para>95 - Prc32KBig<para></para>96 - PrcEnvelopeNumber1<para></para>97
                         - PrcEnvelopeNumber2<para></para>98 - PrcEnvelopeNumber3<para></para>99 -
                         PrcEnvelopeNumber4<para></para>100 - PrcEnvelopeNumber5<para></para>101 -
                         PrcEnvelopeNumber6<para></para>102 - PrcEnvelopeNumber7<para></para>103 -
                         PrcEnvelopeNumber8<para></para>104 - PrcEnvelopeNumber9<para></para>105 -
                         PrcEnvelopeNumber10<para></para>106 - Prc16KRotated<para></para>107 -
                         Prc32KRotated<para></para>108 - Prc32KBigRotated<para></para>109 -
                         PrcEnvelopeNumber1Rotated<para></para>110 - PrcEnvelopeNumber2Rotated<para></para>111
                         - PrcEnvelopeNumber3Rotated<para></para>112 - PrcEnvelopeNumber4Rotated<para></para>113
                         - PrcEnvelopeNumber5Rotated<para></para>114 - PrcEnvelopeNumber6Rotated<para></para>115
                         - PrcEnvelopeNumber7Rotated<para></para>116 - PrcEnvelopeNumber8Rotated<para></para>117
                         - PrcEnvelopeNumber9Rotated<para></para>118 - PrcEnvelopeNumber10Rotated<para></para>Greater
                         than 118 - A custom paper size </param>
</member><member name="M:GdPicture.GdViewer.PrintSetPaperSize(System.Drawing.Printing.PaperSize)">
	<summary>
 Sets the paper size to be used by the active printer.
 </summary>
	<param name="PaperSize">Paper size. A PaperSize object.</param>
</member><member name="M:GdPicture.GdViewer.PrintSetUserPaperSize(System.Single,System.Single)">
	<summary>
 Sets a custom paper size to use by the active printer.
 </summary>
	<param name="PaperWidth">Custom paper width in Inches. </param>
	<param name="PaperHeight">Custom paper height in Inches. </param>
</member><member name="M:GdPicture.GdViewer.PrintGetPaperHeight">
	<summary>
 Gets the paper height used by the active printer.
 </summary>
	<returns>
 The paper height in Inches.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.PrintGetPaperSize"/>
	<seealso cref="M:GdPicture.GdViewer.PrintGetPaperWidth"/>
</member><member name="M:GdPicture.GdViewer.PrintGetPaperWidth">
	<summary>
 Gets the paper width used by the active printer.
 </summary>
	<returns>
 The paper width in Inches.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.PrintGetPaperSize"/>
	<seealso cref="M:GdPicture.GdViewer.PrintGetPaperHeight"/>
</member><member name="M:GdPicture.GdViewer.PrintGetAlignment">
	<summary>
 Gets the image alignment into the page during a print process .
 </summary>
	<returns>
 A member of the PrintAlignment enumeration.
 </returns>
	<seealso cref="M:GdPicture.GdViewer.PrintSetAlignment(GdPicture.PrintAlignment)"/>
</member><member name="M:GdPicture.GdViewer.PrintSetAlignment(GdPicture.PrintAlignment)">
	<summary>
 Sets the image alignment into the page during a print process.
 </summary>
	<param name="ImageAlignment">A member of the PrintAlignment enumeration. </param>
	<seealso cref="M:GdPicture.GdViewer.PrintGetAlignment"/>
</member><member name="M:GdPicture.GdViewer.PrintSetAutoRotation(System.Boolean)">
	<summary>
 Determines if the object rotate automatically pages to fit on the output medium.
 </summary>
	<param name="AutoRotation">True for automatic rotation, else False.</param>
</member><member name="M:GdPicture.GdViewer.PrintGetPaperSize">
	<summary>
 Returns the current paper size of the active printer.
 </summary>
	<returns>
 Paper size constant.
 
 Can be:
 
 1 - Letter
 
 2 - LetterSmall
 
 3 - Tabloid
 
 4 - Ledger
 
 5 - Legal
 
 6 - Statement
 
 7 - Executive
 
 8 - A3
 
 9 - A4
 
 10 - A4Small
 
 11 - A5
 
 12 - B4
 
 13 - B5
 
 14 - Folio
 
 15 - Quarto
 
 16 - Standard10x14
 
 17 - Standard11x17
 
 18 - Note
 
 19 - Number9Envelope
 
 20 - Number10Envelope
 
 21 - Number11Envelope
 
 22 - Number12Envelope
 
 23 - Number14Envelope
 
 24 - CSheet
 
 25 - DSheet
 
 26 - ESheet
 
 27 - DLEnvelope
 
 28 - C5Envelope
 
 29 - C3Envelope
 
 30 - C4Envelope
 
 31 - C6Envelope
 
 32 - C65Envelope
 
 33 - B4Envelope
 
 34 - B5Envelope
 
 35 - B6Envelope
 
 36 - ItalyEnvelope
 
 37 - MonarchEnvelope
 
 38 - PersonalEnvelope
 
 39 - USStandardFanfold
 
 40 - GermanStandardFanfold
 
 41 - GermanLegalFanfold
 
 42 - IsoB4
 
 43 - JapanesePostcard
 
 44 - Standard9x11
 
 45 - Standard10x11
 
 46 - Standard15x11
 
 47 - InviteEnvelope
 
 50 - LetterExtra
 
 51 - LegalExtra
 
 52 - TabloidExtra
 
 53 - A4Extra
 
 54 - LetterTransverse
 
 55 - A4Transverse
 
 56 - LetterExtraTransverse
 
 57 - APlus
 
 58 - BPlus
 
 59 - LetterPlus
 
 60 - A4Plus
 
 61 - A5Transverse
 
 62 - B5Transverse
 
 63 - A3Extra
 
 64 - A5Extra
 
 65 - B5Extra
 
 66 - A2
 
 67 - A3Transverse
 
 68 - A3ExtraTransverse
 
 69 - JapanesePostcard
 
 70 - A6
 
 71 - JapaneseEnvelopeKakuNumber2
 
 72 - JapaneseEnvelopeKakuNumber3
 
 73 - JapaneseEnvelopeChouNumber3
 
 74 - JapaneseEnvelopeChouNumber4
 
 75 - LetterRotated
 
 76 - A3Rotated
 
 77 - A4Rotated
 
 78 - A5Rotated
 
 79 - B4JisRotated
 
 80 - B5JisRotated
 
 81 - JapanesePostcardRotated
 
 82 - JapaneseDoublePostcardRotated
 
 83 - A6Rotated
 
 84 - JapaneseEnvelopeKakuNumber2Rotated
 
 85 - JapaneseEnvelopeChouNumber3Rotated
 
 86 - JapaneseEnvelopeChouNumber4Rotated
 
 87 - JapaneseEnvelopeChouNumber4Rotated
 
 88 - B6Jis
 
 89 - B6JisRotated
 
 90 - Standard12x11
 
 91 - JapaneseEnvelopeYouNumber4
 
 92 - JapaneseEnvelopeYouNumber4Rotated
 
 93 - Prc16K
 
 94 - Prc32K
 
 95 - Prc32KBig
 
 96 - PrcEnvelopeNumber1
 
 97 - PrcEnvelopeNumber2
 
 98 - PrcEnvelopeNumber3
 
 99 - PrcEnvelopeNumber4
 
 100 - PrcEnvelopeNumber5
 
 101 - PrcEnvelopeNumber6
 
 102 - PrcEnvelopeNumber7
 
 103 - PrcEnvelopeNumber8
 
 104 - PrcEnvelopeNumber9
 
 105 - PrcEnvelopeNumber10
 
 106 - Prc16KRotated
 
 107 - Prc32KRotated
 
 108 - Prc32KBigRotated
 
 109 - PrcEnvelopeNumber1Rotated
 
 110 - PrcEnvelopeNumber2Rotated
 
 111 - PrcEnvelopeNumber3Rotated
 
 112 - PrcEnvelopeNumber4Rotated
 
 113 - PrcEnvelopeNumber5Rotated
 
 114 - PrcEnvelopeNumber6Rotated
 
 115 - PrcEnvelopeNumber7Rotated
 
 116 - PrcEnvelopeNumber8Rotated
 
 117 - PrcEnvelopeNumber9Rotated
 
 118 - PrcEnvelopeNumber10Rotated
 
 Greater than 118 - A custom paper size
 </returns>
	<seealso cref="M:GdPicture.GdViewer.PrintGetPaperWidth"/>
	<seealso cref="M:GdPicture.GdViewer.PrintGetPaperHeight"/>
</member><member name="M:GdPicture.GdViewer.PrintGetMargins(System.Single@,System.Single@)">
	<summary>
 Gets the physical margins of the active printer.
 </summary>
	<param name="LeftMargin">Returns the left physical margin in inches. </param>
	<param name="TopMargin">Returns the top physical margin in inches. </param>
</member><member name="M:GdPicture.GdViewer.SupportFunc(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@,System.Int32@,System.String@,System.String@,System.String@)">
	<summary>
 Here for GdPicture technical support purpose. 
 </summary>
</member><member name="E:GdPicture.AnnotationEditor.PropertyChanged">
	<summary>
 Occurs when a property have been modified.
 </summary>
	<param name="PropertyName">Specifies the name of the modified property.</param>
	<param name="Reserved1">Do not use. Here for future usage</param>
	<param name="Reserved2">Do not use. Here for future usage</param>
	<param name="Reserved3">Do not use. Here for future usage</param>
</member><member name="P:GdPicture.AnnotationEditor.GdViewer">
	<summary>
 Defines the GdViewer object to be linked with the control.
 </summary>
	<example>
		<code lang="vb.net">
  Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
  'Go to http://evaluation-gdpicture.com to get a 1 month trial key unlocking all features of the toolkit.
   AnnotationEditor1.GdViewer = GdViewer1
  End Sub
 </code>
	</example>
</member><member name="P:GdPicture.ThumbnailEx.PauseThumbsLoading">
	<summary>
 Turn this property to True to pause the background process generating thumbnails. 
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.DisplayAnnotations">
	<summary>
 Defines if annotations are displayed in each thumbnail. True by default. 
 Annotations can be GdPicture/XMP annotations, PDF annotations and PDF FormFields.
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.PreloadAllItems">
	<summary>
 Defines if all items must be generated in background. If False, only visible items will be generated.
 
 False is recommended if the number of items exceed 1000. 
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.AllItemsLoaded">
	<summary>
 Returns true if all items have been loaded, else false. 
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.ThumbnailBackColor_Internal">
	<summary>
 Defines the background color of all thumbnails.
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.ThumbnailBackColor">
	<summary>
 Defines the background color of all thumbnails.
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.ThumbnailSize">
	<summary>
 The size in pixel of each thumbnail. 
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.ItemCount">
	<summary>
 The number of items in the control. Read only. 
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.CheckBoxes">
	<summary>
 Defines if a check box appears next each item in the ThumbnailEx control. 
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.CheckBoxesMarginLeft">
	<summary>
 Defines custom checkboxes left margin. Default value is 0. Negative margin is allowed.
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.CheckBoxesMarginTop">
	<summary>
 Defines custom checkboxes top margin. Default value is 0. Negative margin is allowed.
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.MultiSelect">
	<summary>
 Defines if multiple items can be selected. 
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.AllowMoveItems">
	<summary>
 Defines if the user is able to mode items by dragging operation. The event ItemMoved is raised for
 each item moving. 
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.AllowDropFiles">
	<summary>
 Defines if the user is able to drop files from the explorer to the control.
 User will be allowed to drop files only if the items of the control have been loaded using LoadFromDirectory or if the control is empty.
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.LockGdViewerEvents">
	<summary>
 Defines if the ThumbnailEx control is reactive to the GdViewer events. This property is available
 only when thumbnails source is a GdViewer object passed to the LoadFromGdViewer method. 
 </summary>
</member><member name="P:GdPicture.ThumbnailEx.HotTracking">
	<summary>
 Defines if an item has appearance of a hyperlink when the mouse pointer passes over it. 
 </summary>
</member><member name="E:GdPicture.ThumbnailEx.Scroll">
	<summary>
 Occurs when the control is scrolled.
 </summary>
	<param name="Min">Specifies the minimum scrolling position.</param>
	<param name="Max">Specifies the maximum scrolling position.</param>
	<param name="Page">Specifies the page size, in device units. A scroll bar uses this value to determine the appropriate size of the proportional scroll box.</param>
	<param name="Pos">Specifies the position of the scroll box.</param>
	<param name="TrackPos">Specifies the immediate position of a scroll box that the user is dragging.</param>
</member><member name="E:GdPicture.ThumbnailEx.SelectedThumbnailChanged">
	<summary>
 Occurs when the selected thumbnail changed.
 </summary>
	<param name="Idx">The thumbnail index. Should be a value between 0 and thumbnails count or -1 of no thumbnail is selected.</param>
</member><member name="E:GdPicture.ThumbnailEx.ItemChecked">
	<summary>
 Occurs when the check state of a thumbnail changes.
 </summary>
	<param name="Idx">The thumbnail index. A value between 0 and thumbnails count</param>
	<param name="Checked">True is the thumbnail is checked, else False</param>
</member><member name="E:GdPicture.ThumbnailEx.ItemClicked">
	<summary>
 Occurs when a thumbnail is clicked.
 </summary>
	<param name="Idx">The thumbnail index. A value between 0 and thumbnails count</param>
	<param name="Button">The button pressed. A member of the MouseButton enumeration</param>
</member><member name="E:GdPicture.ThumbnailEx.ItemDoubleClicked">
	<summary>
 Occurs when a thumbnail is double clicked.
 </summary>
	<param name="Idx">The thumbnail index. A value between 0 and thumbnails count</param>
</member><member name="E:GdPicture.ThumbnailEx.ItemSelectionChanged">
	<summary>
 Occurs when the selected state of a thumbnail changes.
 </summary>
	<param name="Idx">The thumbnail index. A value between 0 and thumbnails count</param>
	<param name="Selected">True is the thumbnail is selected, else False</param>
</member><member name="E:GdPicture.ThumbnailEx.ItemMoved">
	<summary>
 Occurs when the user moved an item in the control.
 </summary>
	<param name="srcIdx">The moved item index. Between 0 and ItemCount - 1</param>
	<param name="dstIdx">The index of the item destination. Between 0 and ItemCount - 1</param>
</member><member name="M:GdPicture.ThumbnailEx.ClearAllItems">
	<summary>
 Reset the control and clear all generated thumbnails. 
 </summary>
</member><member name="M:GdPicture.ThumbnailEx.ReloadThumbnails">
	<summary>
 Clear the ThumbnailEx control then reload all thumbnails. 
 </summary>
</member><member name="M:GdPicture.ThumbnailEx.LoadFromGdViewer(GdPicture.GdViewer)">
	<summary>
 Load thumbnails from a GdViewer object. If the GdViewer object handles a multipage document, the ThumbnailEx control will generate a thumbnail for each page.
 </summary>
	<param name="GdViewer">A GdViewer object</param>
</member><member name="M:GdPicture.ThumbnailEx.LoadFromGdPictureImage(System.Int32)">
	<summary>
 Load thumbnails from a GdPicture Image. If the GdPicture image is a multipage image, the ThumbnailEx control will generate a thumbnail for each page.
 </summary>
	<param name="ImageID">A GdPicture Image identifier </param>
</member><member name="M:GdPicture.ThumbnailEx.RedrawItem(System.Int32)">
	<summary>
 Redraws a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
</member><member name="M:GdPicture.ThumbnailEx.EnsureVisibleItem(System.Int32)">
	<summary>
 Ensures that the specified item is visible within the control, scrolling the contents of the control if necessary.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
</member><member name="M:GdPicture.ThumbnailEx.RemoveItem(System.Int32)">
	<summary>
 Removes a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
</member><member name="M:GdPicture.ThumbnailEx.SwapItemsBitmap(System.Int32,System.Int32)">
	<summary>
 Swap two items bitmap in the thumbnail list.
 </summary>
	<param name="Item1Idx">The first item index. Between 0 and ItemCount - 1</param>
	<param name="Item2Idx">The second item index. Between 0 and ItemCount - 1</param>
</member><member name="M:GdPicture.ThumbnailEx.SwapItemsBitmap(System.Int32,System.Int32,System.Boolean)">
	<summary>
 Swap 2 items bitmap in the thumbnail list.
 </summary>
	<param name="Item1Idx">The first item index. Between 0 and ItemCount - 1</param>
	<param name="Item2Idx">The second item index. Between 0 and ItemCount - 1</param>
	<param name="SwapText">True to also swap item text, else False (default).</param>
</member><member name="M:GdPicture.ThumbnailEx.MoveItem(System.Int32,System.Int32)">
	<summary>
 Moves an item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<param name="DstIdx">The index of the item destination. Between 0 and ItemCount - 1</param>
</member><member name="M:GdPicture.ThumbnailEx.SetItemsSize(System.Int32,System.Int32)">
	<summary>
 Change the size in pixel of each item. For COM version purpose: this method updates the ThumbnailSize property which can be unreachable within some environment.
 </summary>
	<param name="Width">Width in pixel.</param>
	<param name="Height">Height in pixel.</param>
</member><member name="M:GdPicture.ThumbnailEx.SetItemText(System.Int32,System.String)">
	<summary>
 Changes the text of a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<param name="Text">The item text</param>
</member><member name="M:GdPicture.ThumbnailEx.SetItemTag(System.Int32,System.Object)">
	<summary>
 Changes the tag object associated with a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<param name="Tag">The item tag</param>
</member><member name="M:GdPicture.ThumbnailEx.GetItemTag(System.Int32)">
	<summary>
 Gets the tag object associated with a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<returns>
 the item tag object.
 </returns>
</member><member name="M:GdPicture.ThumbnailEx.SetItemBitmap(System.Int32,System.Int32)">
	<summary>
 Changes the bitmap of a specific item in the thumbnail list, from a GdPicture Image.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<param name="ImageID">A GdPicture Image Identifier</param>
</member><member name="M:GdPicture.ThumbnailEx.SetItemBitmap(System.Int32,System.Drawing.Bitmap)">
	<summary>
 Changes the bitmap of a specific item in the thumbnail list, from a Bitmap object.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<param name="Image">A Bitmap object.</param>
</member><member name="M:GdPicture.ThumbnailEx.SetItemCheckState(System.Int32,System.Boolean)">
	<summary>
 Changes the check state (if checked or not) of a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<param name="Checked">True for checked, else False</param>
</member><member name="M:GdPicture.ThumbnailEx.SetItemSelectState(System.Int32,System.Boolean)">
	<summary>
 Changes the select state (if selected or not) of a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<param name="Selected">True for selected, else False</param>
</member><member name="M:GdPicture.ThumbnailEx.GetItemCheckState(System.Int32)">
	<summary>
 Returns the check state (if checked or not) of a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<returns>
 True for checked, else False.
 </returns>
</member><member name="M:GdPicture.ThumbnailEx.GetItemSelectState(System.Int32)">
	<summary>
 Returns the select state (if selected or not) of a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<returns>
 True for selected, else False.
 </returns>
</member><member name="M:GdPicture.ThumbnailEx.GetItemText(System.Int32)">
	<summary>
 Gets the text of a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<returns>
 The item text.
 </returns>
</member><member name="M:GdPicture.ThumbnailEx.GetItemFileSource(System.Int32)">
	<summary>
 Returns the file path of the item source in case the control have been loaded from a folder source
 by the LoadFromDirectory() function.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
	<returns>
 The item's file source path. 
 </returns>
</member><member name="M:GdPicture.ThumbnailEx.SelectItem(System.Int32)">
	<summary>
 Selects and set the focus to a specific item in the thumbnail list.
 </summary>
	<param name="ItemIdx">The item index. Between 0 and ItemCount - 1</param>
</member><member name="M:GdPicture.ThumbnailEx.LoadNewThumbnails">
	<summary>
 Adds to the control items which have been added to the source after the latest loading operation.
 Works only when source is a GdViewer object or a GdPicture image. 
 </summary>
</member><member name="M:GdPicture.ThumbnailEx.LoadFromGdPicturePDF(GdPicture.GdPicturePDF)">
	<summary>
 Load thumbnails from PDF document loaded by a GdPictureImaging object. The ThumbnailEx control will generate a thumbnail for each PDF page.
 </summary>
	<param name="PDF">A GdPicturePDF object.</param>
</member><member name="M:GdPicture.ThumbnailEx.LoadFromDirectory(System.String,System.Boolean)">
	<summary>
 Load thumbnails from directory. The ThumbnailEx control will generate a thumbnail for each image or
 PDF document found in the directory.
 </summary>
	<param name="Path">The path from which thumbnail will be generated.</param>
	<param name="IncludeSubFolders">Set to True to include sub folders else False.</param>
</member><member name="M:GdPicture.ThumbnailEx.LoadFromDirectory(System.String,System.Boolean,System.String)">
	<summary>
 Load thumbnails from directory. The ThumbnailEx control will generate a thumbnail for each image or
 PDF document found in the directory.
 </summary>
	<param name="Path">The path from which thumbnail will be generated.</param>
	<param name="IncludeSubFolders">Set to True to include sub folders else False.</param>
	<param name="SearchPattern">The search string to match against the names of files in path. IE: "*.tif"
 The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, 
 nor can it contain any of the characters in InvalidPathChars.</param>
</member><member name="M:GdPicture.ThumbnailEx.AddItemFromFile(System.String)">
	<summary>
 Adds a new thumbnail to the list from a file. This function must be called only when AllItemsLoaded returns True.
 </summary>
	<param name="FilePath">The path from which thumbnail will be generated.</param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.ThumbnailEx.AddItemFromStream(System.IO.Stream)">
	<summary>
 Adds a new thumbnail to the list from a file. This function must be called only when AllItemsLoaded returns True.
 </summary>
	<param name="Stream">System.IO.Stream object storing the document. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.ThumbnailEx.AddItemFromGdPictureImage(System.Int32)">
	<summary>
 Adds a new thumbnail to the list from a GdPicture Image. This function must be called only when AllItemsLoaded returns True.
 </summary>
	<param name="ImageID">GdPicture Image Identifier. </param>
	<returns>
 A member of the GdPictureStatus enumeration.
 </returns>
</member><member name="M:GdPicture.ThumbnailEx.SetLicenseNumber(System.String)">
	<summary>
 This method have been deprecated. Please use the RegisterKEY method of the LicenseManager class.
 </summary>
</member>
</members>
</doc>